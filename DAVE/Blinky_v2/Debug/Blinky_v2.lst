
Blinky_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005c4  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .VENEER_Code  00000110  2000000c  100015c4  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 Stack         00000404  2000011c  00000000  0000011c  2**0
                  ALLOC
  3 .bss          00000008  20000520  00000404  00008520  2**2
                  ALLOC
  4 .no_init      00000004  20003ffc  00003ee0  0000011c  2**2
                  ALLOC
  5 .debug_aranges 00000168  00000000  00000000  00008120  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ec6  00000000  00000000  00008288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000763  00000000  00000000  0000a14e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d7b  00000000  00000000  0000a8b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  0000b62c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bc8  00000000  00000000  0000b8e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000344  00000000  00000000  0000c4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000c7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 00000211  00000000  00000000  0000c8d0  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	20 05 00 20 19 10 00 10 00 00 00 00 99 10 00 10      .. ............
10001010:	00 04 01 00 00 00 00 80                             ........

10001018 <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001018:	4911      	ldr	r1, [pc, #68]	; (10001060 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101a:	4a12      	ldr	r2, [pc, #72]	; (10001064 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
1000101c:	4b12      	ldr	r3, [pc, #72]	; (10001068 <__copy_data+0x16>)
	bl  __copy_data
1000101e:	f000 f818 	bl	10001052 <__copy_data>

    ldr  r0, =SystemInit
10001022:	4812      	ldr	r0, [pc, #72]	; (1000106c <__copy_data+0x1a>)
    blx  r0
10001024:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001026:	4912      	ldr	r1, [pc, #72]	; (10001070 <__copy_data+0x1e>)
	ldr	r2, =__data_start
10001028:	4a12      	ldr	r2, [pc, #72]	; (10001074 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102a:	4b13      	ldr	r3, [pc, #76]	; (10001078 <__copy_data+0x26>)
	bl  __copy_data
1000102c:	f000 f811 	bl	10001052 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001030:	4912      	ldr	r1, [pc, #72]	; (1000107c <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001032:	4a13      	ldr	r2, [pc, #76]	; (10001080 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001034:	4b13      	ldr	r3, [pc, #76]	; (10001084 <__copy_data+0x32>)
	bl  __copy_data
10001036:	f000 f80c 	bl	10001052 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103a:	4913      	ldr	r1, [pc, #76]	; (10001088 <__copy_data+0x36>)
	ldr	r2, =__bss_end
1000103c:	4a13      	ldr	r2, [pc, #76]	; (1000108c <__copy_data+0x3a>)

	movs	r0, 0
1000103e:	2000      	movs	r0, #0

	subs	r2, r1
10001040:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001042:	dd02      	ble.n	1000104a <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001044:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
10001046:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
10001048:	dcfc      	bgt.n	10001044 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104a:	4811      	ldr	r0, [pc, #68]	; (10001090 <__copy_data+0x3e>)
    blx  r0
1000104c:	4780      	blx	r0
#endif

    ldr  r0, =main
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x42>)
    blx  r0
10001050:	4780      	blx	r0

10001052 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001052:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001054:	dd03      	ble.n	1000105e <__copy_data+0xc>

.L_loop:
	subs	r3, #4
10001056:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
10001058:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105a:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
1000105c:	dcfb      	bgt.n	10001056 <__copy_data+0x4>

.L_loop_done:
	bx  lr
1000105e:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001060:	100015c4 	.word	0x100015c4
	ldr	r2, =VeneerStart
10001064:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
10001068:	2000011c 	.word	0x2000011c
	bl  __copy_data

    ldr  r0, =SystemInit
1000106c:	1000109d 	.word	0x1000109d
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001070:	100016d4 	.word	0x100016d4
	ldr	r2, =__data_start
10001074:	20000520 	.word	0x20000520
	ldr	r3, =__data_end
10001078:	20000520 	.word	0x20000520
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
1000107c:	100016d4 	.word	0x100016d4
	ldr	r2, =__ram_code_start
10001080:	20000520 	.word	0x20000520
	ldr	r3, =__ram_code_end
10001084:	20000520 	.word	0x20000520
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
10001088:	20000520 	.word	0x20000520
	ldr	r2, =__bss_end
1000108c:	20000528 	.word	0x20000528
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001090:	10001569 	.word	0x10001569
    blx  r0
#endif

    ldr  r0, =main
10001094:	10001409 	.word	0x10001409

10001098 <CCU40_0_IRQHandler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_handler:
    b  .
10001098:	e7fe      	b.n	10001098 <CCU40_0_IRQHandler>
	...

1000109c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{    
1000109c:	b580      	push	{r7, lr}
1000109e:	af00      	add	r7, sp, #0
  SystemCoreSetup();
100010a0:	f000 f804 	bl	100010ac <SystemCoreSetup>
  SystemCoreClockSetup();
100010a4:	f000 f81c 	bl	100010e0 <SystemCoreClockSetup>
}
100010a8:	46bd      	mov	sp, r7
100010aa:	bd80      	pop	{r7, pc}

100010ac <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
100010ac:	b580      	push	{r7, lr}
100010ae:	af00      	add	r7, sp, #0
#ifndef USE_DYNAMIC_FLASH_WS
  /* Fix flash wait states to 1 cycle (see DS Addendum) */
  NVM->NVMCONF |= NVM_NVMCONF_WS_Msk;
100010b0:	490a      	ldr	r1, [pc, #40]	; (100010dc <SystemCoreSetup+0x30>)
100010b2:	4b0a      	ldr	r3, [pc, #40]	; (100010dc <SystemCoreSetup+0x30>)
100010b4:	891b      	ldrh	r3, [r3, #8]
100010b6:	b29b      	uxth	r3, r3
100010b8:	2280      	movs	r2, #128	; 0x80
100010ba:	0152      	lsls	r2, r2, #5
100010bc:	4313      	orrs	r3, r2
100010be:	b29b      	uxth	r3, r3
100010c0:	810b      	strh	r3, [r1, #8]
  NVM->CONFIG1 |= NVM_CONFIG1_FIXWS_Msk;
100010c2:	4906      	ldr	r1, [pc, #24]	; (100010dc <SystemCoreSetup+0x30>)
100010c4:	4a05      	ldr	r2, [pc, #20]	; (100010dc <SystemCoreSetup+0x30>)
100010c6:	2348      	movs	r3, #72	; 0x48
100010c8:	5ad3      	ldrh	r3, [r2, r3]
100010ca:	b29b      	uxth	r3, r3
100010cc:	2280      	movs	r2, #128	; 0x80
100010ce:	0112      	lsls	r2, r2, #4
100010d0:	4313      	orrs	r3, r2
100010d2:	b29a      	uxth	r2, r3
100010d4:	2348      	movs	r3, #72	; 0x48
100010d6:	52ca      	strh	r2, [r1, r3]
#endif
}
100010d8:	46bd      	mov	sp, r7
100010da:	bd80      	pop	{r7, pc}
100010dc:	40050000 	.word	0x40050000

100010e0 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
100010e0:	b580      	push	{r7, lr}
100010e2:	af00      	add	r7, sp, #0
  /* Override values of CLOCK_VAL1 and CLOCK_VAL2 defined in vector table */
  /* MCLK = 32MHz, PCLK = 64MHz */
  
  SCU_GENERAL->PASSWD = 0x000000C0UL; /* disable bit protection */
100010e4:	4b09      	ldr	r3, [pc, #36]	; (1000110c <SystemCoreClockSetup+0x2c>)
100010e6:	22c0      	movs	r2, #192	; 0xc0
100010e8:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->CLKCR = 0x3FF10100UL;
100010ea:	4b09      	ldr	r3, [pc, #36]	; (10001110 <SystemCoreClockSetup+0x30>)
100010ec:	4a09      	ldr	r2, [pc, #36]	; (10001114 <SystemCoreClockSetup+0x34>)
100010ee:	601a      	str	r2, [r3, #0]
  while((SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk));
100010f0:	46c0      	nop			; (mov r8, r8)
100010f2:	4b07      	ldr	r3, [pc, #28]	; (10001110 <SystemCoreClockSetup+0x30>)
100010f4:	681a      	ldr	r2, [r3, #0]
100010f6:	2380      	movs	r3, #128	; 0x80
100010f8:	05db      	lsls	r3, r3, #23
100010fa:	4013      	ands	r3, r2
100010fc:	d1f9      	bne.n	100010f2 <SystemCoreClockSetup+0x12>
  SCU_GENERAL->PASSWD = 0x000000C3UL; /* enable bit protection */
100010fe:	4b03      	ldr	r3, [pc, #12]	; (1000110c <SystemCoreClockSetup+0x2c>)
10001100:	22c3      	movs	r2, #195	; 0xc3
10001102:	625a      	str	r2, [r3, #36]	; 0x24
  
  SystemCoreClockUpdate();
10001104:	f000 f808 	bl	10001118 <SystemCoreClockUpdate>
}
10001108:	46bd      	mov	sp, r7
1000110a:	bd80      	pop	{r7, pc}
1000110c:	40010000 	.word	0x40010000
10001110:	40010300 	.word	0x40010300
10001114:	3ff10100 	.word	0x3ff10100

10001118 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
10001118:	b580      	push	{r7, lr}
1000111a:	af00      	add	r7, sp, #0
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
1000111c:	4b12      	ldr	r3, [pc, #72]	; (10001168 <SystemCoreClockUpdate+0x50>)
1000111e:	681a      	ldr	r2, [r3, #0]
10001120:	23ff      	movs	r3, #255	; 0xff
10001122:	021b      	lsls	r3, r3, #8
10001124:	4013      	ands	r3, r2
10001126:	0a1a      	lsrs	r2, r3, #8
10001128:	4b10      	ldr	r3, [pc, #64]	; (1000116c <SystemCoreClockUpdate+0x54>)
1000112a:	601a      	str	r2, [r3, #0]
  FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
1000112c:	4b0e      	ldr	r3, [pc, #56]	; (10001168 <SystemCoreClockUpdate+0x50>)
1000112e:	681b      	ldr	r3, [r3, #0]
10001130:	22ff      	movs	r2, #255	; 0xff
10001132:	401a      	ands	r2, r3
10001134:	4b0e      	ldr	r3, [pc, #56]	; (10001170 <SystemCoreClockUpdate+0x58>)
10001136:	601a      	str	r2, [r3, #0]
  
  if (IDIV != 0)
10001138:	4b0c      	ldr	r3, [pc, #48]	; (1000116c <SystemCoreClockUpdate+0x54>)
1000113a:	681b      	ldr	r3, [r3, #0]
1000113c:	2b00      	cmp	r3, #0
1000113e:	d00e      	beq.n	1000115e <SystemCoreClockUpdate+0x46>
  {
    /* Fractional divider is enabled and used */
    SystemCoreClock = ((DCO1_FREQUENCY << 6U) / ((IDIV << 8) + FDIV)) << 1U;
10001140:	4b0a      	ldr	r3, [pc, #40]	; (1000116c <SystemCoreClockUpdate+0x54>)
10001142:	681b      	ldr	r3, [r3, #0]
10001144:	021a      	lsls	r2, r3, #8
10001146:	4b0a      	ldr	r3, [pc, #40]	; (10001170 <SystemCoreClockUpdate+0x58>)
10001148:	681b      	ldr	r3, [r3, #0]
1000114a:	18d3      	adds	r3, r2, r3
1000114c:	4809      	ldr	r0, [pc, #36]	; (10001174 <SystemCoreClockUpdate+0x5c>)
1000114e:	1c19      	adds	r1, r3, #0
10001150:	f000 f978 	bl	10001444 <__aeabi_uidiv>
10001154:	1c03      	adds	r3, r0, #0
10001156:	005a      	lsls	r2, r3, #1
10001158:	4b07      	ldr	r3, [pc, #28]	; (10001178 <SystemCoreClockUpdate+0x60>)
1000115a:	601a      	str	r2, [r3, #0]
1000115c:	e002      	b.n	10001164 <SystemCoreClockUpdate+0x4c>
  }
  else
  {
    /* Fractional divider bypassed. Simply divide DCO_DCLK by 2 */
    SystemCoreClock = DCO1_FREQUENCY >> 1U;
1000115e:	4b06      	ldr	r3, [pc, #24]	; (10001178 <SystemCoreClockUpdate+0x60>)
10001160:	4a06      	ldr	r2, [pc, #24]	; (1000117c <SystemCoreClockUpdate+0x64>)
10001162:	601a      	str	r2, [r3, #0]
  }
}
10001164:	46bd      	mov	sp, r7
10001166:	bd80      	pop	{r7, pc}
10001168:	40010300 	.word	0x40010300
1000116c:	20000520 	.word	0x20000520
10001170:	20000524 	.word	0x20000524
10001174:	f4240000 	.word	0xf4240000
10001178:	20003ffc 	.word	0x20003ffc
1000117c:	01e84800 	.word	0x01e84800

10001180 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
10001180:	b590      	push	{r4, r7, lr}
10001182:	b085      	sub	sp, #20
10001184:	af00      	add	r7, sp, #0
10001186:	60f8      	str	r0, [r7, #12]
10001188:	607a      	str	r2, [r7, #4]
1000118a:	230b      	movs	r3, #11
1000118c:	18fb      	adds	r3, r7, r3
1000118e:	1c0a      	adds	r2, r1, #0
10001190:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
10001192:	230b      	movs	r3, #11
10001194:	18fb      	adds	r3, r7, r3
10001196:	781b      	ldrb	r3, [r3, #0]
10001198:	089b      	lsrs	r3, r3, #2
1000119a:	b2db      	uxtb	r3, r3
1000119c:	1c18      	adds	r0, r3, #0
1000119e:	230b      	movs	r3, #11
100011a0:	18fb      	adds	r3, r7, r3
100011a2:	781b      	ldrb	r3, [r3, #0]
100011a4:	089b      	lsrs	r3, r3, #2
100011a6:	b2db      	uxtb	r3, r3
100011a8:	1c1a      	adds	r2, r3, #0
100011aa:	68fb      	ldr	r3, [r7, #12]
100011ac:	3204      	adds	r2, #4
100011ae:	0092      	lsls	r2, r2, #2
100011b0:	58d3      	ldr	r3, [r2, r3]
100011b2:	220b      	movs	r2, #11
100011b4:	18ba      	adds	r2, r7, r2
100011b6:	7812      	ldrb	r2, [r2, #0]
100011b8:	2103      	movs	r1, #3
100011ba:	400a      	ands	r2, r1
100011bc:	00d2      	lsls	r2, r2, #3
100011be:	1c11      	adds	r1, r2, #0
100011c0:	22f8      	movs	r2, #248	; 0xf8
100011c2:	408a      	lsls	r2, r1
100011c4:	43d2      	mvns	r2, r2
100011c6:	401a      	ands	r2, r3
100011c8:	1c11      	adds	r1, r2, #0
100011ca:	68fb      	ldr	r3, [r7, #12]
100011cc:	1d02      	adds	r2, r0, #4
100011ce:	0092      	lsls	r2, r2, #2
100011d0:	50d1      	str	r1, [r2, r3]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
100011d2:	68fb      	ldr	r3, [r7, #12]
100011d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100011d6:	220b      	movs	r2, #11
100011d8:	18ba      	adds	r2, r7, r2
100011da:	7812      	ldrb	r2, [r2, #0]
100011dc:	0052      	lsls	r2, r2, #1
100011de:	1c11      	adds	r1, r2, #0
100011e0:	2203      	movs	r2, #3
100011e2:	408a      	lsls	r2, r1
100011e4:	43d2      	mvns	r2, r2
100011e6:	401a      	ands	r2, r3
100011e8:	68fb      	ldr	r3, [r7, #12]
100011ea:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
100011ec:	230b      	movs	r3, #11
100011ee:	18fb      	adds	r3, r7, r3
100011f0:	781b      	ldrb	r3, [r3, #0]
100011f2:	08db      	lsrs	r3, r3, #3
100011f4:	b2db      	uxtb	r3, r3
100011f6:	1c18      	adds	r0, r3, #0
100011f8:	230b      	movs	r3, #11
100011fa:	18fb      	adds	r3, r7, r3
100011fc:	781b      	ldrb	r3, [r3, #0]
100011fe:	08db      	lsrs	r3, r3, #3
10001200:	b2db      	uxtb	r3, r3
10001202:	1c1a      	adds	r2, r3, #0
10001204:	68fb      	ldr	r3, [r7, #12]
10001206:	3210      	adds	r2, #16
10001208:	0092      	lsls	r2, r2, #2
1000120a:	58d3      	ldr	r3, [r2, r3]
1000120c:	220b      	movs	r2, #11
1000120e:	18ba      	adds	r2, r7, r2
10001210:	7812      	ldrb	r2, [r2, #0]
10001212:	2107      	movs	r1, #7
10001214:	400a      	ands	r2, r1
10001216:	0092      	lsls	r2, r2, #2
10001218:	1c11      	adds	r1, r2, #0
1000121a:	2204      	movs	r2, #4
1000121c:	408a      	lsls	r2, r1
1000121e:	43d2      	mvns	r2, r2
10001220:	401a      	ands	r2, r3
10001222:	1c11      	adds	r1, r2, #0
10001224:	68fb      	ldr	r3, [r7, #12]
10001226:	1c02      	adds	r2, r0, #0
10001228:	3210      	adds	r2, #16
1000122a:	0092      	lsls	r2, r2, #2
1000122c:	50d1      	str	r1, [r2, r3]
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
1000122e:	230b      	movs	r3, #11
10001230:	18fb      	adds	r3, r7, r3
10001232:	781b      	ldrb	r3, [r3, #0]
10001234:	08db      	lsrs	r3, r3, #3
10001236:	b2db      	uxtb	r3, r3
10001238:	1c18      	adds	r0, r3, #0
1000123a:	230b      	movs	r3, #11
1000123c:	18fb      	adds	r3, r7, r3
1000123e:	781b      	ldrb	r3, [r3, #0]
10001240:	08db      	lsrs	r3, r3, #3
10001242:	b2db      	uxtb	r3, r3
10001244:	1c1a      	adds	r2, r3, #0
10001246:	68fb      	ldr	r3, [r7, #12]
10001248:	3210      	adds	r2, #16
1000124a:	0092      	lsls	r2, r2, #2
1000124c:	58d2      	ldr	r2, [r2, r3]
1000124e:	687b      	ldr	r3, [r7, #4]
10001250:	785b      	ldrb	r3, [r3, #1]
10001252:	1c1c      	adds	r4, r3, #0
10001254:	230b      	movs	r3, #11
10001256:	18fb      	adds	r3, r7, r3
10001258:	781b      	ldrb	r3, [r3, #0]
1000125a:	2107      	movs	r1, #7
1000125c:	400b      	ands	r3, r1
1000125e:	009b      	lsls	r3, r3, #2
10001260:	409c      	lsls	r4, r3
10001262:	1c23      	adds	r3, r4, #0
10001264:	431a      	orrs	r2, r3
10001266:	1c11      	adds	r1, r2, #0
10001268:	68fb      	ldr	r3, [r7, #12]
1000126a:	1c02      	adds	r2, r0, #0
1000126c:	3210      	adds	r2, #16
1000126e:	0092      	lsls	r2, r2, #2
10001270:	50d1      	str	r1, [r2, r3]
    
  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
10001272:	68fb      	ldr	r3, [r7, #12]
10001274:	4a20      	ldr	r2, [pc, #128]	; (100012f8 <XMC_GPIO_Init+0x178>)
10001276:	4293      	cmp	r3, r2
10001278:	d10c      	bne.n	10001294 <XMC_GPIO_Init+0x114>
  {    
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
1000127a:	68fb      	ldr	r3, [r7, #12]
1000127c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
1000127e:	220b      	movs	r2, #11
10001280:	18ba      	adds	r2, r7, r2
10001282:	7812      	ldrb	r2, [r2, #0]
10001284:	2101      	movs	r1, #1
10001286:	4091      	lsls	r1, r2
10001288:	1c0a      	adds	r2, r1, #0
1000128a:	43d2      	mvns	r2, r2
1000128c:	401a      	ands	r2, r3
1000128e:	68fb      	ldr	r3, [r7, #12]
10001290:	661a      	str	r2, [r3, #96]	; 0x60
10001292:	e00d      	b.n	100012b0 <XMC_GPIO_Init+0x130>
  }
  else 
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
10001294:	687b      	ldr	r3, [r7, #4]
10001296:	781b      	ldrb	r3, [r3, #0]
10001298:	b2db      	uxtb	r3, r3
1000129a:	b25b      	sxtb	r3, r3
1000129c:	2b00      	cmp	r3, #0
1000129e:	da07      	bge.n	100012b0 <XMC_GPIO_Init+0x130>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
100012a0:	687b      	ldr	r3, [r7, #4]
100012a2:	685a      	ldr	r2, [r3, #4]
100012a4:	230b      	movs	r3, #11
100012a6:	18fb      	adds	r3, r7, r3
100012a8:	781b      	ldrb	r3, [r3, #0]
100012aa:	409a      	lsls	r2, r3
100012ac:	68fb      	ldr	r3, [r7, #12]
100012ae:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
100012b0:	230b      	movs	r3, #11
100012b2:	18fb      	adds	r3, r7, r3
100012b4:	781b      	ldrb	r3, [r3, #0]
100012b6:	089b      	lsrs	r3, r3, #2
100012b8:	b2db      	uxtb	r3, r3
100012ba:	1c18      	adds	r0, r3, #0
100012bc:	230b      	movs	r3, #11
100012be:	18fb      	adds	r3, r7, r3
100012c0:	781b      	ldrb	r3, [r3, #0]
100012c2:	089b      	lsrs	r3, r3, #2
100012c4:	b2db      	uxtb	r3, r3
100012c6:	1c1a      	adds	r2, r3, #0
100012c8:	68fb      	ldr	r3, [r7, #12]
100012ca:	3204      	adds	r2, #4
100012cc:	0092      	lsls	r2, r2, #2
100012ce:	58d2      	ldr	r2, [r2, r3]
100012d0:	687b      	ldr	r3, [r7, #4]
100012d2:	781b      	ldrb	r3, [r3, #0]
100012d4:	1c1c      	adds	r4, r3, #0
100012d6:	230b      	movs	r3, #11
100012d8:	18fb      	adds	r3, r7, r3
100012da:	781b      	ldrb	r3, [r3, #0]
100012dc:	2103      	movs	r1, #3
100012de:	400b      	ands	r3, r1
100012e0:	00db      	lsls	r3, r3, #3
100012e2:	409c      	lsls	r4, r3
100012e4:	1c23      	adds	r3, r4, #0
100012e6:	431a      	orrs	r2, r3
100012e8:	1c11      	adds	r1, r2, #0
100012ea:	68fb      	ldr	r3, [r7, #12]
100012ec:	1d02      	adds	r2, r0, #4
100012ee:	0092      	lsls	r2, r2, #2
100012f0:	50d1      	str	r1, [r2, r3]
}
100012f2:	46bd      	mov	sp, r7
100012f4:	b005      	add	sp, #20
100012f6:	bd90      	pop	{r4, r7, pc}
100012f8:	40040200 	.word	0x40040200

100012fc <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
100012fc:	b580      	push	{r7, lr}
100012fe:	b082      	sub	sp, #8
10001300:	af00      	add	r7, sp, #0
10001302:	6078      	str	r0, [r7, #4]
10001304:	1c08      	adds	r0, r1, #0
10001306:	1c11      	adds	r1, r2, #0
10001308:	1cfb      	adds	r3, r7, #3
1000130a:	1c02      	adds	r2, r0, #0
1000130c:	701a      	strb	r2, [r3, #0]
1000130e:	1cbb      	adds	r3, r7, #2
10001310:	1c0a      	adds	r2, r1, #0
10001312:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10001314:	687b      	ldr	r3, [r7, #4]
10001316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10001318:	1cfa      	adds	r2, r7, #3
1000131a:	7812      	ldrb	r2, [r2, #0]
1000131c:	0052      	lsls	r2, r2, #1
1000131e:	1c11      	adds	r1, r2, #0
10001320:	2203      	movs	r2, #3
10001322:	408a      	lsls	r2, r1
10001324:	43d2      	mvns	r2, r2
10001326:	401a      	ands	r2, r3
10001328:	687b      	ldr	r3, [r7, #4]
1000132a:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
1000132c:	687b      	ldr	r3, [r7, #4]
1000132e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
10001330:	1cbb      	adds	r3, r7, #2
10001332:	781b      	ldrb	r3, [r3, #0]
10001334:	1cf9      	adds	r1, r7, #3
10001336:	7809      	ldrb	r1, [r1, #0]
10001338:	0049      	lsls	r1, r1, #1
1000133a:	408b      	lsls	r3, r1
1000133c:	431a      	orrs	r2, r3
1000133e:	687b      	ldr	r3, [r7, #4]
10001340:	675a      	str	r2, [r3, #116]	; 0x74
}
10001342:	46bd      	mov	sp, r7
10001344:	b002      	add	sp, #8
10001346:	bd80      	pop	{r7, pc}

10001348 <_init>:
  }
}

/* Init */
void _init(void)
{}
10001348:	b580      	push	{r7, lr}
1000134a:	af00      	add	r7, sp, #0
1000134c:	46bd      	mov	sp, r7
1000134e:	bd80      	pop	{r7, pc}

10001350 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
10001350:	b580      	push	{r7, lr}
10001352:	b082      	sub	sp, #8
10001354:	af00      	add	r7, sp, #0
10001356:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
10001358:	687b      	ldr	r3, [r7, #4]
1000135a:	6819      	ldr	r1, [r3, #0]
1000135c:	687b      	ldr	r3, [r7, #4]
1000135e:	7b1a      	ldrb	r2, [r3, #12]
10001360:	687b      	ldr	r3, [r7, #4]
10001362:	3304      	adds	r3, #4
10001364:	1c08      	adds	r0, r1, #0
10001366:	1c11      	adds	r1, r2, #0
10001368:	1c1a      	adds	r2, r3, #0
1000136a:	f7ff ff09 	bl	10001180 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
1000136e:	687b      	ldr	r3, [r7, #4]
10001370:	6819      	ldr	r1, [r3, #0]
10001372:	687b      	ldr	r3, [r7, #4]
10001374:	7b1a      	ldrb	r2, [r3, #12]
10001376:	687b      	ldr	r3, [r7, #4]
10001378:	7b5b      	ldrb	r3, [r3, #13]
1000137a:	1c08      	adds	r0, r1, #0
1000137c:	1c11      	adds	r1, r2, #0
1000137e:	1c1a      	adds	r2, r3, #0
10001380:	f7ff ffbc 	bl	100012fc <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
10001384:	2300      	movs	r3, #0
}
10001386:	1c18      	adds	r0, r3, #0
10001388:	46bd      	mov	sp, r7
1000138a:	b002      	add	sp, #8
1000138c:	bd80      	pop	{r7, pc}
1000138e:	46c0      	nop			; (mov r8, r8)

10001390 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
10001390:	b590      	push	{r4, r7, lr}
10001392:	b083      	sub	sp, #12
10001394:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
10001396:	1dfb      	adds	r3, r7, #7
10001398:	2200      	movs	r2, #0
1000139a:	701a      	strb	r2, [r3, #0]
  if (init_status == DAVE_STATUS_SUCCESS)
1000139c:	1dfb      	adds	r3, r7, #7
1000139e:	781b      	ldrb	r3, [r3, #0]
100013a0:	2b00      	cmp	r3, #0
100013a2:	d106      	bne.n	100013b2 <DAVE_Init+0x22>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED1); 
100013a4:	1dfc      	adds	r4, r7, #7
100013a6:	4b06      	ldr	r3, [pc, #24]	; (100013c0 <DAVE_Init+0x30>)
100013a8:	1c18      	adds	r0, r3, #0
100013aa:	f7ff ffd1 	bl	10001350 <DIGITAL_IO_Init>
100013ae:	1c03      	adds	r3, r0, #0
100013b0:	7023      	strb	r3, [r4, #0]
   }  
  return init_status;
100013b2:	1dfb      	adds	r3, r7, #7
100013b4:	781b      	ldrb	r3, [r3, #0]
} /**  End of function DAVE_Init */
100013b6:	1c18      	adds	r0, r3, #0
100013b8:	46bd      	mov	sp, r7
100013ba:	b003      	add	sp, #12
100013bc:	bd90      	pop	{r4, r7, pc}
100013be:	46c0      	nop			; (mov r8, r8)
100013c0:	100015b4 	.word	0x100015b4

100013c4 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
100013c4:	b580      	push	{r7, lr}
100013c6:	b082      	sub	sp, #8
100013c8:	af00      	add	r7, sp, #0
100013ca:	6078      	str	r0, [r7, #4]
100013cc:	1c0a      	adds	r2, r1, #0
100013ce:	1cfb      	adds	r3, r7, #3
100013d0:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
100013d2:	1cfb      	adds	r3, r7, #3
100013d4:	781b      	ldrb	r3, [r3, #0]
100013d6:	4a03      	ldr	r2, [pc, #12]	; (100013e4 <XMC_GPIO_ToggleOutput+0x20>)
100013d8:	409a      	lsls	r2, r3
100013da:	687b      	ldr	r3, [r7, #4]
100013dc:	605a      	str	r2, [r3, #4]
}
100013de:	46bd      	mov	sp, r7
100013e0:	b002      	add	sp, #8
100013e2:	bd80      	pop	{r7, pc}
100013e4:	00010001 	.word	0x00010001

100013e8 <DIGITAL_IO_ToggleOutput>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
100013e8:	b580      	push	{r7, lr}
100013ea:	b082      	sub	sp, #8
100013ec:	af00      	add	r7, sp, #0
100013ee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
100013f0:	687b      	ldr	r3, [r7, #4]
100013f2:	681a      	ldr	r2, [r3, #0]
100013f4:	687b      	ldr	r3, [r7, #4]
100013f6:	7b1b      	ldrb	r3, [r3, #12]
100013f8:	1c10      	adds	r0, r2, #0
100013fa:	1c19      	adds	r1, r3, #0
100013fc:	f7ff ffe2 	bl	100013c4 <XMC_GPIO_ToggleOutput>
}
10001400:	46bd      	mov	sp, r7
10001402:	b002      	add	sp, #8
10001404:	bd80      	pop	{r7, pc}
10001406:	46c0      	nop			; (mov r8, r8)

10001408 <main>:
 * invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder for user application
 * code.
 */

int main(void)
{
10001408:	b590      	push	{r4, r7, lr}
1000140a:	b083      	sub	sp, #12
1000140c:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
1000140e:	1cfc      	adds	r4, r7, #3
10001410:	f7ff ffbe 	bl	10001390 <DAVE_Init>
10001414:	1c03      	adds	r3, r0, #0
10001416:	7023      	strb	r3, [r4, #0]

  if(status != DAVE_STATUS_SUCCESS)
10001418:	1cfb      	adds	r3, r7, #3
1000141a:	781b      	ldrb	r3, [r3, #0]
1000141c:	2b00      	cmp	r3, #0
1000141e:	d000      	beq.n	10001422 <main+0x1a>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
10001420:	e7fe      	b.n	10001420 <main+0x18>
  }

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
    DIGITAL_IO_ToggleOutput(&LED1);
10001422:	4b07      	ldr	r3, [pc, #28]	; (10001440 <main+0x38>)
10001424:	1c18      	adds	r0, r3, #0
10001426:	f7ff ffdf 	bl	100013e8 <DIGITAL_IO_ToggleOutput>
    for (long i = 128000; i > 0; i--);
1000142a:	23fa      	movs	r3, #250	; 0xfa
1000142c:	025b      	lsls	r3, r3, #9
1000142e:	607b      	str	r3, [r7, #4]
10001430:	e002      	b.n	10001438 <main+0x30>
10001432:	687b      	ldr	r3, [r7, #4]
10001434:	3b01      	subs	r3, #1
10001436:	607b      	str	r3, [r7, #4]
10001438:	687b      	ldr	r3, [r7, #4]
1000143a:	2b00      	cmp	r3, #0
1000143c:	dcf9      	bgt.n	10001432 <main+0x2a>
  }
1000143e:	e7f0      	b.n	10001422 <main+0x1a>
10001440:	100015b4 	.word	0x100015b4

10001444 <__aeabi_uidiv>:
10001444:	2200      	movs	r2, #0
10001446:	0843      	lsrs	r3, r0, #1
10001448:	428b      	cmp	r3, r1
1000144a:	d374      	bcc.n	10001536 <__aeabi_uidiv+0xf2>
1000144c:	0903      	lsrs	r3, r0, #4
1000144e:	428b      	cmp	r3, r1
10001450:	d35f      	bcc.n	10001512 <__aeabi_uidiv+0xce>
10001452:	0a03      	lsrs	r3, r0, #8
10001454:	428b      	cmp	r3, r1
10001456:	d344      	bcc.n	100014e2 <__aeabi_uidiv+0x9e>
10001458:	0b03      	lsrs	r3, r0, #12
1000145a:	428b      	cmp	r3, r1
1000145c:	d328      	bcc.n	100014b0 <__aeabi_uidiv+0x6c>
1000145e:	0c03      	lsrs	r3, r0, #16
10001460:	428b      	cmp	r3, r1
10001462:	d30d      	bcc.n	10001480 <__aeabi_uidiv+0x3c>
10001464:	22ff      	movs	r2, #255	; 0xff
10001466:	0209      	lsls	r1, r1, #8
10001468:	ba12      	rev	r2, r2
1000146a:	0c03      	lsrs	r3, r0, #16
1000146c:	428b      	cmp	r3, r1
1000146e:	d302      	bcc.n	10001476 <__aeabi_uidiv+0x32>
10001470:	1212      	asrs	r2, r2, #8
10001472:	0209      	lsls	r1, r1, #8
10001474:	d065      	beq.n	10001542 <__aeabi_uidiv+0xfe>
10001476:	0b03      	lsrs	r3, r0, #12
10001478:	428b      	cmp	r3, r1
1000147a:	d319      	bcc.n	100014b0 <__aeabi_uidiv+0x6c>
1000147c:	e000      	b.n	10001480 <__aeabi_uidiv+0x3c>
1000147e:	0a09      	lsrs	r1, r1, #8
10001480:	0bc3      	lsrs	r3, r0, #15
10001482:	428b      	cmp	r3, r1
10001484:	d301      	bcc.n	1000148a <__aeabi_uidiv+0x46>
10001486:	03cb      	lsls	r3, r1, #15
10001488:	1ac0      	subs	r0, r0, r3
1000148a:	4152      	adcs	r2, r2
1000148c:	0b83      	lsrs	r3, r0, #14
1000148e:	428b      	cmp	r3, r1
10001490:	d301      	bcc.n	10001496 <__aeabi_uidiv+0x52>
10001492:	038b      	lsls	r3, r1, #14
10001494:	1ac0      	subs	r0, r0, r3
10001496:	4152      	adcs	r2, r2
10001498:	0b43      	lsrs	r3, r0, #13
1000149a:	428b      	cmp	r3, r1
1000149c:	d301      	bcc.n	100014a2 <__aeabi_uidiv+0x5e>
1000149e:	034b      	lsls	r3, r1, #13
100014a0:	1ac0      	subs	r0, r0, r3
100014a2:	4152      	adcs	r2, r2
100014a4:	0b03      	lsrs	r3, r0, #12
100014a6:	428b      	cmp	r3, r1
100014a8:	d301      	bcc.n	100014ae <__aeabi_uidiv+0x6a>
100014aa:	030b      	lsls	r3, r1, #12
100014ac:	1ac0      	subs	r0, r0, r3
100014ae:	4152      	adcs	r2, r2
100014b0:	0ac3      	lsrs	r3, r0, #11
100014b2:	428b      	cmp	r3, r1
100014b4:	d301      	bcc.n	100014ba <__aeabi_uidiv+0x76>
100014b6:	02cb      	lsls	r3, r1, #11
100014b8:	1ac0      	subs	r0, r0, r3
100014ba:	4152      	adcs	r2, r2
100014bc:	0a83      	lsrs	r3, r0, #10
100014be:	428b      	cmp	r3, r1
100014c0:	d301      	bcc.n	100014c6 <__aeabi_uidiv+0x82>
100014c2:	028b      	lsls	r3, r1, #10
100014c4:	1ac0      	subs	r0, r0, r3
100014c6:	4152      	adcs	r2, r2
100014c8:	0a43      	lsrs	r3, r0, #9
100014ca:	428b      	cmp	r3, r1
100014cc:	d301      	bcc.n	100014d2 <__aeabi_uidiv+0x8e>
100014ce:	024b      	lsls	r3, r1, #9
100014d0:	1ac0      	subs	r0, r0, r3
100014d2:	4152      	adcs	r2, r2
100014d4:	0a03      	lsrs	r3, r0, #8
100014d6:	428b      	cmp	r3, r1
100014d8:	d301      	bcc.n	100014de <__aeabi_uidiv+0x9a>
100014da:	020b      	lsls	r3, r1, #8
100014dc:	1ac0      	subs	r0, r0, r3
100014de:	4152      	adcs	r2, r2
100014e0:	d2cd      	bcs.n	1000147e <__aeabi_uidiv+0x3a>
100014e2:	09c3      	lsrs	r3, r0, #7
100014e4:	428b      	cmp	r3, r1
100014e6:	d301      	bcc.n	100014ec <__aeabi_uidiv+0xa8>
100014e8:	01cb      	lsls	r3, r1, #7
100014ea:	1ac0      	subs	r0, r0, r3
100014ec:	4152      	adcs	r2, r2
100014ee:	0983      	lsrs	r3, r0, #6
100014f0:	428b      	cmp	r3, r1
100014f2:	d301      	bcc.n	100014f8 <__aeabi_uidiv+0xb4>
100014f4:	018b      	lsls	r3, r1, #6
100014f6:	1ac0      	subs	r0, r0, r3
100014f8:	4152      	adcs	r2, r2
100014fa:	0943      	lsrs	r3, r0, #5
100014fc:	428b      	cmp	r3, r1
100014fe:	d301      	bcc.n	10001504 <__aeabi_uidiv+0xc0>
10001500:	014b      	lsls	r3, r1, #5
10001502:	1ac0      	subs	r0, r0, r3
10001504:	4152      	adcs	r2, r2
10001506:	0903      	lsrs	r3, r0, #4
10001508:	428b      	cmp	r3, r1
1000150a:	d301      	bcc.n	10001510 <__aeabi_uidiv+0xcc>
1000150c:	010b      	lsls	r3, r1, #4
1000150e:	1ac0      	subs	r0, r0, r3
10001510:	4152      	adcs	r2, r2
10001512:	08c3      	lsrs	r3, r0, #3
10001514:	428b      	cmp	r3, r1
10001516:	d301      	bcc.n	1000151c <__aeabi_uidiv+0xd8>
10001518:	00cb      	lsls	r3, r1, #3
1000151a:	1ac0      	subs	r0, r0, r3
1000151c:	4152      	adcs	r2, r2
1000151e:	0883      	lsrs	r3, r0, #2
10001520:	428b      	cmp	r3, r1
10001522:	d301      	bcc.n	10001528 <__aeabi_uidiv+0xe4>
10001524:	008b      	lsls	r3, r1, #2
10001526:	1ac0      	subs	r0, r0, r3
10001528:	4152      	adcs	r2, r2
1000152a:	0843      	lsrs	r3, r0, #1
1000152c:	428b      	cmp	r3, r1
1000152e:	d301      	bcc.n	10001534 <__aeabi_uidiv+0xf0>
10001530:	004b      	lsls	r3, r1, #1
10001532:	1ac0      	subs	r0, r0, r3
10001534:	4152      	adcs	r2, r2
10001536:	1a41      	subs	r1, r0, r1
10001538:	d200      	bcs.n	1000153c <__aeabi_uidiv+0xf8>
1000153a:	4601      	mov	r1, r0
1000153c:	4152      	adcs	r2, r2
1000153e:	4610      	mov	r0, r2
10001540:	4770      	bx	lr
10001542:	e7ff      	b.n	10001544 <__aeabi_uidiv+0x100>
10001544:	b501      	push	{r0, lr}
10001546:	2000      	movs	r0, #0
10001548:	f000 f80c 	bl	10001564 <__aeabi_idiv0>
1000154c:	bd02      	pop	{r1, pc}
1000154e:	46c0      	nop			; (mov r8, r8)

10001550 <__aeabi_uidivmod>:
10001550:	2900      	cmp	r1, #0
10001552:	d0f7      	beq.n	10001544 <__aeabi_uidiv+0x100>
10001554:	b503      	push	{r0, r1, lr}
10001556:	f7ff ff75 	bl	10001444 <__aeabi_uidiv>
1000155a:	bc0e      	pop	{r1, r2, r3}
1000155c:	4342      	muls	r2, r0
1000155e:	1a89      	subs	r1, r1, r2
10001560:	4718      	bx	r3
10001562:	46c0      	nop			; (mov r8, r8)

10001564 <__aeabi_idiv0>:
10001564:	4770      	bx	lr
10001566:	46c0      	nop			; (mov r8, r8)

10001568 <__libc_init_array>:
10001568:	4b0e      	ldr	r3, [pc, #56]	; (100015a4 <__libc_init_array+0x3c>)
1000156a:	b570      	push	{r4, r5, r6, lr}
1000156c:	2500      	movs	r5, #0
1000156e:	1c1e      	adds	r6, r3, #0
10001570:	4c0d      	ldr	r4, [pc, #52]	; (100015a8 <__libc_init_array+0x40>)
10001572:	1ae4      	subs	r4, r4, r3
10001574:	10a4      	asrs	r4, r4, #2
10001576:	42a5      	cmp	r5, r4
10001578:	d004      	beq.n	10001584 <__libc_init_array+0x1c>
1000157a:	00ab      	lsls	r3, r5, #2
1000157c:	58f3      	ldr	r3, [r6, r3]
1000157e:	4798      	blx	r3
10001580:	3501      	adds	r5, #1
10001582:	e7f8      	b.n	10001576 <__libc_init_array+0xe>
10001584:	f7ff fee0 	bl	10001348 <_init>
10001588:	4b08      	ldr	r3, [pc, #32]	; (100015ac <__libc_init_array+0x44>)
1000158a:	2500      	movs	r5, #0
1000158c:	1c1e      	adds	r6, r3, #0
1000158e:	4c08      	ldr	r4, [pc, #32]	; (100015b0 <__libc_init_array+0x48>)
10001590:	1ae4      	subs	r4, r4, r3
10001592:	10a4      	asrs	r4, r4, #2
10001594:	42a5      	cmp	r5, r4
10001596:	d004      	beq.n	100015a2 <__libc_init_array+0x3a>
10001598:	00ab      	lsls	r3, r5, #2
1000159a:	58f3      	ldr	r3, [r6, r3]
1000159c:	4798      	blx	r3
1000159e:	3501      	adds	r5, #1
100015a0:	e7f8      	b.n	10001594 <__libc_init_array+0x2c>
100015a2:	bd70      	pop	{r4, r5, r6, pc}
100015a4:	20000520 	.word	0x20000520
100015a8:	20000520 	.word	0x20000520
100015ac:	20000520 	.word	0x20000520
100015b0:	20000520 	.word	0x20000520

100015b4 <LED1>:
100015b4:	40040100 00000080 00010000 00000000     ...@............

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:
    
    .align 1
    
    .globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <CCU40_3_Veneer+0x20>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    
/* ======================================================================== */
    .globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <CCU40_3_Veneer+0x24>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <CCU40_3_Veneer+0x28>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
    .globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <CCU40_3_Veneer+0x2c>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
    .globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <CCU40_3_Veneer+0x30>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
    .globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <CCU40_3_Veneer+0x34>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
    .globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <CCU40_3_Veneer+0x38>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
    .globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <CCU40_3_Veneer+0x3c>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
    .globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <CCU40_3_Veneer+0x40>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
    .globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <CCU40_3_Veneer+0x44>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
    .globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <CCU40_3_Veneer+0x48>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0
	...

20000064 <USIC0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4821      	ldr	r0, [pc, #132]	; (200000ec <CCU40_3_Veneer+0x4c>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
    .globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4821      	ldr	r0, [pc, #132]	; (200000f0 <CCU40_3_Veneer+0x50>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
    .globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4821      	ldr	r0, [pc, #132]	; (200000f4 <CCU40_3_Veneer+0x54>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
    .globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4821      	ldr	r0, [pc, #132]	; (200000f8 <CCU40_3_Veneer+0x58>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
    .globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4821      	ldr	r0, [pc, #132]	; (200000fc <CCU40_3_Veneer+0x5c>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
    .globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4821      	ldr	r0, [pc, #132]	; (20000100 <CCU40_3_Veneer+0x60>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
    .globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4821      	ldr	r0, [pc, #132]	; (20000104 <CCU40_3_Veneer+0x64>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
    .globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4821      	ldr	r0, [pc, #132]	; (20000108 <CCU40_3_Veneer+0x68>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0
	...

20000094 <CCU40_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	481d      	ldr	r0, [pc, #116]	; (2000010c <CCU40_3_Veneer+0x6c>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
    .globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	481d      	ldr	r0, [pc, #116]	; (20000110 <CCU40_3_Veneer+0x70>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
    .globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	481d      	ldr	r0, [pc, #116]	; (20000114 <CCU40_3_Veneer+0x74>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
    .globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	481d      	ldr	r0, [pc, #116]	; (20000118 <CCU40_3_Veneer+0x78>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0
	...
    
    .align 1
    
    .globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	10001099 	.word	0x10001099
    .long 0
    
/* ======================================================================== */
    .globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000ec:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000f8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
200000fc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000100:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000104:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000108:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
2000010c:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000110:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000114:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
20000118:	10001099 	.word	0x10001099
