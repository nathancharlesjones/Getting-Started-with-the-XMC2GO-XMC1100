   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,1
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_i2s.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_I2S_CH_SetBaudrate,"ax",%progbits
  20              	 .align 2
  21              	 .global XMC_I2S_CH_SetBaudrate
  22              	 .thumb
  23              	 .thumb_func
  25              	XMC_I2S_CH_SetBaudrate:
  26              	.LFB259:
  27              	 .file 1 "C:/Files/Projects/Git/XMCLib/src/xmc_i2s.c"
   1:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** /**
   2:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * @file xmc_i2s.c
   3:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * @date 2019-05-07
   4:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *
   5:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * @cond
   6:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  **************************************************************************************************
   7:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * XMClib v2.1.24 - XMC Peripheral Driver Library
   8:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *
   9:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * All rights reserved.
  11:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *
  12:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * following conditions are met:
  14:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *
  15:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * disclaimer.
  17:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *
  18:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.
  20:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *
  21:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * products derived from this software without specific prior written permission.
  23:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *
  24:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  31:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *
  32:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * Infineon Technologies AG dave@infineon.com).
  34:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  **************************************************************************************************
  35:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *
  36:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * Change History
  37:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * --------------
  38:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *
  39:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * 2015-08-21:
  40:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *     - Initial <br>
  41:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *
  42:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * 2015-09-01:
  43:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *     - Modified XMC_I2S_CH_EnableEvent() and XMC_I2S_CH_DisableEvent() for supporting multiple ev
  44:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *
  45:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * 2015-09-14:
  46:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *     - Modified XMC_I2S_CH_SetSystemWordLength for supporting up to 63 system word length.
  47:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *     - Removed parity configuration<br>
  48:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *
  49:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * 2015-09-28:
  50:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *     - Fixed bugs in the XMC_I2S_CH_Init() and in the ASSERTs <br>
  51:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *
  52:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * 2015-11-04: 
  53:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *     - Modified the check of XMC_USIC_CH_GetTransmitBufferStatus() in the XMC_I2S_CH_Transmit() A
  54:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *
  55:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * 2016-06-30:
  56:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *     - Modified XMC_I2S_CH_Init:
  57:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *       + change default passive level to 0
  58:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *       + Call XMC_I2S_CH_SetSystemWordLength() to set the system frame length equal to the frame 
  59:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *     - Modified XMC_I2S_CH_SetBaudrate:
  60:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *       + Optional Master clock output signal generated with a fixed phase relation to SCLK.
  61:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *
  62:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * 2019-05-07:
  63:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *     - Added XMC_I2S_CH_SetBaudrateEx() which allows to select between baudrate generator normal 
  64:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *
  65:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * @endcond
  66:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *
  67:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  */
  68:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** /**
  69:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *
  70:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * @brief I2S driver for XMC microcontroller family
  71:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  *
  72:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  */
  73:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** /**************************************************************************************************
  74:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * HEADER FILES
  75:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  **************************************************************************************************
  76:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
  77:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** #include <xmc_scu.h>
  78:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** #include <xmc_i2s.h>
  79:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
  80:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** /**************************************************************************************************
  81:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * MACROS
  82:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  **************************************************************************************************
  83:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** /* To take into account the SCLK divider by 2 and the PPPEN divider (see Divider Mode Counter figur
  84:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** #define XMC_I2S_CH_OVERSAMPLING (4UL)
  85:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
  86:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** /**************************************************************************************************
  87:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  * API IMPLEMENTATION
  88:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****  **************************************************************************************************
  89:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
  90:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** /* Initializes the selected I2S channel with the config structure. */
  91:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** void XMC_I2S_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2S_CH_CONFIG_t *const config)
  92:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** {
  93:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   XMC_ASSERT("XMC_I2S_CH_Init: data_delayed_sclk_periods value not valid",(config->data_delayed_scl
  94:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 		                                                   (config->data_delayed_sclk_periods  < config->
  95:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   XMC_USIC_CH_Enable(channel);
  96:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
  97:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   if(config->bus_mode == XMC_I2S_CH_BUS_MODE_MASTER)
  98:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   {
  99:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     /* Configure baud rate */
 100:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     (void)XMC_I2S_CH_SetBaudrateEx(channel, config->baudrate, config->normal_divider_mode);
 101:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   }
 102:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   /* Configuration of USIC Shift Control */
 103:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   /* Transmission Mode (TRM) = 1  */
 104:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   channel->SCTR = (uint32_t)(0x3UL << USIC_CH_SCTR_TRM_Pos) |
 105:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                   (uint32_t)((config->frame_length -1U) << USIC_CH_SCTR_FLE_Pos) |
 106:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                   (uint32_t)((config->data_bits - 1U) << USIC_CH_SCTR_WLE_Pos) |
 107:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                   USIC_CH_SCTR_SDIR_Msk;
 108:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 109:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   /* Configuration of USIC Transmit Control/Status Register */
 110:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   /* TBUF Data Enable (TDEN) = 1 */
 111:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   /* TBUF Data Single Shot Mode (TDSSM) = 1 */
 112:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   /* WA mode enabled(WAMD) = 1 */
 113:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   channel->TCSR = (uint32_t)((channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
 114:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                                                  USIC_CH_TCSR_SELMD_Msk |
 115:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                                                  USIC_CH_TCSR_FLEMD_Msk |
 116:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                                                  USIC_CH_TCSR_HPCMD_Msk))) |
 117:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 				  USIC_CH_TCSR_WAMD_Msk |
 118:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                   (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
 119:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                   USIC_CH_TCSR_TDSSM_Msk);
 120:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 121:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   if(config->bus_mode == XMC_I2S_CH_BUS_MODE_MASTER)
 122:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   {
 123:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     /* Configuration of Protocol Control Register */
 124:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     channel->PCR_IISMode = (uint32_t)USIC_CH_PCR_IISMode_WAGEN_Msk;
 125:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   }
 126:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 127:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   /* Configuration of Protocol Control Register */
 128:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   channel->PCR_IISMode |= (uint32_t)(USIC_CH_PCR_IISMode_DTEN_Msk |
 129:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                           (uint32_t)config->wa_inversion) |
 130:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                           ((uint32_t)((uint32_t)config->data_delayed_sclk_periods - 1U) << USIC_CH_
 131:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 132:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   XMC_I2S_CH_SetSystemWordLength(channel, config->frame_length);
 133:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 134:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   /* Clear protocol status */
 135:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   channel->PSCR = 0xFFFFFFFFUL;
 136:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** }
 137:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 138:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 139:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** XMC_I2S_CH_STATUS_t XMC_I2S_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate)
 140:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** {
  28              	 .loc 1 140 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 38B5     	 push {r3,r4,r5,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 16
  36              	 .cfi_offset 3,-16
  37              	 .cfi_offset 4,-12
  38              	 .cfi_offset 5,-8
  39              	 .cfi_offset 14,-4
  40 0002 0546     	 mov r5,r0
  41 0004 0C46     	 mov r4,r1
  42              	.LVL1:
 141:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   XMC_I2S_CH_STATUS_t status;
 142:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 143:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   status = XMC_I2S_CH_STATUS_ERROR;
 144:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 145:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   if (rate <= (XMC_SCU_CLOCK_GetPeripheralClockFrequency() >> 1U))
  43              	 .loc 1 145 0
  44 0006 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
  45              	.LVL2:
  46 000a B4EB500F 	 cmp r4,r0,lsr#1
  47 000e 0CD8     	 bhi .L3
 146:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   {
 147:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     if (XMC_USIC_CH_SetBaudrate(channel, rate, XMC_I2S_CH_OVERSAMPLING) == XMC_USIC_CH_STATUS_OK)
  48              	 .loc 1 147 0
  49 0010 2846     	 mov r0,r5
  50 0012 2146     	 mov r1,r4
  51 0014 0422     	 movs r2,#4
  52 0016 FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
  53              	.LVL3:
  54 001a 40B9     	 cbnz r0,.L4
 148:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     {
 149:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****       channel->BRG = (uint32_t)((channel->BRG & ~(USIC_CH_BRG_CTQSEL_Msk)) |
  55              	 .loc 1 149 0
  56 001c 6B69     	 ldr r3,[r5,#20]
 150:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                      (0x2UL << USIC_CH_BRG_CTQSEL_Pos)) |
  57              	 .loc 1 150 0
  58 001e 23F0D003 	 bic r3,r3,#208
  59 0022 43F09003 	 orr r3,r3,#144
 149:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                      (0x2UL << USIC_CH_BRG_CTQSEL_Pos)) |
  60              	 .loc 1 149 0
  61 0026 6B61     	 str r3,[r5,#20]
  62              	.LVL4:
  63 0028 38BD     	 pop {r3,r4,r5,pc}
  64              	.LVL5:
  65              	.L3:
 143:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
  66              	 .loc 1 143 0
  67 002a 0120     	 movs r0,#1
  68 002c 38BD     	 pop {r3,r4,r5,pc}
  69              	.LVL6:
  70              	.L4:
  71 002e 0120     	 movs r0,#1
  72              	.LVL7:
 151:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                      USIC_CH_BRG_PPPEN_Msk;
 152:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 153:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****       status = XMC_I2S_CH_STATUS_OK;
 154:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     }
 155:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 156:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   }
 157:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   return status;
 158:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** }
  73              	 .loc 1 158 0
  74 0030 38BD     	 pop {r3,r4,r5,pc}
  75              	 .cfi_endproc
  76              	.LFE259:
  78 0032 00BF     	 .section .text.XMC_I2S_CH_SetBaudrateEx,"ax",%progbits
  79              	 .align 2
  80              	 .global XMC_I2S_CH_SetBaudrateEx
  81              	 .thumb
  82              	 .thumb_func
  84              	XMC_I2S_CH_SetBaudrateEx:
  85              	.LFB260:
 159:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 160:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** XMC_I2S_CH_STATUS_t XMC_I2S_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, const uint32_t rate, boo
 161:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** {
  86              	 .loc 1 161 0
  87              	 .cfi_startproc
  88              	 
  89              	 
  90              	.LVL8:
  91 0000 70B5     	 push {r4,r5,r6,lr}
  92              	.LCFI1:
  93              	 .cfi_def_cfa_offset 16
  94              	 .cfi_offset 4,-16
  95              	 .cfi_offset 5,-12
  96              	 .cfi_offset 6,-8
  97              	 .cfi_offset 14,-4
  98 0002 0546     	 mov r5,r0
  99 0004 0C46     	 mov r4,r1
 100 0006 1646     	 mov r6,r2
 162:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   XMC_USIC_CH_STATUS_t status;
 163:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 164:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   if (rate <= (XMC_SCU_CLOCK_GetPeripheralClockFrequency() >> 1U))
 101              	 .loc 1 164 0
 102 0008 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 103              	.LVL9:
 104 000c B4EB500F 	 cmp r4,r0,lsr#1
 105 0010 13D8     	 bhi .L10
 165:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   {
 166:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     if (normal_divider_mode)
 106              	 .loc 1 166 0
 107 0012 2EB1     	 cbz r6,.L8
 167:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     {
 168:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****       status = XMC_USIC_CH_SetBaudrateEx(channel, rate, XMC_I2S_CH_OVERSAMPLING);
 108              	 .loc 1 168 0
 109 0014 2846     	 mov r0,r5
 110 0016 2146     	 mov r1,r4
 111 0018 0422     	 movs r2,#4
 112 001a FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrateEx
 113              	.LVL10:
 114 001e 04E0     	 b .L9
 115              	.LVL11:
 116              	.L8:
 169:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     }
 170:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     else
 171:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     {
 172:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****       status = XMC_USIC_CH_SetBaudrate(channel, rate, XMC_I2S_CH_OVERSAMPLING);
 117              	 .loc 1 172 0
 118 0020 2846     	 mov r0,r5
 119 0022 2146     	 mov r1,r4
 120 0024 0422     	 movs r2,#4
 121 0026 FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
 122              	.LVL12:
 123              	.L9:
 173:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     }
 174:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     
 175:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     if (status == XMC_USIC_CH_STATUS_OK)
 124              	 .loc 1 175 0
 125 002a 38B9     	 cbnz r0,.L7
 176:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     {
 177:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****       channel->BRG = (uint32_t)((channel->BRG & ~(USIC_CH_BRG_CTQSEL_Msk)) |
 126              	 .loc 1 177 0
 127 002c 6B69     	 ldr r3,[r5,#20]
 178:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                      (0x2UL << USIC_CH_BRG_CTQSEL_Pos)) |
 128              	 .loc 1 178 0
 129 002e 23F0D003 	 bic r3,r3,#208
 130 0032 43F09003 	 orr r3,r3,#144
 177:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                      (0x2UL << USIC_CH_BRG_CTQSEL_Pos)) |
 131              	 .loc 1 177 0
 132 0036 6B61     	 str r3,[r5,#20]
 133 0038 70BD     	 pop {r4,r5,r6,pc}
 134              	.LVL13:
 135              	.L10:
 179:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                      USIC_CH_BRG_PPPEN_Msk;
 180:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     }
 181:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   }
 182:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   else
 183:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   {
 184:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 	  status = XMC_USIC_CH_STATUS_ERROR;
 136              	 .loc 1 184 0
 137 003a 0120     	 movs r0,#1
 138              	.L7:
 139              	.LVL14:
 185:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   }
 186:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 187:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   return (XMC_I2S_CH_STATUS_t)status;
 188:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** }
 140              	 .loc 1 188 0
 141 003c 70BD     	 pop {r4,r5,r6,pc}
 142              	 .cfi_endproc
 143              	.LFE260:
 145 003e 00BF     	 .section .text.XMC_I2S_CH_SetSystemWordLength,"ax",%progbits
 146              	 .align 2
 147              	 .global XMC_I2S_CH_SetSystemWordLength
 148              	 .thumb
 149              	 .thumb_func
 151              	XMC_I2S_CH_SetSystemWordLength:
 152              	.LFB261:
 189:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 190:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** void XMC_I2S_CH_SetSystemWordLength(XMC_USIC_CH_t *const channel,uint32_t sclk_cycles_system_word_l
 191:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** {
 153              	 .loc 1 191 0
 154              	 .cfi_startproc
 155              	 
 156              	 
 157              	.LVL15:
 158 0000 2DE9F04F 	 push {r4,r5,r6,r7,r8,r9,r10,fp,lr}
 159              	.LCFI2:
 160              	 .cfi_def_cfa_offset 36
 161              	 .cfi_offset 4,-36
 162              	 .cfi_offset 5,-32
 163              	 .cfi_offset 6,-28
 164              	 .cfi_offset 7,-24
 165              	 .cfi_offset 8,-20
 166              	 .cfi_offset 9,-16
 167              	 .cfi_offset 10,-12
 168              	 .cfi_offset 11,-8
 169              	 .cfi_offset 14,-4
 170 0004 83B0     	 sub sp,sp,#12
 171              	.LCFI3:
 172              	 .cfi_def_cfa_offset 48
 173 0006 0190     	 str r0,[sp,#4]
 174              	.LVL16:
 192:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   uint32_t sclk_cycles_system_word_length_temp;
 193:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   uint8_t dctq_temp;
 194:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   uint8_t pctq_temp;
 195:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   uint8_t dctq = 1U;
 196:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   uint8_t pctq = 1U;
 197:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   uint8_t best_error = 64U;
 198:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   uint8_t error;
 199:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   XMC_ASSERT("XMC_I2S_CH_Init: data_delayed_sclk_periods value not valid",(sclk_cycles_system_word_
 200:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 201:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 202:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   for (dctq_temp =1U; dctq_temp < 33U ; dctq_temp++)
 203:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   {
 204:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     for (pctq_temp =1U; pctq_temp < 5U ; pctq_temp++)
 205:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     {
 206:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****       sclk_cycles_system_word_length_temp = ((uint32_t)dctq_temp) * ((uint32_t)pctq_temp);
 207:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****       if(sclk_cycles_system_word_length_temp == sclk_cycles_system_word_length)
 208:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****       {
 209:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****         dctq = dctq_temp;
 210:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****         pctq = pctq_temp;
 211:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****         break;
 175              	 .loc 1 211 0
 176 0008 0125     	 movs r5,#1
 197:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   uint8_t error;
 177              	 .loc 1 197 0
 178 000a 4027     	 movs r7,#64
 196:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   uint8_t best_error = 64U;
 179              	 .loc 1 196 0
 180 000c A946     	 mov r9,r5
 195:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   uint8_t pctq = 1U;
 181              	 .loc 1 195 0
 182 000e AA46     	 mov r10,r5
 183 0010 5FFA81FC 	 uxtb ip,r1
 207:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****       {
 184              	 .loc 1 207 0
 185 0014 CB46     	 mov fp,r9
 186 0016 1BE0     	 b .L13
 187              	.LVL17:
 188              	.L18:
 189 0018 2844     	 add r0,r0,r5
 190              	.LVL18:
 191 001a 3244     	 add r2,r2,r6
 192 001c D2B2     	 uxtb r2,r2
 193 001e 8142     	 cmp r1,r0
 194 0020 04D1     	 bne .L14
 195 0022 00E0     	 b .L20
 196              	.LVL19:
 197              	.L22:
 198 0024 5B46     	 mov r3,fp
 199              	.LVL20:
 200              	.L20:
 210:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****         break;
 201              	 .loc 1 210 0
 202 0026 9946     	 mov r9,r3
 203              	 .loc 1 211 0
 204 0028 F246     	 mov r10,lr
 205 002a 0EE0     	 b .L15
 206              	.LVL21:
 207              	.L14:
 212:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****       }
 213:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****       if (sclk_cycles_system_word_length_temp > sclk_cycles_system_word_length)
 208              	 .loc 1 213 0
 209 002c 8142     	 cmp r1,r0
 210 002e 3ABF     	 itte cc
 211 0030 CCEB0004 	 rsbcc r4,ip,r0
 212 0034 E4B2     	 uxtbcc r4,r4
 213              	.LVL22:
 214:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****       {
 215:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****         error = (uint8_t)(sclk_cycles_system_word_length_temp  - sclk_cycles_system_word_length);
 216:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****       }
 217:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****       else
 218:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****       {
 219:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****         error = (uint8_t)(sclk_cycles_system_word_length - sclk_cycles_system_word_length_temp);
 214              	 .loc 1 219 0
 215 0036 1446     	 movcs r4,r2
 216              	.LVL23:
 220:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****       }
 221:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 222:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****       if(error < best_error)
 217              	 .loc 1 222 0
 218 0038 BC42     	 cmp r4,r7
 219 003a 02D2     	 bcs .L17
 223:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****       {
 224:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****          best_error = error;
 220              	 .loc 1 224 0
 221 003c 2746     	 mov r7,r4
 222              	.LVL24:
 222:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****       {
 223              	 .loc 1 222 0
 224 003e 9946     	 mov r9,r3
 225 0040 C246     	 mov r10,r8
 226              	.L17:
 227              	.LVL25:
 204:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     {
 228              	 .loc 1 204 0 discriminator 2
 229 0042 0133     	 adds r3,r3,#1
 230              	.LVL26:
 231 0044 DBB2     	 uxtb r3,r3
 232              	.LVL27:
 233 0046 052B     	 cmp r3,#5
 234 0048 E6D1     	 bne .L18
 235              	.LVL28:
 236              	.L15:
 237 004a 0135     	 adds r5,r5,#1
 238              	.LVL29:
 202:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   {
 239              	 .loc 1 202 0 discriminator 2
 240 004c 212D     	 cmp r5,#33
 241 004e 0DD0     	 beq .L19
 242              	.LVL30:
 243              	.L13:
 244 0050 5FFA85FE 	 uxtb lr,r5
 245              	.LVL31:
 207:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****       {
 246              	 .loc 1 207 0 discriminator 1
 247 0054 A942     	 cmp r1,r5
 248 0056 E5D0     	 beq .L22
 249 0058 CEF10006 	 rsb r6,lr,#0
 250 005c F6B2     	 uxtb r6,r6
 251 005e CEEB0C02 	 rsb r2,lr,ip
 252 0062 D2B2     	 uxtb r2,r2
 207:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****       {
 253              	 .loc 1 207 0 is_stmt 0
 254 0064 2846     	 mov r0,r5
 255 0066 5B46     	 mov r3,fp
 222:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****       {
 256              	 .loc 1 222 0 is_stmt 1
 257 0068 F046     	 mov r8,lr
 258 006a DFE7     	 b .L14
 259              	.LVL32:
 260              	.L19:
 225:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****          dctq =  dctq_temp;
 226:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****          pctq = pctq_temp;
 227:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****       }
 228:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     }
 229:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   }
 230:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   channel->BRG = (uint32_t)((channel->BRG & ~((uint32_t)(USIC_CH_BRG_DCTQ_Msk | 
 261              	 .loc 1 230 0
 262 006c 0199     	 ldr r1,[sp,#4]
 263              	.LVL33:
 264 006e 4A69     	 ldr r2,[r1,#20]
 231:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                                                          USIC_CH_BRG_PCTQ_Msk))) |
 232:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                  (uint32_t)((uint32_t)((uint32_t)((uint32_t)dctq- 1U) << USIC_CH_BRG_DCTQ_Pos) |
 265              	 .loc 1 232 0
 266 0070 0AF1FF3A 	 add r10,r10,#-1
 233:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                             (uint32_t)((uint32_t)((uint32_t)pctq- 1U) << USIC_CH_BRG_PCTQ_Pos)));
 267              	 .loc 1 233 0
 268 0074 09F1FF33 	 add r3,r9,#-1
 269 0078 1B02     	 lsls r3,r3,#8
 232:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                             (uint32_t)((uint32_t)((uint32_t)pctq- 1U) << USIC_CH_BRG_PCTQ_Pos)));
 270              	 .loc 1 232 0
 271 007a 43EA8A23 	 orr r3,r3,r10,lsl#10
 230:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                                                          USIC_CH_BRG_PCTQ_Msk))) |
 272              	 .loc 1 230 0
 273 007e 22F4FE42 	 bic r2,r2,#32512
 274 0082 1343     	 orrs r3,r3,r2
 275 0084 4B61     	 str r3,[r1,#20]
 234:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** }
 276              	 .loc 1 234 0
 277 0086 03B0     	 add sp,sp,#12
 278              	.LCFI4:
 279              	 .cfi_def_cfa_offset 36
 280              	 
 281 0088 BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,r10,fp,pc}
 282              	 .cfi_endproc
 283              	.LFE261:
 285              	 .section .text.XMC_I2S_CH_Init,"ax",%progbits
 286              	 .align 2
 287              	 .global XMC_I2S_CH_Init
 288              	 .thumb
 289              	 .thumb_func
 291              	XMC_I2S_CH_Init:
 292              	.LFB258:
  92:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   XMC_ASSERT("XMC_I2S_CH_Init: data_delayed_sclk_periods value not valid",(config->data_delayed_scl
 293              	 .loc 1 92 0
 294              	 .cfi_startproc
 295              	 
 296              	 
 297              	.LVL34:
 298 0000 38B5     	 push {r3,r4,r5,lr}
 299              	.LCFI5:
 300              	 .cfi_def_cfa_offset 16
 301              	 .cfi_offset 3,-16
 302              	 .cfi_offset 4,-12
 303              	 .cfi_offset 5,-8
 304              	 .cfi_offset 14,-4
 305 0002 0446     	 mov r4,r0
 306 0004 0D46     	 mov r5,r1
  95:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 307              	 .loc 1 95 0
 308 0006 FFF7FEFF 	 bl XMC_USIC_CH_Enable
 309              	.LVL35:
  97:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   {
 310              	 .loc 1 97 0
 311 000a 6B7A     	 ldrb r3,[r5,#9]
 312 000c 23B9     	 cbnz r3,.L26
 100:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   }
 313              	 .loc 1 100 0
 314 000e 2046     	 mov r0,r4
 315 0010 2968     	 ldr r1,[r5]
 316 0012 2A79     	 ldrb r2,[r5,#4]
 317 0014 FFF7FEFF 	 bl XMC_I2S_CH_SetBaudrateEx
 318              	.LVL36:
 319              	.L26:
 105:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                   (uint32_t)((config->data_bits - 1U) << USIC_CH_SCTR_WLE_Pos) |
 320              	 .loc 1 105 0
 321 0018 AB79     	 ldrb r3,[r5,#6]
 322 001a 5A1E     	 subs r2,r3,#1
 106:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                   USIC_CH_SCTR_SDIR_Msk;
 323              	 .loc 1 106 0
 324 001c 6B79     	 ldrb r3,[r5,#5]
 325 001e 013B     	 subs r3,r3,#1
 326 0020 1B06     	 lsls r3,r3,#24
 105:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                   (uint32_t)((config->data_bits - 1U) << USIC_CH_SCTR_WLE_Pos) |
 327              	 .loc 1 105 0
 328 0022 43EA0243 	 orr r3,r3,r2,lsl#16
 106:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                   USIC_CH_SCTR_SDIR_Msk;
 329              	 .loc 1 106 0
 330 0026 43F44073 	 orr r3,r3,#768
 331 002a 43F00103 	 orr r3,r3,#1
 104:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                   (uint32_t)((config->frame_length -1U) << USIC_CH_SCTR_FLE_Pos) |
 332              	 .loc 1 104 0
 333 002e 6363     	 str r3,[r4,#52]
 113:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                                                  USIC_CH_TCSR_SELMD_Msk |
 334              	 .loc 1 113 0
 335 0030 A36B     	 ldr r3,[r4,#56]
 336 0032 23F4A363 	 bic r3,r3,#1304
 337 0036 23F00703 	 bic r3,r3,#7
 338 003a 43F4A163 	 orr r3,r3,#1288
 339 003e A363     	 str r3,[r4,#56]
 121:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   {
 340              	 .loc 1 121 0
 341 0040 6B7A     	 ldrb r3,[r5,#9]
 342 0042 0BB9     	 cbnz r3,.L27
 124:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   }
 343              	 .loc 1 124 0
 344 0044 0123     	 movs r3,#1
 345 0046 E363     	 str r3,[r4,#60]
 346              	.L27:
 128:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                           (uint32_t)config->wa_inversion) |
 347              	 .loc 1 128 0
 348 0048 E16B     	 ldr r1,[r4,#60]
 349 004a 2B7A     	 ldrb r3,[r5,#8]
 350 004c 43F00203 	 orr r3,r3,#2
 351 0050 43EA0102 	 orr r2,r3,r1
 130:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 352              	 .loc 1 130 0
 353 0054 EB79     	 ldrb r3,[r5,#7]
 354 0056 013B     	 subs r3,r3,#1
 128:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****                           (uint32_t)config->wa_inversion) |
 355              	 .loc 1 128 0
 356 0058 42EA0343 	 orr r3,r2,r3,lsl#16
 357 005c E363     	 str r3,[r4,#60]
 132:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 358              	 .loc 1 132 0
 359 005e 2046     	 mov r0,r4
 360 0060 A979     	 ldrb r1,[r5,#6]
 361 0062 FFF7FEFF 	 bl XMC_I2S_CH_SetSystemWordLength
 362              	.LVL37:
 135:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** }
 363              	 .loc 1 135 0
 364 0066 4FF0FF33 	 mov r3,#-1
 365 006a E364     	 str r3,[r4,#76]
 366 006c 38BD     	 pop {r3,r4,r5,pc}
 367              	 .cfi_endproc
 368              	.LFE258:
 370 006e 00BF     	 .section .text.XMC_I2S_CH_Transmit,"ax",%progbits
 371              	 .align 2
 372              	 .global XMC_I2S_CH_Transmit
 373              	 .thumb
 374              	 .thumb_func
 376              	XMC_I2S_CH_Transmit:
 377              	.LFB262:
 235:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 236:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** /* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the pr
 237:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** void XMC_I2S_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_I2S_CH_CHANNE
 238:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** {
 378              	 .loc 1 238 0
 379              	 .cfi_startproc
 380              	 
 381              	 
 382              	 
 383              	.LVL38:
 239:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   /* Check FIFO size */
 240:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 384              	 .loc 1 240 0
 385 0000 D0F80831 	 ldr r3,[r0,#264]
 386 0004 13F0E06F 	 tst r3,#117440512
 387 0008 0CD1     	 bne .L30
 388              	.L33:
 389              	.LVL39:
 390              	.LBB10:
 391              	.LBB11:
 392              	 .file 2 "C:/Files/Projects/Git/XMCLib/inc/xmc_usic.h"
   1:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
   2:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @file xmc_usic.h
   3:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @date 2019-05-07
   4:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
   5:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @cond
   6:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  **************************************************************************************************
   7:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
   9:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * All rights reserved.                        
  11:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *                                             
  12:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * following conditions are met:   
  14:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *                                                                              
  15:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * disclaimer.                        
  17:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
  18:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
  21:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *                                                                              
  24:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *                                                                              
  32:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  **************************************************************************************************
  35:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  36:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Change History
  37:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * --------------
  38:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  39:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2015-02-20:
  40:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Initial draft<br>
  41:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Documentation improved <br>
  42:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  43:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2015-05-08:
  44:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetInputTriggerCombinationMode() and XMC_USIC_CH_SetTransmitBufferStatus
  45:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *      
  46:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2015-06-20:
  47:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  48:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
  49:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2015-08-17:
  50:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Bug fixed in XMC_USIC_CH_SetTransmitBufferStatus API. OR operator removed.
  51:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  52:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2015-08-24:
  53:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_USIC_CH_DisableDelayCompensation(
  54:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *       XMC_USIC_CH_DisableDelayCompensation()
  55:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  56:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2015-08-25:
  57:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for defining if the data shift unit input is derived
  58:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *       from the input data path DXn or from the selected protocol pre-processors: XMC_USIC_CH_Con
  59:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *       and XMC_USIC_CH_ConnectInputDataShiftToDataInput()
  60:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  61:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2015-08-27:
  62:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Fixed bug in XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T value.
  63:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for direct TBUF access: XMC_USIC_CH_WriteToTBUF() and XMC_USIC_CH_WriteToTBUFTC
  64:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  65:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  66:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2015-08-28:
  67:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added API for enabling the transfer trigger unit to set bit TCSR.TE if the trigger signal 
  68:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *       Clear to Send (CTS) signal: XMC_USIC_CH_EnableTBUFDataValidTrigger() and XMC_USIC_CH_Disab
  69:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  70:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2016-03-09:
  71:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Optimization of write only registers
  72:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  73:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2016-04-10:
  74:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added an API to put the data into FIFO when hardware port control is enabled: XMC_USIC_CH_
  75:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  76:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2017-02-10:
  77:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetShiftDirection() to allow selection of shift direction of the data wo
  78:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetCaptureTimerValue() and XMC_USIC_CH_SetFractionalDivider()
  79:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  80:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2017-09-08:
  81:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Fixed value of macro XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST used in XMC_USIC_CH_SetShiftDir
  82:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  83:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2018-09-29:
  84:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetBaudrateEx which uses the integer divider instead of the fractional d
  85:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
  86:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2019-05-07:
  87:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetBaudrate(), XMC_USIC_CH_GetSCLKFrequency() and XMC_USIC_CH_GetMCLKFre
  88:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  89:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @endcond
  90:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  91:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
  92:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
  93:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #ifndef XMC_USIC_H
  94:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC_H
  95:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
  96:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * HEADER FILES
  97:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
  98:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
  99:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #include "xmc_common.h"
 100:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 101:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 102:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @addtogroup XMClib XMC Peripheral Library
 103:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @{
 104:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 105:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 106:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 107:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @addtogroup USIC
 108:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @brief Universal Serial Interface Channel(USIC) driver for serial communication.
 109:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 110:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The Universal Serial Interface Channel(USIC) module is a flexible interface module
 111:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * covering several serial communication protocols. A USIC module contains two
 112:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * independent communication channels named USICx_CH0 and USICx_CH1, with x
 113:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * being the number of the USIC module. The user can program, during run-time, which protocol will 
 114:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * by each communication channel and which pins are used.
 115:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The driver provides APIs, configuration structures and enumerations to configure common features
 116:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * communication protocols.
 117:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
 118:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC driver features:
 119:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of FIFO for transmit and receive functions.
 120:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * -# Provides a structure type XMC_USIC_CH_t to represent the USIC channel registers in a programm
 121:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  friendly format.
 122:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of automatic update for frame length, word length, slave select or slave
 123:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * -# Allows transmission of data to FIFO using XMC_USIC_CH_TXFIFO_PutData() and XMC_USIC_CH_TXFIFO
 124:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * -# Allows reading of received data in FIFO using XMC_USIC_CH_RXFIFO_GetData()
 125:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of baudrate using XMC_USIC_CH_SetBaudrate()
 126:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * -# Provides API to trigger interrupts using XMC_USIC_CH_TriggerServiceRequest()
 127:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @{
 128:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 129:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 130:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 131:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * MACROS
 132:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 133:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 134:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0 ((XMC_USIC_t *)USIC0_BASE)			/**< USIC0 module base address */
 135:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH0 ((XMC_USIC_CH_t *)USIC0_CH0_BASE)	/**< USIC0 channel 0 base address */
 136:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH1 ((XMC_USIC_CH_t *)USIC0_CH1_BASE)	/**< USIC0 channel 1 base address */
 137:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 138:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if defined(USIC1)
 139:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1 ((XMC_USIC_t *)USIC1_BASE)			/**< USIC1 module base address */
 140:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH0 ((XMC_USIC_CH_t *)USIC1_CH0_BASE)	/**< USIC1 channel 0 base address */
 141:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH1 ((XMC_USIC_CH_t *)USIC1_CH1_BASE)	/**< USIC1 channel 1 base address */
 142:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 143:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 144:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if defined(USIC2)
 145:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2 ((XMC_USIC_t *)USIC2_BASE)			/**< USIC2 module base address */
 146:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH0 ((XMC_USIC_CH_t *)USIC2_CH0_BASE)	/**< USIC2 channel 0 base address */
 147:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH1 ((XMC_USIC_CH_t *)USIC2_CH1_BASE)	/**< USIC2 channel 1 base address */
 148:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 149:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 150:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Msk  USIC_CH_DX0CR_DSEL_Msk   /**< Common mask for DSEL bitfield mask in 
 151:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Pos  USIC_CH_DX0CR_DSEL_Pos   /**< Common mask for DSEL bitfield position
 152:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Pos USIC_CH_DX0CR_SFSEL_Pos  /**< Common mask for SFSEL bitfield positio
 153:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Msk USIC_CH_DX0CR_SFSEL_Msk  /**< Common mask for SFSEL bitfield mask in
 154:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DPOL_Msk  USIC_CH_DX0CR_DPOL_Msk   /**< Common mask for DPOL bitfield mask in 
 155:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DFEN_Msk  USIC_CH_DX0CR_DFEN_Msk   /**< Common mask for DFEN bitfield mask in 
 156:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEN_Msk  USIC_CH_DX0CR_DSEN_Msk   /**< Common mask for DSEN bitfield mask in 
 157:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Pos    USIC_CH_DX0CR_CM_Pos     /**< Common mask for CM bitfield position i
 158:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Msk    USIC_CH_DX0CR_CM_Msk     /**< Common mask for CM bitfield mask in DX
 159:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_Msk  USIC_CH_DX0CR_INSW_Msk   /**< Common mask for INSW bitfield mask in 
 160:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_pos  USIC_CH_DX0CR_INSW_Pos   /**< Common mask for INSW bitfield position
 161:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 162:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC1
 163:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  #include "xmc1_usic_map.h"
 164:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 165:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 166:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC4
 167:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  #include "xmc4_usic_map.h"
 168:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 169:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 170:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 171:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * ENUMS
 172:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 173:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 174:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 175:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel driver status
 176:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 177:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_STATUS
 178:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 179:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_OK,    /**< USIC driver status : OK */
 180:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_ERROR, /**< USIC driver status : ERROR */
 181:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_BUSY   /**< USIC driver status : BUSY */
 182:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_STATUS_t;
 183:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 184:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 185:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel kernel mode
 186:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 187:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_KERNEL_MODE
 188:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 189:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_0  = 0x0UL,  /**< Run mode 0 (transmission and reception possible)*/
 190:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_1  = 0x1UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Run mode 1 (transmissio
 191:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_0 = 0x2UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Stop mode 0 (no transmi
 192:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_1 = 0x3UL << USIC_CH_KSCFG_NOMCFG_Pos   /**< Stop mode 1 (both trans
 193:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_KERNEL_MODE_t;
 194:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 195:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 196:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel operating mode
 197:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 198:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_OPERATING_MODE
 199:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 200:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_IDLE = 0x0UL, /**< USIC channel idle */
 201:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_SPI  = 0x1UL << USIC_CH_CCR_MODE_Pos, /**< SPI mode */
 202:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_UART = 0x2UL << USIC_CH_CCR_MODE_Pos, /**< UART mode */
 203:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2S  = 0x3UL << USIC_CH_CCR_MODE_Pos, /**< I2S mode */
 204:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2C  = 0x4UL << USIC_CH_CCR_MODE_Pos  /**< I2C mode */
 205:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_OPERATING_MODE_t;
 206:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 207:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 208:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel inputs
 209:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 210:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT
 211:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 212:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX0, /**< DX0 input */
 213:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX1, /**< DX1 input */
 214:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX2, /**< DX2 input */
 215:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX3, /**< DX3 input */
 216:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX4, /**< DX4 input */
 217:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX5  /**< DX5 input */
 218:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_t;
 219:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 220:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 221:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel input source sampling frequency
 222:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 223:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_SAMPLING_FREQ
 224:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 225:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH            = 0x0UL, /**< Use fperiph frequency for input 
 226:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = 0x1UL << USIC_CH_DXCR_SFSEL_Pos  /**< Use fF
 227:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_SAMPLING_FREQ_t;
 228:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 229:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 230:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel input combination mode
 231:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 232:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_COMBINATION_MODE
 233:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 234:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED = 0x0UL, /**< The trigger activation is disab
 235:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE      = 0x1UL, /**< A rising edge activates DXnT*/
 236:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE     = 0x2UL, /**< A falling edge activates DXnT*/
 237:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES       = 0x3UL, /**< Both edges activate DXnT*/
 238:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_COMBINATION_MODE_t;
 239:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 240:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 241:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel data transmission start modes.
 242:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Data shifted out of the transmit pin depends on the value configured for the
 243:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * TDEN bitfield of the TCSR register. Following enum values are used for configuring
 244:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * the TCSR->TDEN bitfield.
 245:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 246:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_START_TRANSMISION_MODE
 247:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 248:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_DISABLED      = 0x0U, /**< Passive data level is sent out on transm
 249:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV        = 0x1UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 250:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0 = 0x2UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 251:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1 = 0x3UL << USIC_CH_TCSR_TDEN_Pos  /**< Transmission o
 252:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_START_TRANSMISION_MODE_t;
 253:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 254:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 255:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel interrupt node pointers
 256:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 257:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INTERRUPT_NODE_POINTER
 258:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 259:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = USIC_CH_INPR_TSINP_Pos, /**< Node pointe
 260:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = USIC_CH_INPR_TBINP_Pos, /**< Node pointe
 261:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE             = USIC_CH_INPR_RINP_Pos,  /**< Node pointe
 262:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = USIC_CH_INPR_AINP_Pos,  /**< Node pointe
 263:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = USIC_CH_INPR_PINP_Pos   /**< Node pointe
 264:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INTERRUPT_NODE_POINTER_t;
 265:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 266:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 267:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel events
 268:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 269:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_EVENT
 270:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 271:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 272:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 273:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 274:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 275:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 276:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 277:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk /**< Baudrate generator event */
 278:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_EVENT_t;
 279:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 280:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 281:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel parity mode
 282:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 283:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_PARITY_MODE
 284:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 285:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_NONE     = 0x0UL,  /**< Disable parity mode */
 286:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_EVEN     = 0x2UL << USIC_CH_CCR_PM_Pos,  /**< Enable even parity mode */
 287:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_ODD      = 0x3UL << USIC_CH_CCR_PM_Pos   /**< Enable odd parity mode */
 288:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PARITY_MODE_t;
 289:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 290:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 291:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel data output mode
 292:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 293:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_DATA_OUTPUT_MODE
 294:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 295:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL   = 0x0UL,  /**< Data output normal mode */
 296:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED = 0x1UL << USIC_CH_SCTR_DOCFG_Pos   /**< Data output invert
 297:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_DATA_OUTPUT_MODE_t;
 298:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 299:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 300:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status
 301:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 302:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS
 303:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 304:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_IDLE = 0x0UL,                 /**< Transfer buffer is currently idle*/
 305:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_BUSY = USIC_CH_TCSR_TDV_Msk   /**< Transfer buffer is currently busy*/
 306:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_t;
 307:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 308:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 309:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 310:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 311:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status modification
 312:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 313:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS_SET
 314:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 315:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_BUSY   = 0x1UL, /**< Set Transfer buffer status to busy*/
 316:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_IDLE   = 0x2UL  /**< Set Transfer buffer status to idle*/
 317:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_SET_t;
 318:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 319:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 320:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel receive buffer status
 321:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 322:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RBUF_STATUS
 323:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 324:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 = USIC_CH_RBUFSR_RDV0_Msk, /**< RBUF0 data has not yet been r
 325:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID1 = USIC_CH_RBUFSR_RDV1_Msk  /**< RBUF1 data has not yet been r
 326:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RBUF_STATUS_t;
 327:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 328:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 329:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel output signal passive data level
 330:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 331:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USCI_CH_PASSIVE_DATA_LEVEL
 332:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 333:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL0 = 0x0UL, /**< Passive level(idle mode signal level) 0 */
 334:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL1 = 0x1UL << USIC_CH_SCTR_PDL_Pos  /**< Passive level(idle mode sig
 335:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PASSIVE_DATA_LEVEL_t;
 336:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 337:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 338:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO size
 339:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 340:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_FIFO_SIZE
 341:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 342:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_DISABLED     = 0x0U,  /**< FIFO Disabled */
 343:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_2WORDS  = 0x1U,  /**< FIFO size: 2 words */
 344:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_4WORDS  = 0x2U,  /**< FIFO size: 4 words */
 345:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_8WORDS  = 0x3U,  /**< FIFO size: 8 words */
 346:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_16WORDS = 0x4U,  /**< FIFO size: 16 words */
 347:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_32WORDS = 0x5U,  /**< FIFO size: 32 words */
 348:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_64WORDS = 0x6U   /**< FIFO size: 64 words */
 349:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_FIFO_SIZE_t;
 350:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 351:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 352:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO interrupt node pointers
 353:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 354:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER
 355:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 356:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_TBCTR_STBINP_Pos,  /**< Node pointe
 357:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_TBCTR_ATBINP_Pos   /**< Node pointe
 358:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t;
 359:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 360:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 361:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO event configuration
 362:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 363:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT_CONF
 364:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 365:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD  = USIC_CH_TBCTR_STBIEN_Msk,   /**< Enable FIFO standard t
 366:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_TBCTR_TBERIEN_Msk  /**< Enable transmi
 367:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_CONF_t;
 368:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 369:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 370:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO status
 371:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 372:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT
 373:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 374:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_STANDARD = USIC_CH_TRBSR_STBI_Msk,    /**< Transmit FIFO status: Standar
 375:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_ERROR    = USIC_CH_TRBSR_TBERI_Msk    /**< Transmit FIFO status: Error e
 376:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_t;
 377:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 378:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 379:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO interrupt node pointers
 380:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 381:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER
 382:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 383:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_RBCTR_SRBINP_Pos, /**< Node pointer
 384:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_RBCTR_ARBINP_Pos  /**< Node pointer
 385:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t;
 386:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 387:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 388:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO event configuration
 389:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 390:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT_CONF
 391:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 392:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD  = USIC_CH_RBCTR_SRBIEN_Msk,   /**< Enable FIFO standard r
 393:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_RBCTR_RBERIEN_Msk,  /**< Enable receiv
 394:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE = USIC_CH_RBCTR_ARBIEN_Msk   /**< Enable FIFO alternative
 395:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_CONF_t;
 396:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 397:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 398:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO status
 399:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 400:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT
 401:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 402:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_STANDARD  = USIC_CH_TRBSR_SRBI_Msk,   /**< Receive FIFO status: Standard
 403:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ERROR     = USIC_CH_TRBSR_RBERI_Msk,  /**< Receive FIFO status: Error ev
 404:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE = USIC_CH_TRBSR_ARBI_Msk    /**< Receive FIFO status: Alternat
 405:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_t;
 406:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 407:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 408:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator clock source
 409:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 410:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_SOURCE
 411:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 412:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DIVIDER = 0x0UL, /**< Baudrate generator clock source : Source divid
 413:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T    = 0x2UL << USIC_CH_BRG_CLKSEL_Pos  /**< Baudrate generator c
 414:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_SOURCE_t;
 415:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 416:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 417:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator divider mode
 418:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 419:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE
 420:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 421:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_DISABLED   = 0x0UL, /**< Baudrate generator clock divider: Dis
 422:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL     = 0x1UL << USIC_CH_FDR_DM_Pos, /**< Baudrate genera
 423:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL = 0x2UL << USIC_CH_FDR_DM_Pos  /**< Baudrate genera
 424:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t;
 425:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 426:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 427:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator master clock passive level
 428:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 429:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL
 430:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 431:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0 = 0x0UL, /**< Baudrate generator master clock passiv
 432:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_1 = 0x1UL << USIC_CH_BRG_MCLKCFG_Pos  /**< Baudrate ge
 433:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t;
 434:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 435:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 436:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock passive level
 437:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 438:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 439:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 440:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = 0x0UL, /**< Shift clock passive leve
 441:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = 0x1UL << USIC_CH_BRG_SCLKCFG_Pos, /*
 442:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = (int32_t)(0x2UL << USIC_CH_BRG_SCLKC
 443:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = (int32_t)(0x3UL << USIC_CH_BRG_SCLKC
 444:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 445:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 446:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 447:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock output
 448:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 449:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
 450:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 451:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = 0x0UL, /**< Baudrate generator shift clock output: SCL.
 452:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1 = 0x1UL << USIC_CH_BRG_SCLKOSEL_Pos   /**< Baudrate genera
 453:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 454:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 455:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 456:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel shift direction.
 457:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * Defines the shift direction of the data words for transmission and reception
 458:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 459:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_SHIFT_DIRECTION
 460:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 461:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_LSB_FIRST = 0x0UL, /**< Shift LSB first. The first data bit of a data
 462:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST = 0x1UL << USIC_CH_SCTR_SDIR_Pos /**< Shift MSB first. The 
 463:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_SHIFT_DIRECTION_t;
 464:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 465:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 466:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 467:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * DATA STRUCTURES
 468:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 469:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 470:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard start*/
 471:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 472:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   #pragma push
 473:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   #pragma anon_unions
 474:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 475:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   #pragma warning 586
 476:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 477:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 478:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 479:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC module structure
 480:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 481:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef USIC_GLOBAL_TypeDef XMC_USIC_t;
 482:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 483:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 484:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel structure.<br> The members of the structure are same as in the device header file, 
 485:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * except for some registers.
 486:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * DX0CR, DX1CR, DX2CR, DX3CR, DX4CR and DX5CR are replaced with the array DXCR[6].
 487:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * TBUF0 to TBUF31 are replaced with TBUF[32].
 488:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * IN0 to IN31 are replaced with IN[32].
 489:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 490:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef struct XMC_USIC_CH
 491:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 492:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED0;
 493:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  CCFG;			/**< Channel configuration register*/
 494:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED1;
 495:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  KSCFG;			/**< Kernel state configuration register*/
 496:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  FDR;			/**< Fractional divider configuration register*/
 497:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BRG;			/**< Baud rate generator register*/
 498:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  INPR;			/**< Interrupt node pointer register*/
 499:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  DXCR[6];		/**< Input control registers DX0 to DX5.*/
 500:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  SCTR;			/**< Shift control register*/
 501:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TCSR;
 502:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 503:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   union {
 504:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IICMode;	/**< I2C protocol configuration register*/
 505:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IISMode; /**< I2S protocol configuration register*/
 506:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_SSCMode;	/**< SPI protocol configuration register*/
 507:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR;			/**< Protocol configuration register*/
 508:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_ASCMode;	/**< UART protocol configuration register*/
 509:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   };
 510:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CCR;			/**< Channel control register*/
 511:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CMTR;			/**< Capture mode timer register*/
 512:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 513:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   union {
 514:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IICMode;	/**< I2C protocol status register*/
 515:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IISMode;	/**< I2S protocol status register*/
 516:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_SSCMode;	/**< SPI protocol status register*/
 517:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR;			/**< Protocol status register*/
 518:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_ASCMode;	/**< UART protocol status register*/
 519:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   };
 520:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  PSCR;			/**< Protocol status clear register*/
 521:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFSR;		/**< Receive buffer status register*/
 522:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF;			/**< Receive buffer register*/
 523:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFD;			/**< Debug mode receive buffer register*/
 524:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF0;			/**< Receive buffer 0*/
 525:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF1;			/**< Receive buffer 1*/
 526:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF01SR;		/**< Receive buffer status register*/
 527:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  FMR;			/**< Flag modification register*/
 528:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED2[5];
 529:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBUF[32];		/**< Tranmsit buffer registers*/
 530:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYP;			/**< FIFO bypass register*/
 531:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYPCR;			/**< FIFO bypass control register*/
 532:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBCTR;			/**< Transmit FIFO control register*/
 533:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  RBCTR;			/**< Receive FIFO control register*/
 534:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  TRBPTR;		/**< Transmit/recive buffer pointer register*/
 535:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TRBSR;			/**< Transmit/receive buffer status register*/
 536:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  TRBSCR;		/**< Transmit/receive buffer status clear register*/
 537:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTR;			/**< Receive FIFO output register*/
 538:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTDR;			/**< Receive FIFO debug output register*/
 539:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED3[23];
 540:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  IN[32];		/**< Transmit FIFO input register*/
 541:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_t;
 542:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 543:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 544:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard end*/
 545:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 546:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   #pragma pop
 547:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 548:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   #pragma warning restore
 549:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 550:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 551:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 552:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * API PROTOTYPES
 553:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  ******************************************************************************/
 554:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 555:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #ifdef __cplusplus
 556:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** extern "C" {
 557:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 558:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 559:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsModuleValid(const XMC_USIC_t *const module)
 560:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 561:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   bool tmp;
 562:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 563:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   tmp = (module == XMC_USIC0);
 564:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 565:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC1);
 566:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 567:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 568:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC2);
 569:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 570:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 571:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return tmp;
 572:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 573:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 574:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsChannelValid(const XMC_USIC_CH_t *const channel)
 575:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 576:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   bool tmp;
 577:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 578:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   tmp = ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1));
 579:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 580:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1));
 581:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 582:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 583:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1));
 584:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 585:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 586:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return tmp;
 587:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 588:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 589:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /* Common APIs */
 590:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 591:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 592:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 593:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 594:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 595:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
 596:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 597:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables the USIC module.\n\n
 598:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables the clock for the USIC module by following the
 599:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * clock enabling sequence for the selected device.
 600:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 601:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 602:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 603:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 604:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Enable(XMC_USIC_t *const usic);
 605:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 606:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 607:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 608:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 609:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 610:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 611:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables the USIC module.\n\n
 612:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables the clock for the USIC module by following the clock
 613:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * disabling sequence for the selected device.
 614:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 615:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 616:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 617:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 618:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Disable(XMC_USIC_t *const usic);
 619:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 620:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 621:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 622:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 623:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 624:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 625:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables the USIC channel. \n\n
 626:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel is enabled by setting the module enable bit in KSCFG register bitfield MODEN.
 627:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * On enabling, the channel is set to idle mode.
 628:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 629:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 630:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 631:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 632:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel);
 633:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 634:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 635:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 636:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 637:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 638:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 639:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables the USIC channel.\n\n
 640:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel is disabled by setting the module enable bit(MDEN) to 0 in the register KSCFG.
 641:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 642:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 643:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 644:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 645:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel);
 646:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 647:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 648:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 649:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 650:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. \b Range: minimum value = 100, maximum value depends on the perip
 651:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/(10
 652:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 653:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 654:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 655:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 656:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 657:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 658:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 659:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 660:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel. \n\n
 661:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 662:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 663:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * baudrate.
 664:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 665:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 666:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 667:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 668:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 669:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 670:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 671:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 672:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 673:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. Only integer dividers of peripheral clock are achievable
 674:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 675:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *            This can be related to the number of samples for each logic state of the data signal.
 676:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *            \b Range: 1 to 32. Value should be chosen based on the protocol used.
 677:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 678:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *      \b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 679:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *            @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 680:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 681:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 682:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel using the integer divider which restrics the achieva
 683:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 684:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 685:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * baudrate.
 686:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 687:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 688:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 689:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 690:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t 
 691:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 692:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 693:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 694:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 695:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 696:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel for .\n
 697:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 698:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 699:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Calculates the current used baudrate (fCTQIN) of a USIC channel. \n\n
 700:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png	 
 701:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png	 
 702:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 703:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 704:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 705:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 706:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetBaudrate(XMC_USIC_CH_t *const channel);
 707:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 708:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 709:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 710:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 711:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel.\n
 712:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 713:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 714:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Calculates the current used SCLK frequency of a USIC channel. \n\n
 715:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png	 
 716:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png	 
 717:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 718:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 719:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 720:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 721:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetSCLKFrequency(XMC_USIC_CH_t *const channel);
 722:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 723:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 724:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 725:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 726:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel.\n
 727:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 728:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 729:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Calculates the current used MCLK frequency of a USIC channel. \n\n
 730:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png	 
 731:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png	 
 732:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 733:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 734:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 735:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 736:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetMCLKFrequency(XMC_USIC_CH_t *const channel);
 737:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 738:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 739:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 740:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 741:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  pdiv Desired divider for the external frequency input. \b Range: minimum value = 1, maxi
 742:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 743:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 744:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 745:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Selects which edge of the synchronized(and optionally filtered) signal 
 746:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *                          output DXnT of the input stage.
 747:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 748:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 749:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 750:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 751:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables the external frequency input for the Baudrate Generator and configures the divider, over
 752:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * the combination mode of the USIC channel. \n\n
 753:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 754:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 755:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBRGInputClockSource(), XMC_USIC_CH_SetInputTriggerCombinationMode() \n\n\n
 756:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 757:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 758:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 		                                         const uint16_t pdiv,
 759:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 												 const uint32_t oversampling,
 760:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 												 const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode);
 761:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 762:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 763:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 764:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 765:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 766:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 767:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  source Input source select for the input stage. The table below maps the enum value with
 768:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 769:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 770:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * </tr></table>
 771:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 772:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 773:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 774:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Selects the data source for USIC input stage.\n\n
 775:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 776:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * like DX0CR, DX1CR etc. 
 777:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *  
 778:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 779:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableIn
 780:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 781:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 782:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INP
 783:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 784:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 785:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 786:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 787:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 788:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 789:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 790:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 791:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 792:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 793:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 794:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 795:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is controlled by the
 796:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * protocol pre-processor. \n\n
 797:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 798:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 799:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToDataInput()\n\n\n
 800:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 801:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_USIC_CH_t *const channel, const XMC
 802:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 803:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_INSW_Msk;
 804:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 805:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 806:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 807:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 808:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 809:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 810:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 811:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 812:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 813:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 814:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is connected to
 815:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * the selected data input line. \n\n
 816:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 817:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * This setting is used
 818:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * if the signals are directly derived from an input
 819:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * pin without treatment by the protocol preprocessor.
 820:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 821:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToPPP()\n\n\n
 822:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 823:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToDataInput(XMC_USIC_CH_t *const channel, con
 824:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 825:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_INSW_Msk;
 826:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 827:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 828:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 829:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 830:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 831:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 832:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 833:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 834:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 835:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 836:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables input inversion for USIC channel input data signal. \n\n
 837:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 838:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Polarity of the input source can be changed to provide inverted data input.
 839:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 840:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputInversion()\n\n\n
 841:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 842:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_
 843:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 844:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 845:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 846:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 847:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 848:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 849:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 850:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 851:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 852:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 853:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 854:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 855:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables input inversion for USIC channel. \n\n
 856:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 857:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Resets the input data polarity for the USIC channel input data signal.
 858:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 859:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion()\n\n\n
 860:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 861:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC
 862:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 863:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DPOL_Msk;
 864:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 865:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 866:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 867:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 868:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 869:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 870:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 871:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 872:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables delay compensation. \n\n
 873:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 874:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Delay compensation can be applied to the receive path.
 875:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 876:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableDelayCompensation()\n\n\n
 877:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 878:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableDelayCompensation(XMC_USIC_CH_t *const channel)
 879:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 880:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] |= USIC_CH_DX1CR_DCEN_Msk;
 881:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 882:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 883:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 884:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 885:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 886:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 887:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 888:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 889:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables delay compensation.. \n\n
 890:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 891:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 892:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableDelayCompensation()\n\n\n
 893:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 894:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableDelayCompensation(XMC_USIC_CH_t *const channel)
 895:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 896:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] &=(uint32_t)~USIC_CH_DX1CR_DCEN_Msk;
 897:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 898:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 899:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 900:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 901:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 902:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 903:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 904:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 905:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 906:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 907:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables the input digital filter for USIC channel input data signal. \n\n
 908:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be digitally filtered.
 909:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 910:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 911:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 912:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 913:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_U
 914:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 915:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 916:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 917:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 918:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 919:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 920:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 921:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 922:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 923:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 924:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 925:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables the input digital filter for USIC channel input data signal. \n\n
 926:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be digitally filtered.
 927:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 928:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 929:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 930:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 931:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_
 932:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 933:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DFEN_Msk;
 934:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 935:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 936:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 937:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 938:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 939:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 940:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 941:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 942:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 943:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables input synchronization for the USIC channel input data signal. \n\n
 944:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be synchronized with fPERIPH.
 945:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * A noisy signal can be synchronized and filtered by enabling the digital filter.
 946:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 947:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 948:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 949:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 950:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_IN
 951:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 952:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 953:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 954:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 955:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 956:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 957:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 958:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 959:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 960:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 961:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 962:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables input synchronization for the USIC channel input data signal. \n\n
 963:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be synchronized.
 964:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 965:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 966:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_DisableInputDigitalFilter() \n\n\n
 967:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 968:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_I
 969:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 970:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DSEN_Msk;
 971:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 972:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 973:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 974:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 975:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 976:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 977:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  sampling_freq Sampling frequency value of type \a XMC_USIC_CH_INPUT_SAMPLING_FREQ_t.
 978:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 979:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 980:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 981:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets sampling frequency for USIC channel input data signal. \n\n
 982:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 983:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 984:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 985:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 986:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSamplingFreq(XMC_USIC_CH_t *const channel,
 987:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_t input,
 988:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_SAMPLING_FREQ_t sampling_fr
 989:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 990:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_SFSEL_Msk)) |
 991:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)sampling_freq);
 992:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 993:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 994:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 995:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 996:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 997:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 998:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 999:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Combination mode value of type \a XMC_USIC_CH_INPUT_COMBINATION_MODE_t.
1000:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1001:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1002:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1003:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Selects which edge of the synchronized signal DXnS activates the trigger output DXnT of the inpu
1004:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1005:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1006:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
1007:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1008:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
1009:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_t input,
1010:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_COMBINATION_MODE_
1011:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1012:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
1013:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
1014:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1015:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1016:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1017:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1018:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1019:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  clock_source clock source for the BRG.
1020:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1021:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1022:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1023:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the clock source for the BRG. \n\n
1024:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1025:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1026:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
1027:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1028:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USI
1029:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1030:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
1031:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1032:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1033:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1034:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1035:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1036:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1037:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1038:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1039:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1040:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1041:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit buffer. \n\n
1042:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in TBUF[0U].
1043:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1044:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1045:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1046:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUFTCI() \n\n\n
1047:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1048:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUF(XMC_USIC_CH_t *const channel, const uint16_t data)
1049:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1050:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TBUF[0U] = data;
1051:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1052:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1053:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1054:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1055:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1056:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1057:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param transmit_control_information transmit control information to be configured while transmit
1058:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31.
1059:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1060:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1061:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1062:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit buffer in a control mode. \n\n
1063:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the respective control mode is enabled , this API can be used.
1064:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1065:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1066:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1067:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUF() \n\n\n
1068:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1069:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
1070:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                              const uint16_t data,
1071:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                              const uint32_t transmit_control_information)
1072:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1073:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TBUF[transmit_control_information] = data;
1074:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1075:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1076:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1077:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1078:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1079:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1080:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					   \b Range: minimum= 1, maximum= 16. \n
1081:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					   e.g: For word length of 8, \a word_length should be provided as 8.
1082:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1083:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1084:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1085:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1086:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1087:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1088:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1089:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1090:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1091:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
1092:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1093:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
1094:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                   (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
1095:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1096:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1097:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1098:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1099:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1100:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1101:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *             \b Range: minimum= 1, maximum= 16. \n
1102:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *             e.g: For word length of 8, \a word_length should be provided as 8.
1103:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1104:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1105:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1106:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1107:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1108:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1109:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1110:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1111:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1112:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetShiftDirection(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_
1113:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1114:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_SDIR_Msk)) | (uint32_t)shift_direction;
1115:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1116:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1117:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1118:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1119:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1120:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1121:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Captured counter value 
1122:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1123:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1124:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1125:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The value of the counter is captured if one of the trigger signals DX0T or DX1T are activated by
1126:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1127:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetCaptureTimerValue(const XMC_USIC_CH_t *const channel)
1128:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1129:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return channel->CMTR;
1130:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1131:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1132:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1133:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1134:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1135:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  mode divider mode ::XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t \n
1136:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  step divider \n
1137:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL resulting divider = 1023 - step \n
1138:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL resulting divider = 1023 / step \n
1139:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1140:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1141:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1142:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1143:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The fractional divider generates its output frequency fFD by either dividing the input frequency
1144:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1145:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1146:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFractionalDivider(XMC_USIC_CH_t *const channel, const XMC_USIC_
1147:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1148:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->FDR = mode | step;
1149:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1150:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1151:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1152:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1153:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1154:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  frame_length Number of bits in a frame. \n
1155:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						\b Range: minimum= 1, maximum= 0x3f. The maximum value for fixed frame size is 0x3f. \n
1156:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						e.g: For a frame length of 16, \a frame_length should be provided as 16.
1157:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1158:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1159:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1160:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Define the data frame length.\n\n
1161:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Set the number of bits to be serially transmitted in a frame.
1162:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The frame length should be multiples of word length. If the value is set to 0x40, the frame leng
1163:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * has to be controlled explicitly. 
1164:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1165:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1166:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1167:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1168:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
1169:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1170:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
1171:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                   (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
1172:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1173:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1174:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1175:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1176:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1177:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be enabled. Use @ref XMC_USIC_CH_EVENT_t for the 
1178:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1179:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1180:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1181:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1182:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1183:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enable the channel interrupt events.\n\n
1184:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Common channel events related to serial communication can be configured using this API.
1185:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1186:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1187:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1188:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1189:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1190:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1191:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1192:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1193:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->CCR |= event;
1194:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1195:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1196:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1197:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1198:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1199:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be disabled. Use @ref XMC_USIC_CH_EVENT_t for the
1200:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1201:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1202:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1203:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1204:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1205:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disable the channel interrupt events. \n\n
1206:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1207:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1208:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1209:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1210:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1211:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
1212:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1213:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1214:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->CCR &= (uint32_t)~event;
1215:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1216:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1217:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1218:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1219:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1220:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
1221:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
1222:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
1223:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param service_request Service request number.\n
1224:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1225:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1226:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1227:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1228:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the interrupt node for USIC channel events. \n\n
1229:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
1230:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
1231:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
1232:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1233:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1234:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent() \n\n\n
1235:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1236:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1237:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                          const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
1238:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                          const uint32_t service_request);
1239:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1240:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1241:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1242:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1243:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Stataus @ref XMC_USIC_CH_TBUF_STATUS_IDLE if transmit buffer is free,
1244:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *                 @ref XMC_USIC_CH_TBUF_STATUS_BUSY if transmit buffer is busy.
1245:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1246:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1247:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Gets transmit buffer status. \n\n
1248:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Status indicates whether the transmit buffer is free, or busy transmitting data.
1249:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The status depends on the value of TDV flag in TCSR register.
1250:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * This status can be used while transmitting data. Transmit data when the transmit buffer
1251:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * status is @ref XMC_USIC_CH_TBUF_STATUS_IDLE.
1252:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1253:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1254:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetDataOutputMode() \n\n\n
1255:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1256:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const 
1257:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1258:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 393              	 .loc 2 1258 0 discriminator 1
 394 000a 836B     	 ldr r3,[r0,#56]
 395              	.LBE11:
 396              	.LBE10:
 241:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   {
 242:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) == (uint32_t)XMC_USIC_CH_TBUF_STAT
 397              	 .loc 1 242 0 discriminator 1
 398 000c 13F0800F 	 tst r3,#128
 399 0010 FBD1     	 bne .L33
 400              	.LVL40:
 401              	.LBB12:
 402              	.LBB13:
 403              	 .file 3 "C:/Files/Projects/Git/XMCLib/inc/xmc_i2s.h"
   1:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
   2:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @file xmc_i2s.h
   3:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @date 2019-05-07
   4:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
   5:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @cond
   6:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  **************************************************************************************************
   7:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
   9:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * All rights reserved.
  11:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
  12:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * following conditions are met:
  14:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
  15:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * disclaimer.
  17:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
  18:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.
  20:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
  21:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * products derived from this software without specific prior written permission.
  23:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
  24:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  31:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
  32:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Infineon Technologies AG dave@infineon.com).
  34:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  **************************************************************************************************
  35:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
  36:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Change History
  37:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * --------------
  38:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
  39:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * 2015-08-21:
  40:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *     - Initial <br>
  41:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
  42:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * 2015-08-24:
  43:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_I2S_CH_DisableDelayCompensation()
  44:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *       XMC_I2S_CH_EnableDelayCompensation() <br>
  45:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
  46:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * 2015-09-01:
  47:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *     - Modified XMC_I2S_CH_SetInputSource() for avoiding complete DXCR register overwriting. <br>
  48:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *     - Modified XMC_I2S_CH_EVENT_t enum for supporting XMC_I2S_CH_EnableEvent() and XMC_I2S_CH_Di
  49:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *       for supporting multiple events configuration <br>
  50:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
  51:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * 2015-09-14:
  52:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *     - Modified XMC_I2S_CH_SetSystemWordLength for supporting up to 63 system word length<br>
  53:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
  54:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * 2016-05-20:
  55:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *     - Added XMC_I2S_CH_EnableDataTransmission() and XMC_I2S_CH_DisableDataTransmission()
  56:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
  57:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * 2016-06-30:
  58:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *     - Documentation updates.
  59:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
  60:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * 2019-05-07:
  61:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *     - Added normal_divider_mode to XMC_I2S_CH_CONFIG_t configuration structure.
  62:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *       It selects normal divider mode for baudrate generator instead of default fractional divide
  63:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *     - Added XMC_I2S_CH_SetBaudrateEx()
  64:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
  65:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
  66:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @endcond
  67:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
  68:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
  69:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
  70:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** #ifndef XMC_I2S_H_
  71:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** #define XMC_I2S_H_
  72:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
  73:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**************************************************************************************************
  74:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * HEADER FILES
  75:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  **************************************************************************************************
  76:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** #include "xmc_usic.h"
  77:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
  78:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
  79:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @addtogroup XMClib XMC Peripheral Library
  80:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @{
  81:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
  82:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
  83:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
  84:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @addtogroup I2S
  85:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @brief (IIS) driver for the XMC microcontroller family.
  86:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
  87:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * USIC IIS Features: <br>
  88:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @{
  89:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
  90:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
  91:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /*******************************************************************************
  92:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * MACROS
  93:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *******************************************************************************/
  94:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
  95:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** #if defined(USIC0)
  96:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** #define XMC_I2S0_CH0 XMC_USIC0_CH0                   /**< USIC0 channel 0 base address */
  97:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** #define XMC_I2S0_CH1 XMC_USIC0_CH1                   /**< USIC0 channel 1 base address */
  98:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** #endif
  99:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 100:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** #if defined(USIC1)
 101:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** #define XMC_I2S1_CH0 XMC_USIC1_CH0                   /**< USIC1 channel 0 base address */
 102:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** #define XMC_I2S1_CH1 XMC_USIC1_CH1                   /**< USIC1 channel 1 base address */
 103:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** #endif
 104:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 105:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** #if defined(USIC2)
 106:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** #define XMC_I2S2_CH0 XMC_USIC2_CH0                   /**< USIC2 channel 0 base address */
 107:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** #define XMC_I2S2_CH1 XMC_USIC2_CH1                   /**< USIC2 channel 1 base address */
 108:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** #endif
 109:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /*******************************************************************************
 110:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * ENUMS
 111:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *******************************************************************************/
 112:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 113:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 114:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @brief I2S Status
 115:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
 116:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** typedef enum XMC_I2S_CH_STATUS
 117:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** {
 118:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_STATUS_OK,      /**< Status OK */
 119:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_STATUS_ERROR,   /**< Status ERROR */
 120:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_STATUS_BUSY     /**< Status BUSY */
 121:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** } XMC_I2S_CH_STATUS_t;
 122:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 123:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 124:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @brief I2S status flag
 125:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
 126:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** typedef enum XMC_I2S_CH_STATUS_FLAG
 127:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** {
 128:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_STATUS_FLAG_WORD_ADDRESS = USIC_CH_PSR_IISMode_WA_Msk,                     /**< Word A
 129:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_STATUS_FLAG_DX2S = USIC_CH_PSR_IISMode_DX2S_Msk,                           /**< Status
 130:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_STATUS_FLAG_DX2T_EVENT_DETECTED = USIC_CH_PSR_IISMode_DX2TEV_Msk,          /**< Status
 131:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_STATUS_FLAG_WA_FALLING_EDGE_EVENT = USIC_CH_PSR_IISMode_WAFE_Msk,          /**< Fallin
 132:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****                                                                                              signal
 133:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_STATUS_FLAG_WA_RISING_EDGE_EVENT = USIC_CH_PSR_IISMode_WARE_Msk,           /**< Rising
 134:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****                                                                                              signal
 135:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_STATUS_FLAG_WA_GENERATION_END = USIC_CH_PSR_IISMode_END_Msk,               /**< The WA
 136:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_STATUS_FLAG_RECEIVER_START_INDICATION = USIC_CH_PSR_IISMode_RSIF_Msk,      /**< Receiv
 137:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_STATUS_FLAG_DATA_LOST_INDICATION = USIC_CH_PSR_IISMode_DLIF_Msk,           /**< Data l
 138:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION = USIC_CH_PSR_IISMode_TSIF_Msk,      /**< Transm
 139:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION = USIC_CH_PSR_IISMode_TBIF_Msk,     /**< Transm
 140:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_STATUS_FLAG_RECEIVE_INDICATION = USIC_CH_PSR_IISMode_RIF_Msk,              /**< Receiv
 141:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION = USIC_CH_PSR_IISMode_AIF_Msk,  /**< Altern
 142:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION = USIC_CH_PSR_IISMode_BRGIF_Msk /**< Baud r
 143:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** } XMC_I2S_CH_STATUS_FLAG_t;
 144:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 145:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 146:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *  @brief I2S Baudrate Generator shift clock output
 147:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** */
 148:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** typedef enum XMC_I2S_CH_BRG_SHIFT_CLOCK_OUTPUT
 149:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** {
 150:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK, /**< Baudrate G
 151:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1  = XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1   /**< Clock obta
 152:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** } XMC_I2S_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 153:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 154:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 155:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *  @brief I2S channel interrupt node pointers
 156:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
 157:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** typedef enum XMC_I2S_CH_INTERRUPT_NODE_POINTER
 158:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** {
 159:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT    = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT
 160:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER   = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT
 161:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_INTERRUPT_NODE_POINTER_RECEIVE           = XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE,
 162:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE = XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNAT
 163:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_INTERRUPT_NODE_POINTER_PROTOCOL          = XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL
 164:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** } XMC_I2S_CH_INTERRUPT_NODE_POINTER_t;
 165:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 166:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 167:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @brief I2S events
 168:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
 169:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** typedef enum XMC_I2S_CH_EVENT
 170:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** {
 171:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk,  /**< Receive start event */
 172:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk,  /**< Data lost event */
 173:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk,  /**< Transmit shift event */
 174:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk,  /**< Transmit buffer event */
 175:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,   /**< Receive event */
 176:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,   /**< Alternate receive event */
 177:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk, /**< Baudrate generator event */
 178:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 179:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_EVENT_WA_FALLING_EDGE     = USIC_CH_PCR_IISMode_WAFEIEN_Msk << 2U,  /**< WA falling ed
 180:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_EVENT_WA_RISING_EDGE      = USIC_CH_PCR_IISMode_WAREIEN_Msk << 2U,  /**< WA rising edg
 181:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_EVENT_WA_GENERATION_END   = USIC_CH_PCR_IISMode_ENDIEN_Msk << 2U,   /**< END event */
 182:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_EVENT_DX2TIEN_ACTIVATED   = USIC_CH_PCR_IISMode_DX2TIEN_Msk << 2U   /**< WA input sign
 183:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** } XMC_I2S_CH_EVENT_t;
 184:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 185:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 186:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @brief Defines the Polarity of the WA in the SELO output lines in relation to the internal WA si
 187:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
 188:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** typedef enum XMC_I2S_CH_WA_POLARITY
 189:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** {
 190:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_WA_POLARITY_DIRECT = 0x0UL,                                    /**< The SELO outputs h
 191:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****                                                                                   as the WA signal 
 192:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_WA_POLARITY_INVERTED = 0x1UL << USIC_CH_PCR_IISMode_SELINV_Pos /**< The SELO outputs h
 193:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****                                                                                  polarity to the WA
 194:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** } XMC_I2S_CH_WA_POLARITY_t;
 195:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 196:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 197:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @brief Defines the Polarity of the WA in the SELO output lines in relation to the internal WA si
 198:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
 199:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** typedef enum XMC_I2S_CH_CHANNEL
 200:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** {
 201:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_CHANNEL_1_LEFT = 0U,  /**< Channel 1 (left) */
 202:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_CHANNEL_2_RIGHT = 1U  /**< Channel 2 (right) */
 203:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** } XMC_I2S_CH_CHANNEL_t;
 204:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 205:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 206:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @brief I2S input stage selection
 207:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
 208:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** typedef enum XMC_I2S_CH_INPUT
 209:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** {
 210:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_INPUT_DIN0 = 0UL,         /**< Data input stage 0 */
 211:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_INPUT_SLAVE_SCLKIN = 1UL, /**< Clock input stage */
 212:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_INPUT_SLAVE_WA = 2UL,     /**< WA input stage */
 213:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** #if UC_FAMILY == XMC1
 214:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_INPUT_DIN1 = 3UL,         /**< Data input stage 1 */
 215:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_INPUT_DIN2 = 4UL,         /**< Data input stage 2 */
 216:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_INPUT_DIN3 = 5UL          /**< Data input stage 3 */
 217:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** #endif
 218:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** } XMC_I2S_CH_INPUT_t;
 219:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 220:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 221:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @brief Defines the I2S bus mode
 222:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
 223:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** typedef enum XMC_I2S_CH_BUS_MODE
 224:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** {
 225:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_BUS_MODE_MASTER, /**< I2S Master */
 226:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_BUS_MODE_SLAVE   /**< I2S Slave */
 227:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** } XMC_I2S_CH_BUS_MODE_t;
 228:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 229:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /*******************************************************************************
 230:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * DATA STRUCTURES
 231:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *******************************************************************************/
 232:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 233:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @brief I2S_CH configuration structure
 234:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
 235:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** typedef struct XMC_I2S_CH_CONFIG
 236:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** {
 237:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   uint32_t baudrate;					             /**< Module baud rate for communication */
 238:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   bool normal_divider_mode;                /**< Selects normal divider mode for baudrate generator 
 239:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   uint8_t data_bits;                       /**< Data word length. A data frame can consists of seve
 240:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****                                                 Value configured as USIC channel word length. \n
 241:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****                                                   \b Range: minimum= 1, maximum= 16*/
 242:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   uint8_t frame_length;                    /**< Number of data bits transferred after a change of s
 243:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****                                                 Configured as USIC channel frame length. \n
 244:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****                                                   \b Range: minimum= 1, maximum= 63*/
 245:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   uint8_t data_delayed_sclk_periods;       /**< Data delay defined in sclk periods */
 246:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_WA_POLARITY_t wa_inversion;   /**< Enable inversion of Slave select signal relative to
 247:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_BUS_MODE_t	bus_mode;          /**< Bus mode MASTER/SLAVE */
 248:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** } XMC_I2S_CH_CONFIG_t;
 249:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 250:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /*******************************************************************************
 251:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * API PROTOTYPES
 252:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *******************************************************************************/
 253:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 254:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** #ifdef __cplusplus
 255:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** extern "C" {
 256:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** #endif
 257:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 258:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 259:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 260:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *          \b Range: @ref XMC_I2S0_CH0, XMC_I2S0_CH1,XMC_I2S1_CH0, XMC_I2S1_CH1,XMC_I2S2_CH0, XMC_
 261:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param config Constant pointer to I2S configuration structure of type @ref XMC_I2S_CH_CONFIG_t.
 262:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @return XMC_I2S_CH_STATUS_t Status of initializing the USIC channel for I2S protocol.\n
 263:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *          \b Range: @ref XMC_I2S_CH_STATUS_OK if initialization is successful.\n
 264:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *                    @ref XMC_I2S_CH_STATUS_ERROR if configuration of baudrate failed.
 265:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 266:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Description</b><br>
 267:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Initializes the USIC channel for I2S protocol.\n\n
 268:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * During the initialization, USIC channel is enabled and baudrate is configured.
 269:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * After each change of the WA signal, a complete data frame is intended to be transferred (frame l
 270:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * The number of data bits transferred after a change of signal WA is defined by config->frame_leng
 271:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * A data frame can consist of several data words with a data word length defined by config->data_b
 272:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * The changes of signal WA define the system word length as the number of SCLK cycles between two 
 273:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * The system word length is set by default to the frame length defined by config->frame_length.
 274:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 275:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * XMC_I2S_CH_Start() should be invoked after the initialization to enable the channel.
 276:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 277:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Related APIs:</b><BR>
 278:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * XMC_I2S_CH_Start(), XMC_I2S_CH_Stop(), XMC_I2S_CH_Transmit(), XMC_I2S_CH_SetSystemWordLength()\n
 279:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
 280:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** void XMC_I2S_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2S_CH_CONFIG_t *const config);
 281:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 282:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 283:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 284:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 285:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @return None
 286:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 287:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Description:</b><br>
 288:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Set the selected USIC channel to operate in I2S mode, by setting CCR.MODE bits.\n\n
 289:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * It should be executed after XMC_I2S_CH_Init() during initialization. By invoking XMC_I2S_CH_Stop
 290:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * to IDLE state. Call XMC_I2S_CH_Start() to set the I2S mode again, as needed later in the program
 291:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 292:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Related APIs:</b><BR>
 293:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * XMC_I2S_CH_Init(), XMC_I2S_CH_Stop()
 294:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
 295:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** __STATIC_INLINE void XMC_I2S_CH_Start(XMC_USIC_CH_t *const channel)
 296:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** {
 297:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   /* USIC channel in I2S mode */
 298:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2S);
 299:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** }
 300:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 301:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 302:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 303:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 304:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @return XMC_I2S_CH_STATUS_t Status of the I2S driver after the request for stopping is processed
 305:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *        XMC_I2S_CH_STATUS_OK- If the USIC channel is successfully put to IDLE mode. \n
 306:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *        XMC_I2S_CH_STATUS_BUSY- If the USIC channel is busy transmitting data.
 307:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 308:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Description:</b><br>
 309:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Set the selected I2S channel to IDLE mode, by clearing CCR.MODE bits.\n\n
 310:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * After calling XMC_I2S_CH_Stop, channel is IDLE mode. So no communication is supported. XMC_I2S_C
 311:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * invoked to start the communication again.
 312:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 313:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Related APIs:</b><BR>
 314:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * XMC_I2S_CH_Start()
 315:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
 316:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** XMC_I2S_CH_STATUS_t XMC_I2S_CH_Stop(XMC_USIC_CH_t *const channel);
 317:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 318:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 319:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 320:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param rate Bus speed in bits per second
 321:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 322:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @return XMC_I2S_CH_STATUS_t Status of the I2S driver after the request for setting baudrate is p
 323:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *        XMC_I2S_CH_STATUS_OK- If the baudrate is successfully changed. \n
 324:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *        XMC_I2S_CH_STATUS_ERROR- If the new baudrate value is out of range.
 325:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 326:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Description:</b><br>
 327:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Sets the bus speed in bits per second
 328:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 329:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Related APIs:</b><BR>
 330:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * XMC_I2S_CH_Init(), XMC_I2S_CH_Stop()
 331:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
 332:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** XMC_I2S_CH_STATUS_t XMC_I2S_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate);
 333:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 334:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 335:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 336:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param rate Bus speed in bits per second
 337:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param normal_divider_mode Selects normal divider mode for baudrate generator instead of default
 338:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 339:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @return XMC_I2S_CH_STATUS_t Status of the I2S driver after the request for setting baudrate is p
 340:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *        XMC_I2S_CH_STATUS_OK- If the baudrate is successfully changed. \n
 341:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *        XMC_I2S_CH_STATUS_ERROR- If the new baudrate value is out of range.
 342:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 343:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Description:</b><br>
 344:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Sets the bus speed in bits per second
 345:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 346:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Related APIs:</b><BR>
 347:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * XMC_I2S_CH_Init(), XMC_I2S_CH_Stop()
 348:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
 349:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** XMC_I2S_CH_STATUS_t XMC_I2S_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, const uint32_t rate, boo
 350:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 351:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 352:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 353:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param sclk_cycles_system_word_length system word length in terms of sclk clock cycles.
 354:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 355:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @return None
 356:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 357:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Description:</b><br>
 358:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Configures the system word length by setting BRG.DCTQ bit field.\n\n
 359:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * This value has to be always higher than 1U and lower than the data with (SCTR.FLE)
 360:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 361:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
 362:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** void XMC_I2S_CH_SetSystemWordLength(XMC_USIC_CH_t *const channel,uint32_t sclk_cycles_system_word_l
 363:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 364:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 365:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 366:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param data Data to be transmitted
 367:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param channel_number Communication output channel of the I2S, based on this channel selection T
 368:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *             Refer @ref XMC_I2S_CH_CHANNEL_t for valid values.
 369:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 370:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @return None
 371:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 372:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Description:</b><br>
 373:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Puts the data into FIFO, if FIFO mode is enabled or else into standard buffer, by setting the pr
 374:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * TCI(Transmit Control Information) allows dynamic control of output channel during data transfers
 375:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * update, TCSR.WAMD(Automatic WA mode) will be enabled during the initialization using XMC_I2S_CH_
 376:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 377:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 378:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Related APIs:</b><BR>
 379:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * XMC_I2S_CH_Receive()
 380:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
 381:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** void XMC_I2S_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_I2S_CH_CHANNE
 382:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 383:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 384:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 385:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param channel_number Communication output channel of the I2S, based on this mode TCI(Transmit c
 386:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *             Refer @ref XMC_I2S_CH_CHANNEL_t for valid values.
 387:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 388:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @return None
 389:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 390:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Description:</b><br>
 391:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Transmits a dummy data(FFFFH) to provide clock for slave and receives the data from the slave.\n
 392:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * XMC_I2S_CH_Receive() receives the data and places it into buffer based on the FIFO selection. Af
 393:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * XMC_I2S_CH_GetReceivedData() can be invoked to read the data from the buffers.
 394:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 395:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Related APIs:</b><BR>
 396:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * XMC_I2S_CH_GetReceivedData()
 397:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
 398:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** __STATIC_INLINE void XMC_I2S_CH_Receive(XMC_USIC_CH_t *const channel, const XMC_I2S_CH_CHANNEL_t ch
 399:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** {
 400:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   /* Transmit dummy data */
 401:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   XMC_I2S_CH_Transmit(channel, (uint16_t)0xffffU , channel_number);
 402:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** }
 403:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 404:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 405:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 406:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 407:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @return uint16_t Data read from the receive buffer.
 408:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 409:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Description:</b><br>
 410:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Reads data from the receive buffer based on the FIFO selection.\n\n
 411:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Invocation of XMC_I2S_CH_Receive() receives the data and place it into receive buffer. After rec
 412:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * XMC_I2S_CH_GetReceivedData() can be used to read the data from the buffer.
 413:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 414:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Related APIs:</b><BR>
 415:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * XMC_I2S_CH_Receive()
 416:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
 417:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** uint16_t XMC_I2S_CH_GetReceivedData(XMC_USIC_CH_t *const channel);
 418:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 419:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 420:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 421:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 422:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @return None
 423:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 424:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Description:</b><br>
 425:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Set the order of data transfer from LSB to MSB, by clearing SCTR.SDIR bit.\n\n
 426:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * This is typically based on the slave settings. Invoke XMC_I2S_CH_SetBitOrderLsbFirst() to set di
 427:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * the program.
 428:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 429:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Related APIs:</b><BR>
 430:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * XMC_I2S_CH_SetBitOrderMsbFirst()
 431:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
 432:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** __STATIC_INLINE void XMC_I2S_CH_SetBitOrderLsbFirst(XMC_USIC_CH_t *const channel)
 433:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** {
 434:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   channel->SCTR &= (uint32_t)~USIC_CH_SCTR_SDIR_Msk;
 435:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** }
 436:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 437:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 438:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 439:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 440:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @return None
 441:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 442:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Description:</b><br>
 443:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Set the order of data transfer from MSB to LSB, by setting SCTR.SDIR bit.\n\n
 444:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * This is typically based on the slave settings. This is not set during XMC_I2S_CH_Init().
 445:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Invoke XMC_I2S_CH_SetBitOrderMsbFirst() to set direction as needed in the program.
 446:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 447:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Related APIs:</b><BR>
 448:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * XMC_I2S_CH_SetBitOrderLsbFirst()
 449:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
 450:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** __STATIC_INLINE void XMC_I2S_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
 451:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** {
 452:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 453:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** }
 454:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 455:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 456:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 457:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param event Protocol events which have to be enabled.
 458:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *              Refer @ XMC_I2S_CH_EVENT_t for valid values. <b>OR</b> combinations of these enum i
 459:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *              as input.
 460:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 461:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @return None
 462:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 463:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Description:</b><br>
 464:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Enables the I2S protocol specific events, by configuring PCR register.\n\n
 465:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Events can be enabled as needed using XMC_I2S_CH_EnableEvent().
 466:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * XMC_I2S_CH_DisableEvent() can be used to disable the events.
 467:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 468:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Related APIs:</b><BR>
 469:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * XMC_I2S_CH_DisableEvent()
 470:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
 471:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** void XMC_I2S_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 472:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 473:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 474:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 475:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param event Protocol events which have to be disabled.
 476:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *              Refer @ XMC_I2S_CH_EVENT_t for valid values. <b>OR</b> combinations of these enum i
 477:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *              as input.
 478:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 479:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @return None
 480:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 481:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Description:</b><br>
 482:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Disables the I2S protocol specific events, by configuring PCR register.\n\n
 483:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * After disabling the events, XMC_I2S_CH_EnableEvent() has to be invoked to re-enable the events.
 484:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 485:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Related APIs:</b><BR>
 486:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * XMC_I2S_CH_EnableEvent()
 487:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
 488:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** void XMC_I2S_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 489:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 490:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 491:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 492:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 493:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @return uint32_t Status of I2S protocol events.
 494:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 495:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Description:</b><br>
 496:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Returns the status of the events, by reading PSR register.\n\n
 497:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * This indicates the status of the all the events, for I2S communication.
 498:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 499:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Related APIs:</b><BR>
 500:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * XMC_I2S_CH_ClearStatusFlag()
 501:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
 502:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** __STATIC_INLINE uint32_t XMC_I2S_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
 503:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** {
 504:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   return channel->PSR_IISMode;
 505:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** }
 506:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** 
 507:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** /**
 508:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 509:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @param flag Protocol event status to be cleared for detection of next occurence.
 510:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *              Refer @ XMC_I2S_CH_STATUS_FLAG_t for valid values. <b>OR</b> combinations of these 
 511:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *              as input.
 512:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * @return None
 513:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 514:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Description:</b><br>
 515:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * Clears the events specified, by setting PSCR register.\n\n
 516:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * During communication the events occurred have to be cleared to detect their next occurence.\n
 517:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * e.g: During transmission Transmit buffer event occurs to indicating data word transfer has start
 518:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *       event has to be cleared after transmission of each data word. Otherwise next event cannot 
 519:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  *
 520:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * \par<b>Related APIs:</b><BR>
 521:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  * XMC_I2S_CH_GetStatusFlag()
 522:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****  */
 523:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** __STATIC_INLINE void XMC_I2S_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
 524:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h **** {
 525:C:/Files/Projects/Git/XMCLib/inc\xmc_i2s.h ****   channel->PSCR |= flag;
 404              	 .loc 3 525 0
 405 0012 C36C     	 ldr r3,[r0,#76]
 406 0014 43F40053 	 orr r3,r3,#8192
 407 0018 C364     	 str r3,[r0,#76]
 408              	.LBE13:
 409              	.LBE12:
 243:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     {
 244:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     }
 245:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 246:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     XMC_I2S_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2S_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 247:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 248:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     channel->TBUF[(uint32_t)channel_number << 4] = data;
 410              	 .loc 1 248 0
 411 001a 1201     	 lsls r2,r2,#4
 412              	.LVL41:
 413 001c 2032     	 adds r2,r2,#32
 414 001e 40F82210 	 str r1,[r0,r2,lsl#2]
 415 0022 7047     	 bx lr
 416              	.LVL42:
 417              	.L30:
 249:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   }
 250:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   else
 251:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   {
 252:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     channel->IN[(uint32_t)channel_number << 4] = data;
 418              	 .loc 1 252 0
 419 0024 1201     	 lsls r2,r2,#4
 420              	.LVL43:
 421 0026 6032     	 adds r2,r2,#96
 422 0028 40F82210 	 str r1,[r0,r2,lsl#2]
 423 002c 7047     	 bx lr
 424              	 .cfi_endproc
 425              	.LFE262:
 427 002e 00BF     	 .section .text.XMC_I2S_CH_GetReceivedData,"ax",%progbits
 428              	 .align 2
 429              	 .global XMC_I2S_CH_GetReceivedData
 430              	 .thumb
 431              	 .thumb_func
 433              	XMC_I2S_CH_GetReceivedData:
 434              	.LFB263:
 253:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   }
 254:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** }
 255:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 256:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** /* Reads the data from the buffers based on the FIFO mode selection. */
 257:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** uint16_t XMC_I2S_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
 258:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** {
 435              	 .loc 1 258 0
 436              	 .cfi_startproc
 437              	 
 438              	 
 439              	 
 440              	.LVL44:
 259:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   uint16_t retval;
 260:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 261:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   /* Check FIFO size */
 262:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 441              	 .loc 1 262 0
 442 0000 D0F80C31 	 ldr r3,[r0,#268]
 443 0004 13F0E06F 	 tst r3,#117440512
 263:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   {
 264:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     retval = (uint16_t)channel->RBUF;
 444              	 .loc 1 264 0
 445 0008 0CBF     	 ite eq
 446 000a 406D     	 ldreq r0,[r0,#84]
 447              	.LVL45:
 265:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   }
 266:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   else
 267:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   {
 268:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     retval = (uint16_t)channel->OUTR;
 448              	 .loc 1 268 0
 449 000c D0F81C01 	 ldrne r0,[r0,#284]
 450 0010 80B2     	 uxth r0,r0
 451              	.LVL46:
 269:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   }
 270:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 271:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   return retval;
 272:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** }
 452              	 .loc 1 272 0
 453 0012 7047     	 bx lr
 454              	 .cfi_endproc
 455              	.LFE263:
 457              	 .section .text.XMC_I2S_CH_Stop,"ax",%progbits
 458              	 .align 2
 459              	 .global XMC_I2S_CH_Stop
 460              	 .thumb
 461              	 .thumb_func
 463              	XMC_I2S_CH_Stop:
 464              	.LFB264:
 273:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 274:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** XMC_I2S_CH_STATUS_t XMC_I2S_CH_Stop(XMC_USIC_CH_t *const channel)
 275:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** {
 465              	 .loc 1 275 0
 466              	 .cfi_startproc
 467              	 
 468              	 
 469              	 
 470              	.LVL47:
 471              	.LBB14:
 472              	.LBB15:
 473              	 .loc 2 1258 0
 474 0000 836B     	 ldr r3,[r0,#56]
 475              	.LBE15:
 476              	.LBE14:
 276:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   XMC_I2S_CH_STATUS_t status = XMC_I2S_CH_STATUS_OK;
 277:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 278:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   if (((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) & (uint32_t)XMC_USIC_CH_TBUF_STATUS_B
 477              	 .loc 1 278 0
 478 0002 13F0800F 	 tst r3,#128
 479 0006 05D1     	 bne .L40
 480              	.LVL48:
 481              	.LBB16:
 482              	.LBB17:
1259:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1260:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1261:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1262:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @brief API to get receive buffer status
1263:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1264:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1265:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status of data validity check for RBUF0 and RBUF1. \n
1266:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		   Returned value should be masked with RDV0 and RDV1 bits to know the status. \n
1267:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		   \b Range: @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID0, @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID
1268:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1269:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1270:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Checks if RBUF0 and RBUF1 have valid unread data. \n\n
1271:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * It checks the bits RDV0 and RDV1 of the RBUFSR register.
1272:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Returns the value of RBUFSR masked with bitmasks of RDV0 and RDV1.
1273:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * It can be used to decide whether 2bytes has to be read from RBUF or 1 byte. 
1274:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * If both bitmasks XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 and XMC_USIC_CH_RBUF_STATUS_DATA_VALID1
1275:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * are set, then 2 bytes can be read from RBUF. If only either of them is set, then only one byte
1276:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * can be read from RBUF.
1277:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1278:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1279:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1280:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
1281:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1282:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
1283:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1284:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1285:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1286:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1287:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1288:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1289:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  start_transmision_mode Transmission mode to be enabled. \n
1290:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 								\b Range: @ref XMC_USIC_CH_START_TRANSMISION_DISABLED,
1291:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV, @ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2
1292:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1
1293:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *                              
1294:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1295:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1296:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1297:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Configures data transmission. \n\n
1298:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The configuration affects the data shifted on the DOUT0 pin.
1299:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1300:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1301:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetDataOutputMode() \n\n\n
1302:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1303:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetStartTransmisionMode(XMC_USIC_CH_t *const channel,
1304:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                          const XMC_USIC_CH_START_TRANSMISION_MODE_t
1305:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1306:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~USIC_CH_TCSR_TDEN_Msk)) | (uint32_t)start_transmisio
1307:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1308:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1309:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1310:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1311:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1312:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1313:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  data_output_mode  Data output mode. \n
1314:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL, @ref XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTE
1315:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1316:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1317:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1318:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Configures the mode for data output. \n\n
1319:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel can be configured to shift inverted data or direct data based on the input to the A
1320:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1321:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1322:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1323:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1324:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetDataOutputMode(XMC_USIC_CH_t *const channel,
1325:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                    const XMC_USIC_CH_DATA_OUTPUT_MODE_t data_output
1326:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1327:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_DOCFG_Msk)) | (uint32_t)data_output_mod
1328:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1329:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1330:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1331:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1332:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1333:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1334:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1335:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1336:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables automatic update of frame length. \n\n
1337:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the automatic update of frame length is enabled, frame length is configured based on the 
1338:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], frame length is co
1339:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1340:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * IN[x] register.
1341:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1342:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1343:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1344:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1345:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableFrameLengthControl(XMC_USIC_CH_t *const channel)
1346:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1347:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1348:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_SELMD_Msk |
1349:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_WAMD_Msk |
1350:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_HPCMD_Msk))) |
1351:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                          (uint32_t)USIC_CH_TCSR_FLEMD_Msk;
1352:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1353:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1354:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1355:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1356:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1357:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1358:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1359:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1360:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables automatic update of frame length. \n\n
1361:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When automatic update of frame length is disabled, frame length has to configured explicitly.
1362:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Frame length remains fixed until it is changed again.
1363:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1364:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1365:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_SetFrameLength() \n\n\n
1366:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1367:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableFrameLengthControl(XMC_USIC_CH_t *const channel)
1368:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1369:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_FLEMD_Msk;
1370:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1371:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1372:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1373:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1374:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1375:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1376:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1377:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1378:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is set if DX2T becomes active while TDV = 1. \n\n
1379:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables the transfer trigger unit to set bit TCSR.TE if the trigger signal DX2T becomes active
1380:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * for event driven transfer starts.
1381:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1382:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1383:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTBUFDataValidTrigger()\n\n\n
1384:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1385:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1386:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1387:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_TDVTR_Msk;
1388:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1389:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1390:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1391:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1392:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1393:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1394:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1395:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1396:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables the trigger of TDV depending on DX2T signal. \n\n
1397:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is permanently set.
1398:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1399:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1400:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTBUFDataValidTrigger() \n\n\n
1401:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1402:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1403:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1404:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_TDVTR_Msk;
1405:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1406:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1407:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1408:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1409:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1410:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  service_request_line service request number of the event to be triggered. \n
1411:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 0 to 5.
1412:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1413:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1414:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1415:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Trigger a USIC interrupt service request.\n\n
1416:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the USIC service request is triggered, the NVIC interrupt associated with it will be 
1417:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * generated if enabled. 
1418:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1419:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1420:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1421:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1422:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
1423:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1424:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
1425:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1426:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1427:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1428:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1429:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1430:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  transmit_buffer_status clearing or setting the TDV flag. \n
1431:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1432:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1433:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1434:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1435:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1436:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1437:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1438:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1439:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1440:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH_t *const channel,
1441:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 		                                                 const XMC_USIC_CH_TBUF_STATUS_SET_t transmit_buf
1442:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1443:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)transmit_buffer_status;
1444:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1445:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1446:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1447:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1448:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1449:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  passive_level Value of passive level for the channel. \n
1450:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL0, @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL1
1451:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1452:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1453:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1454:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Set the passive data level of the output signal. \n\n
1455:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the USIC channel transmit stage is idle, the output signal level stays at the 
1456:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * configured passive level.
1457:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1458:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1459:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1460:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1461:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetPassiveDataLevel(XMC_USIC_CH_t *const channel,
1462:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                      const XMC_USIC_CH_PASSIVE_DATA_LEVEL_t passive
1463:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1464:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->SCTR &= (~USIC_CH_SCTR_PDL_Msk);
1465:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->SCTR |= (uint32_t)passive_level;
1466:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1467:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1468:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /* TX FIFO APIs */
1469:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1470:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1471:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1472:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1473:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1474:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1475:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1476:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of transmit FIFO filling level to be considered for generating events. \n
1477:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1478:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1479:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1480:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1481:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Initializes the transmit FIFO. \n\n
1482:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO is a subset of a common FIFO sized 64 words. This FIFO is shared between 2 channel
1483:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1484:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * from where transmit data can be put, for the selected USIC channel. \a size represents the size 
1485:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2. Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A F
1486:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * event is generated when the FIFO filling level falls below the \a limit value.
1487:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1488:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1489:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent(), XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1490:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1491:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
1492:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1493:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1494:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1495:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1496:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1497:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1498:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1499:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1500:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1501:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1502:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1503:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1504:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1505:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1506:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the transmit FIFO. \n\n
1507:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the transmit FIFO. The API shall be used for the 
1508:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * runtime change of transmit FIFO trigger limit. FIFO start position will not be affected on execu
1509:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1510:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1511:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1512:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1513:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1514:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1515:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                             const uint32_t limit);
1516:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1517:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1518:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1519:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1520:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1521:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1522:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1523:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1524:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1525:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1526:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t.
1527:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1528:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation. Events are configured in the TBC
1529:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1530:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1531:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1532:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1533:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1534:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1535:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1536:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1537:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1538:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TBCTR |= event;
1539:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1540:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1541:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1542:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1543:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1544:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1545:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t \n
1546:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1547:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1548:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1549:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables the interrupt events related to transmit FIFO. \n\n
1550:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1551:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_TXFIFO_GetEvent(). 
1552:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t. Fo
1553:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1554:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1555:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1556:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1557:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1558:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1559:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1560:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TBCTR &= (uint32_t)~event;
1561:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1562:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1563:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1564:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1565:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				      \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1566:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the transmit FIFO events. \n
1567:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1568:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1569:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation. \n
1570:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1571:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1572:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1573:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1574:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the transmit FIFO events.\n\n
1575:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1576:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1577:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1578:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * A transmit FIFO event can generate an interrupt only if the interrupt node is configured for the
1579:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1580:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1581:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1582:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1583:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1584:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1585:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1586:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1587:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1588:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                 const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t i
1589:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                 const uint32_t service_request);
1590:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1591:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1592:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1593:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1594:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1595:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1596:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1597:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1598:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1599:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit FIFO. \n\n
1600:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in the transmit FIFO.
1601:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The transmit FIFO should be configured before calling this API.
1602:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1603:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1604:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1605:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1606:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutData(XMC_USIC_CH_t *const channel, const uint16_t data)
1607:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1608:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->IN[0] = data;
1609:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1610:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1611:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1612:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1613:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1614:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1615:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1616:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1617:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1618:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1619:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1620:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in frame length control mode. \n\n
1621:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When frame length control is enabled for dynamic update of frame length, this API can be used.
1622:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1623:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1624:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1625:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1626:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1627:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1628:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataFLEMode(XMC_USIC_CH_t *const channel,
1629:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                        const uint16_t data,
1630:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1631:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1632:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1633:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1634:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1635:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1636:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1637:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1638:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1639:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1640:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1641:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1642:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1643:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1644:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in hardware port control mode. \n\n
1645:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When hardware port control is enabled for dynamic update of frame length, this API can be used.
1646:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1647:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1648:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1649:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1650:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1651:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1652:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
1653:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                        const uint16_t data,
1654:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1655:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1656:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1657:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1658:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1659:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1660:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1661:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1662:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1663:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1664:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1665:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Clears the contents of transmit FIFO. \n\n
1666:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO contents will be cleared and the filling level will be reset to 0.
1667:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1668:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1669:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
1670:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1671:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
1672:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1673:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
1674:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1675:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1676:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1677:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1678:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1679:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is full
1680:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO is not full.
1681:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1682:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1683:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is full. \n\n
1684:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO filling level reaches the configured size, FIFO full flag is set.
1685:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * User should not write to the FIFO when the transmit FIFO is full.
1686:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1687:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1688:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
1689:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1690:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1691:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1692:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1693:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1694:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1695:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1696:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1697:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1698:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is empty
1699:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO has some data.
1700:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1701:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1702:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is empty. \n\n
1703:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO is empty, data can be written to FIFO.
1704:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the last written word to the transmit FIFO is transmitted out of the FIFO, 
1705:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * FIFO empty flag is set.
1706:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1707:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1708:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1709:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1710:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1711:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1712:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
1713:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1714:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1715:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1716:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1717:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1718:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Transmit FIFO filling level. \n 
1719:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= transmit FIFO size.
1720:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1721:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1722:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO filling level. \n\n
1723:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * For every word written to the FIFO, filling level is updated. The API gives the value
1724:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * of this filling level.
1725:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1726:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1727:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1728:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1729:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1730:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1731:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_TBFLVL_Msk) >> USIC_CH_TRBSR_TBFLVL_Pos);
1732:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1733:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1734:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1735:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1736:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1737:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status of standard transmit and transmit buffer error events. @ref XMC_USIC_CH_TXFIFO_EV
1738:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1739:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1740:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO event status. \n\n
1741:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Gives the status of transmit FIFO standard transmit buffer event and transmit buffer error event
1742:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The status bits are located at their bit positions in the TRBSR register in the returned value.
1743:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * User can make use of the @ref XMC_USIC_CH_TXFIFO_EVENT_t enumeration for checking the status of 
1744:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1745:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1746:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1747:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1748:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1749:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_ClearEvent() \n\n\n
1750:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1751:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1752:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1753:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_STBI_Msk |
1754:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                               USIC_CH_TRBSR_TBERI_Msk));
1755:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1756:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1757:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1758:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1759:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1760:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  event Transmit FIFO events to be cleared. \n
1761:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			     \b Range: @ref XMC_USIC_CH_TXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_TXFIFO_EVENT_ERROR.
1762:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1763:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1764:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1765:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Clears the transmit FIFO event flags in the status register. \n\n
1766:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1767:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1768:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EVENT enumeration can be used as input. Multiple events
1769:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1770:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * multiple event enumerations.
1771:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1772:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1773:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent() \n\n\n
1774:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1775:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1776:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                    const uint32_t event)
1777:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1778:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = event;
1779:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1780:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1781:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1782:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1783:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1784:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1785:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1786:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1787:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1788:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of receive FIFO filling level to be considered for generating events. \n
1789:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1790:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1791:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1792:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1793:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Configures the receive FIFO. \n\n
1794:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Receive FIFO is the subset of a common FIFO sized 64 words. This FIFO is shared between 2 channe
1795:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1796:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * from where received data can be put. \a size represents the size of receive FIFO as a multiple o
1797:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A FIFO
1798:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * event or alternative receive buffer event is generated when the FIFO filling level exceeds the \
1799:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1800:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1801:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent(), XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1802:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
1803:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
1804:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1805:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1806:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1807:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1808:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1809:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1810:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1811:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1812:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1813:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for receive FIFO filling level to be considered for generating events. \n
1814:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1815:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1816:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1817:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1818:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the receive FIFO. \n\n
1819:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the receive FIFO. The API shall be used for the 
1820:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * runtime change of receive FIFO trigger limit. FIFO start position will not be affected on execut
1821:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1822:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1823:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit()\ n\n\n
1824:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1825:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1826:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1827:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                             const uint32_t limit);
1828:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1829:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1830:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1831:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1832:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1833:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1834:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1835:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1836:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1837:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_t.
1838:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1839:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.<br>
1840:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1841:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1842:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1843:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1844:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1845:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1846:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1847:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1848:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1849:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->RBCTR |= event;
1850:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1851:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1852:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1853:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1854:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1855:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1856:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. \n
1857:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ERR
1858:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			@ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE.
1859:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1860:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1861:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1862:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables the selected interrupt events related to receive FIFO. \n\n
1863:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1864:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_RXFIFO_GetEvent(). 
1865:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration \a XMC_USIC_CH_RXFIFO_EVENT_CONF. For pr
1866:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1867:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1868:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1869:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1870:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1871:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1872:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1873:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->RBCTR &= (uint32_t)~event;
1874:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1875:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1876:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1877:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1878:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1879:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the receive FIFO events. \n
1880:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1881:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					@ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1882:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation.\n
1883:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					\b Range: 0 to 5.
1884:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1885:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1886:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1887:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the receive FIFO events. \n\n
1888:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1889:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1890:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1891:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * A receive FIFO event can generate an interrupt only if the interrupt node is configured for the 
1892:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1893:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1894:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1895:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1896:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1897:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1898:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1899:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1900:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1901:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                 const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t i
1902:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                 const uint32_t service_request);
1903:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1904:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1905:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1906:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1907:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Value read from the receive FIFO. \n
1908:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 16bit data. Length of data depends on the word length configuration.
1909:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1910:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1911:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Gets data from the receive FIFO. \n\n
1912:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Receive FIFO should be read only if data is availble in the FIFO. This can be checked using
1913:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * the API XMC_USIC_CH_RXFIFO_IsEmpty(). Receive FIFO error flag will be set if an attempt is made
1914:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO. To read all the received data, user should keep reading data
1915:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * until receive FIFO is empty.
1916:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1917:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1918:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent() \n\n\n
1919:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1920:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint16_t XMC_USIC_CH_RXFIFO_GetData(XMC_USIC_CH_t *const channel)
1921:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1922:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return (uint16_t)(channel->OUTR);
1923:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1924:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1925:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1926:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1927:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1928:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1929:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1930:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1931:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Clears the contents of receive FIFO. \n\n
1932:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Receive FIFO contents will be cleared and the filling level will be reset to 0.
1933:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1934:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1935:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
1936:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1937:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
1938:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1939:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
1940:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1941:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1942:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1943:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1944:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1945:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is full
1946:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO is not full.
1947:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1948:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1949:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is full. \n\n
1950:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO filling level reaches the configured size, FIFO full flag is set.
1951:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Any data received when the receive FIFO is full, is lost.
1952:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1953:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1954:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_IsEmpty(), XMC_USIC_CH_RXFIFO_Flush() \n\n\n
1955:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1956:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1957:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1958:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_RFULL_Msk);
1959:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1960:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1961:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1962:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1963:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1964:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is empty,
1965:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO has some data.
1966:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1967:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1968:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is empty. \n\n
1969:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO is empty, received data will be put in receive FIFO.
1970:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the last received word in the FIFO is read, FIFO empty flag is set. Any attempt
1971:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO will set the receive FIFO error flag.
1972:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1973:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1974:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1975:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1976:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1977:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1978:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
1979:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1980:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1981:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1982:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1983:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1984:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return uint32_t Receive FIFO filling level. \n
1985:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= receive FIFO size.
1986:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1987:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1988:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Gets the receive FIFO filling level. \n\n
1989:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * For every word received, the filling level is incremented. The API gives the value
1990:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * of this filling level. The filling level is decremented when the data is read out of the 
1991:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * receive FIFO.
1992:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1993:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1994:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1995:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1996:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1997:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1998:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_RBFLVL_Msk) >> USIC_CH_TRBSR_RBFLVL_Pos);
1999:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
2000:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
2001:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
2002:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2003:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2004:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status of standard receive buffer, alternative receive buffer and receive buffer error e
2005:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
2006:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
2007:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
2008:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2009:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Gets the receive FIFO events' status. \n\n
2010:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Gives the status of receive FIFO standard receive buffer event, alternative receive buffer event
2011:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The status bits are located at their bitpositions in the TRBSR register in the returned value.
2012:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * User can make use of the XMC_USIC_CH_RXFIFO_EVENT enumeration for checking the status of return 
2013:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
2014:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
2015:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
2016:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2017:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2018:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent()\n\n\n
2019:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
2020:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
2021:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
2022:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_SRBI_Msk |
2023:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                               USIC_CH_TRBSR_RBERI_Msk |
2024:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                               USIC_CH_TRBSR_ARBI_Msk));
2025:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
2026:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
2027:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
2028:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2029:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2030:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  event Receive FIFO events to be cleared. \n
2031:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
2032:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
2033:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
2034:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2035:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2036:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Clears the receive FIFO event flags in the status register. \n\n
2037:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
2038:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
2039:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EVENT enumeration can be used as input. Multiple events
2040:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
2041:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * multiple event enumerations.
2042:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2043:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2044:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent() \n\n\n
2045:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
2046:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
2047:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                    const uint32_t event)
2048:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
2049:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = event;
2050:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
2051:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
2052:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
2053:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2054:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2055:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
2056:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2057:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2058:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables time measurement using the capture mode timer. \n\n
2059:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Time measurement is enabled by setting the timer enable flag in BRG register.
2060:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2061:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2062:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTimeMeasurement() \n\n\n
2063:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
2064:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTimeMeasurement(XMC_USIC_CH_t *const channel)
2065:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
2066:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->BRG |= (uint32_t)USIC_CH_BRG_TMEN_Msk;
2067:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
2068:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
2069:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
2070:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2071:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2072:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
2073:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2074:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2075:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables time measurement using the capture mode timer. \n\n
2076:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Time measurement is disabled by clearing the timer enable flag in BRG register.
2077:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2078:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2079:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTimeMeasurement() \n\n\n
2080:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
2081:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTimeMeasurement(XMC_USIC_CH_t *const channel)
2082:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
2083:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->BRG &= (uint32_t)~USIC_CH_BRG_TMEN_Msk;
2084:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
2085:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
2086:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
2087:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2088:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2089:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param passive_level Passive level for the master clock output. \n
2090:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0, @ref XMC_USIC_CH_BRG_MASTER_CL
2091:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
2092:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2093:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2094:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the idle mode pin level for the master clock output. \n
2095:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
2096:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMclkOutputPassiveLevel(XMC_USIC_CH_t *const channel,
2097:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_MASTER_CLOCK_PASSI
2098:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
2099:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_MCLKCFG_Msk)) | (uint32_t)passive_level;
2100:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
2101:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
2102:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2103:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2104:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param passive_level Passive level for the clock output. \n
2105:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
2106:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED,
2107:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
2108:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED,
2109:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param clock_output Shift clock source selection. \n
2110:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					\b Range: Use @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK,
2111:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 								  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1
2112:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
2113:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2114:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2115:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the idle mode shift clock output level and selects the shift clock source. \n\n
2116:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Shift clock idle mode output level can be set to logic high or low. Shift clock output can be co
2117:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * delay of half shift clock period. Both the configurations are available as enumeration values de
2118:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t.
2119:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * This value should be configured based on the slave device requirement.
2120:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Shift clock source can be selected between internal clock(master) and external input(slave).
2121:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
2122:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
2123:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
2124:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIV
2125:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
2126:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
2127:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
2128:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                              USIC_CH_BRG_SCLKOSEL_Msk))) |
2129:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                  (uint32_t)passive_level |
2130:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                  (uint32_t)clock_output;
2131:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
2132:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
2133:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
2134:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2135:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2136:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param mode USIC channel operation mode. \n
2137:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_OPERATING_MODE_IDLE, @ref XMC_USIC_CH_OPERATING_MODE_SPI,
2138:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_UART, @ref XMC_USIC_CH_OPERATING_MODE_I2S,
2139:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_I2C.
2140:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
2141:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2142:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2143:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the USIC channel operation mode.\n\n
2144:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * A USIC channel can support multiple serial communication protocols like UART, SPI, I2C and I2S.
2145:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The API sets the input operation mode to the USIC channel.
2146:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2147:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2148:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
2149:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
2150:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_
2151:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
2152:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 483              	 .loc 2 2152 0
 484 0008 036C     	 ldr r3,[r0,#64]
 485 000a 23F00F03 	 bic r3,r3,#15
 486 000e 0364     	 str r3,[r0,#64]
 487              	.LBE17:
 488              	.LBE16:
 276:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   XMC_I2S_CH_STATUS_t status = XMC_I2S_CH_STATUS_OK;
 489              	 .loc 1 276 0
 490 0010 0020     	 movs r0,#0
 491              	.LVL49:
 492 0012 7047     	 bx lr
 493              	.LVL50:
 494              	.L40:
 279:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   {
 280:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     status = XMC_I2S_CH_STATUS_BUSY;
 495              	 .loc 1 280 0
 496 0014 0220     	 movs r0,#2
 497              	.LVL51:
 281:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   }
 282:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   else
 283:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   {
 284:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     /* USIC channel in IDLE mode */
 285:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****     XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_IDLE);
 286:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   }
 287:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 288:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   return status;
 289:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** }
 498              	 .loc 1 289 0
 499 0016 7047     	 bx lr
 500              	 .cfi_endproc
 501              	.LFE264:
 503              	 .section .text.XMC_I2S_CH_EnableEvent,"ax",%progbits
 504              	 .align 2
 505              	 .global XMC_I2S_CH_EnableEvent
 506              	 .thumb
 507              	 .thumb_func
 509              	XMC_I2S_CH_EnableEvent:
 510              	.LFB265:
 290:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 291:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** void XMC_I2S_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
 292:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** {
 511              	 .loc 1 292 0
 512              	 .cfi_startproc
 513              	 
 514              	 
 515              	 
 516              	.LVL52:
 293:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   channel->CCR |= (event&0x1fc00U);
 517              	 .loc 1 293 0
 518 0000 036C     	 ldr r3,[r0,#64]
 519 0002 01F4FE32 	 and r2,r1,#130048
 520 0006 1343     	 orrs r3,r3,r2
 521 0008 0364     	 str r3,[r0,#64]
 294:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   channel->PCR_IISMode |= ((event >> 2U) & 0x8070U);
 522              	 .loc 1 294 0
 523 000a C36B     	 ldr r3,[r0,#60]
 524 000c 48F27002 	 movw r2,#32880
 525 0010 02EA9101 	 and r1,r2,r1,lsr#2
 526              	.LVL53:
 527 0014 1943     	 orrs r1,r1,r3
 528 0016 C163     	 str r1,[r0,#60]
 529 0018 7047     	 bx lr
 530              	 .cfi_endproc
 531              	.LFE265:
 533 001a 00BF     	 .section .text.XMC_I2S_CH_DisableEvent,"ax",%progbits
 534              	 .align 2
 535              	 .global XMC_I2S_CH_DisableEvent
 536              	 .thumb
 537              	 .thumb_func
 539              	XMC_I2S_CH_DisableEvent:
 540              	.LFB266:
 295:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** }
 296:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** 
 297:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** void XMC_I2S_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
 298:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c **** {
 541              	 .loc 1 298 0
 542              	 .cfi_startproc
 543              	 
 544              	 
 545              	 
 546              	.LVL54:
 299:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   channel->CCR &= (uint32_t)~(event&0x1fc00U);
 547              	 .loc 1 299 0
 548 0000 036C     	 ldr r3,[r0,#64]
 549 0002 01F4FE32 	 and r2,r1,#130048
 550 0006 23EA0203 	 bic r3,r3,r2
 551 000a 0364     	 str r3,[r0,#64]
 300:C:/Files/Projects/Git/XMCLib/src\xmc_i2s.c ****   channel->PCR_IISMode &= (uint32_t)~((event >> 2U) & 0x8070U);
 552              	 .loc 1 300 0
 553 000c C36B     	 ldr r3,[r0,#60]
 554 000e 48F27002 	 movw r2,#32880
 555 0012 02EA9101 	 and r1,r2,r1,lsr#2
 556              	.LVL55:
 557 0016 23EA0101 	 bic r1,r3,r1
 558 001a C163     	 str r1,[r0,#60]
 559 001c 7047     	 bx lr
 560              	 .cfi_endproc
 561              	.LFE266:
 563 001e 00BF     	 .text
 564              	.Letext0:
 565              	 .file 4 "c:\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 566              	 .file 5 "c:\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 567              	 .file 6 "C:/Files/Projects/Git/CMSIS/Include/cmsis_gcc.h"
 568              	 .file 7 "C:/Files/Projects/Git/CMSIS/Include/core_cm4.h"
 569              	 .file 8 "C:/Files/Projects/Git/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 570              	 .file 9 "C:/Files/Projects/Git/XMCLib/inc/xmc_scu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_i2s.c
    {standard input}:20     .text.XMC_I2S_CH_SetBaudrate:00000000 $t
    {standard input}:25     .text.XMC_I2S_CH_SetBaudrate:00000000 XMC_I2S_CH_SetBaudrate
    {standard input}:79     .text.XMC_I2S_CH_SetBaudrateEx:00000000 $t
    {standard input}:84     .text.XMC_I2S_CH_SetBaudrateEx:00000000 XMC_I2S_CH_SetBaudrateEx
    {standard input}:146    .text.XMC_I2S_CH_SetSystemWordLength:00000000 $t
    {standard input}:151    .text.XMC_I2S_CH_SetSystemWordLength:00000000 XMC_I2S_CH_SetSystemWordLength
    {standard input}:286    .text.XMC_I2S_CH_Init:00000000 $t
    {standard input}:291    .text.XMC_I2S_CH_Init:00000000 XMC_I2S_CH_Init
    {standard input}:371    .text.XMC_I2S_CH_Transmit:00000000 $t
    {standard input}:376    .text.XMC_I2S_CH_Transmit:00000000 XMC_I2S_CH_Transmit
    {standard input}:428    .text.XMC_I2S_CH_GetReceivedData:00000000 $t
    {standard input}:433    .text.XMC_I2S_CH_GetReceivedData:00000000 XMC_I2S_CH_GetReceivedData
    {standard input}:458    .text.XMC_I2S_CH_Stop:00000000 $t
    {standard input}:463    .text.XMC_I2S_CH_Stop:00000000 XMC_I2S_CH_Stop
    {standard input}:504    .text.XMC_I2S_CH_EnableEvent:00000000 $t
    {standard input}:509    .text.XMC_I2S_CH_EnableEvent:00000000 XMC_I2S_CH_EnableEvent
    {standard input}:534    .text.XMC_I2S_CH_DisableEvent:00000000 $t
    {standard input}:539    .text.XMC_I2S_CH_DisableEvent:00000000 XMC_I2S_CH_DisableEvent
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_CLOCK_GetPeripheralClockFrequency
XMC_USIC_CH_SetBaudrate
XMC_USIC_CH_SetBaudrateEx
XMC_USIC_CH_Enable
