   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,1
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_i2c.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_I2C_CH_SetSlaveAddress,"ax",%progbits
  20              	 .align 2
  21              	 .global XMC_I2C_CH_SetSlaveAddress
  22              	 .thumb
  23              	 .thumb_func
  25              	XMC_I2C_CH_SetSlaveAddress:
  26              	.LFB214:
  27              	 .file 1 "C:/Files/Projects/Git/XMCLib/src/xmc_i2c.c"
   1:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** /**
   2:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * @file xmc_i2c.c
   3:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * @date 2019-07-12
   4:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  *
   5:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * @cond
   6:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  **************************************************************************************************
   7:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  *
   9:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * All rights reserved.                        
  11:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  *                                             
  12:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * following conditions are met:   
  14:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  *                                                                              
  15:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * disclaimer.                        
  17:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * 
  18:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * 
  21:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * products derived from this software without specific prior written permission.                  
  23:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  *                                                                              
  24:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  *                                                                              
  32:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  **************************************************************************************************
  35:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  *
  36:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * Change History
  37:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * --------------
  38:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  *
  39:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * 2015-02-20:
  40:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  *     - Initial <br>
  41:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  *      
  42:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * 2015-05-20:
  43:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****        - Modified XMC_I2C_CH_Stop() API for not setting to IDLE the channel if it is busy <br>
  44:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  *
  45:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * 2015-06-20:
  46:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  *     - Removed GetDriverVersion API <br>
  47:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  *
  48:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * 2015-08-14:
  49:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  *     - updated the XMC_I2C_CH_SetBaudrate API to support dynamic change from 400K to low frequenc
  50:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  *
  51:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * 2015-09-01:
  52:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  *     - Modified XMC_I2C_CH_EnableEvent() and XMC_I2C_CH_DisableEvent() for supporting multiple ev
  53:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  *
  54:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * 2015-10-02:
  55:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  *     - Fixed 10bit addressing
  56:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  *
  57:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * 2019-05-07:
  58:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  *     - Added XMC_I2C_CH_SetBaudrateEx() which allows to select between baudrate generator normal 
  59:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  *
  60:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * 2019-07-12:
  61:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  *     - Fixed wrong oversampling setting in case of baudrate greater than 100Kbaud/s
  62:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * 
  63:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * @endcond 
  64:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  *
  65:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  */
  66:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
  67:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** /**************************************************************************************************
  68:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * HEADER FILES
  69:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  **************************************************************************************************
  70:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** #include <xmc_i2c.h>
  71:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
  72:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** /**************************************************************************************************
  73:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * MACROS
  74:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  **************************************************************************************************
  75:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** #define XMC_I2C_7BIT_ADDR_Pos   (8U)		/**< 7-bit address position */
  76:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** #define TRANSMISSION_MODE       (3U)		/**< The shift control signal is considered active
  77:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****                                                  without referring to the actual signal level. Data
  78:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****                                                  frame transfer is possible after each edge of the 
  79:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** #define WORDLENGTH              (7U)        /**< Word length */
  80:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** #define SET_TDV                 (1U)		/**< Transmission data valid */
  81:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** #define XMC_I2C_10BIT_ADDR_MASK (0x7C00U)   /**< Address mask for 10-bit mode */
  82:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
  83:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** /**************************************************************************************************
  84:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * ENUMS
  85:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  **************************************************************************************************
  86:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
  87:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** typedef enum XMC_I2C_CH_TDF
  88:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** {
  89:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   XMC_I2C_CH_TDF_MASTER_SEND =         0U,
  90:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   XMC_I2C_CH_TDF_SLAVE_SEND =          (uint32_t)1U << 8U,
  91:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK =  (uint32_t)2U << 8U,
  92:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK = (uint32_t)3U << 8U,
  93:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   XMC_I2C_CH_TDF_MASTER_START =        (uint32_t)4U << 8U,
  94:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   XMC_I2C_CH_TDF_MASTER_RESTART =      (uint32_t)5U << 8U,
  95:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   XMC_I2C_CH_TDF_MASTER_STOP =         (uint32_t)6U << 8U
  96:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** } XMC_I2C_CH_TDF_t;
  97:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
  98:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** typedef enum XMC_I2C_CH_MAX_SPEED
  99:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** {
 100:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   XMC_I2C_CH_MAX_SPEED_STANDARD = 100000U,
 101:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   XMC_I2C_CH_MAX_SPEED_FAST = 400000U
 102:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** } XMC_I2C_CH_MAX_SPEED_t;
 103:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 104:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** typedef enum XMC_I2C_CH_CLOCK_OVERSAMPLING
 105:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** {
 106:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD = 10U,
 107:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST     = 25U
 108:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** } XMC_I2C_CH_CLOCK_OVERSAMPLINGS_t;
 109:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 110:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** /**************************************************************************************************
 111:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  * API IMPLEMENTATION
 112:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****  **************************************************************************************************
 113:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** /* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffe
 114:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
 115:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** {
 116:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   XMC_USIC_CH_Enable(channel);
 117:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   
 118:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   /* Data format configuration */
 119:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision 
 120:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****                   ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
 121:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****                   USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
 122:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****                   USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
 123:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****                   USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */
 124:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 125:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 126:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   (void)XMC_I2C_CH_SetBaudrateEx(channel, config->baudrate, config->normal_divider_mode);
 127:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   
 128:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     
 129:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   /* Enable transfer buffer */
 130:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 131:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 132:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   /* Clear status flags */
 133:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   channel->PSCR = 0xFFFFFFFFU;
 134:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 135:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   /* Disable parity generation */
 136:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   channel->CCR = 0x0U;
 137:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** }
 138:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** /* Sets the slave address */
 139:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
 140:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** {
  28              	 .loc 1 140 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33              	.LVL0:
 141:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
  34              	 .loc 1 141 0
  35 0000 01F4F843 	 and r3,r1,#31744
  36 0004 B3F5F04F 	 cmp r3,#30720
  37 0008 06D1     	 bne .L2
 142:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 143:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
  38              	 .loc 1 143 0
  39 000a 4B00     	 lsls r3,r1,#1
  40 000c 03F47E43 	 and r3,r3,#65024
  41 0010 C9B2     	 uxtb r1,r1
  42              	.LVL1:
  43 0012 1943     	 orrs r1,r1,r3
  44 0014 C163     	 str r1,[r0,#60]
  45 0016 7047     	 bx lr
  46              	.LVL2:
  47              	.L2:
 144:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 145:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   else
 146:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 147:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  48              	 .loc 1 147 0
  49 0018 0902     	 lsls r1,r1,#8
  50              	.LVL3:
  51 001a C163     	 str r1,[r0,#60]
  52 001c 7047     	 bx lr
  53              	 .cfi_endproc
  54              	.LFE214:
  56 001e 00BF     	 .section .text.XMC_I2C_CH_GetSlaveAddress,"ax",%progbits
  57              	 .align 2
  58              	 .global XMC_I2C_CH_GetSlaveAddress
  59              	 .thumb
  60              	 .thumb_func
  62              	XMC_I2C_CH_GetSlaveAddress:
  63              	.LFB215:
 148:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 149:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** }
 150:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** /* Read the slave address */
 151:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** uint16_t XMC_I2C_CH_GetSlaveAddress(const XMC_USIC_CH_t *const channel)
 152:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** {
  64              	 .loc 1 152 0
  65              	 .cfi_startproc
  66              	 
  67              	 
  68              	 
  69              	.LVL4:
 153:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   uint32_t address = channel->PCR_IICMode & (uint32_t)USIC_CH_PCR_IICMode_SLAD_Msk;
  70              	 .loc 1 153 0
  71 0000 C36B     	 ldr r3,[r0,#60]
  72 0002 98B2     	 uxth r0,r3
  73              	.LVL5:
 154:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   
 155:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   if ((address & 0xffU) == 0U)
  74              	 .loc 1 155 0
  75 0004 13F0FF03 	 ands r3,r3,#255
 156:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 157:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     address = address >> XMC_I2C_7BIT_ADDR_Pos;
  76              	 .loc 1 157 0
  77 0008 0FBF     	 iteee eq
  78 000a 000A     	 lsreq r0,r0,#8
  79              	.LVL6:
 158:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 159:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   else
 160:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 161:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     address = (address & 0xffU) | ((address >> 1) & 0x0300U);
  80              	 .loc 1 161 0
  81 000c 4008     	 lsrne r0,r0,#1
  82              	.LVL7:
  83 000e 00F44070 	 andne r0,r0,#768
  84 0012 1843     	 orrne r0,r0,r3
  85              	.LVL8:
 162:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 163:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   
 164:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   return (uint16_t)address;
 165:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** }
  86              	 .loc 1 165 0
  87 0014 7047     	 bx lr
  88              	 .cfi_endproc
  89              	.LFE215:
  91 0016 00BF     	 .section .text.XMC_I2C_CH_SetBaudrate,"ax",%progbits
  92              	 .align 2
  93              	 .global XMC_I2C_CH_SetBaudrate
  94              	 .thumb
  95              	 .thumb_func
  97              	XMC_I2C_CH_SetBaudrate:
  98              	.LFB216:
 166:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 167:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** /* Sets the baudrate and oversampling based on standard speed or fast speed */
 168:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
 169:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** {
  99              	 .loc 1 169 0
 100              	 .cfi_startproc
 101              	 
 102              	 
 103              	.LVL9:
 104 0000 08B5     	 push {r3,lr}
 105              	.LCFI0:
 106              	 .cfi_def_cfa_offset 8
 107              	 .cfi_offset 3,-8
 108              	 .cfi_offset 14,-4
 109              	.LVL10:
 170:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   XMC_I2C_CH_STATUS_t status;
 171:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   
 172:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   status = XMC_I2C_CH_STATUS_ERROR;
 173:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   
 174:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 110              	 .loc 1 174 0
 111 0002 0F4B     	 ldr r3,.L12
 112 0004 9942     	 cmp r1,r3
 113 0006 0AD8     	 bhi .L8
 175:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 176:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 	channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 114              	 .loc 1 176 0
 115 0008 C36B     	 ldr r3,[r0,#60]
 116 000a 23F40033 	 bic r3,r3,#131072
 117 000e C363     	 str r3,[r0,#60]
 177:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) ==
 118              	 .loc 1 177 0
 119 0010 0A22     	 movs r2,#10
 120 0012 FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
 121              	.LVL11:
 178:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     {
 179:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****       status = XMC_I2C_CH_STATUS_OK;
 122              	 .loc 1 179 0
 123 0016 0030     	 adds r0,r0,#0
 124 0018 18BF     	 it ne
 125 001a 0120     	 movne r0,#1
 126 001c 08BD     	 pop {r3,pc}
 127              	.LVL12:
 128              	.L8:
 180:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     }
 181:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 182:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 129              	 .loc 1 182 0
 130 001e 094B     	 ldr r3,.L12+4
 131 0020 9942     	 cmp r1,r3
 132 0022 0AD8     	 bhi .L10
 183:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 184:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 133              	 .loc 1 184 0
 134 0024 C36B     	 ldr r3,[r0,#60]
 135 0026 43F40033 	 orr r3,r3,#131072
 136 002a C363     	 str r3,[r0,#60]
 185:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC
 137              	 .loc 1 185 0
 138 002c 1922     	 movs r2,#25
 139 002e FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
 140              	.LVL13:
 179:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     }
 141              	 .loc 1 179 0
 142 0032 0030     	 adds r0,r0,#0
 143 0034 18BF     	 it ne
 144 0036 0120     	 movne r0,#1
 145 0038 08BD     	 pop {r3,pc}
 146              	.LVL14:
 147              	.L10:
 186:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     {
 187:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****       status = XMC_I2C_CH_STATUS_OK;
 188:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     }
 189:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 190:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   else 
 191:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 192:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     status = XMC_I2C_CH_STATUS_ERROR;
 148              	 .loc 1 192 0
 149 003a 0120     	 movs r0,#1
 150              	.LVL15:
 193:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 194:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   
 195:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   return status;
 196:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** }
 151              	 .loc 1 196 0
 152 003c 08BD     	 pop {r3,pc}
 153              	.L13:
 154 003e 00BF     	 .align 2
 155              	.L12:
 156 0040 A0860100 	 .word 100000
 157 0044 801A0600 	 .word 400000
 158              	 .cfi_endproc
 159              	.LFE216:
 161              	 .section .text.XMC_I2C_CH_SetBaudrateEx,"ax",%progbits
 162              	 .align 2
 163              	 .global XMC_I2C_CH_SetBaudrateEx
 164              	 .thumb
 165              	 .thumb_func
 167              	XMC_I2C_CH_SetBaudrateEx:
 168              	.LFB217:
 197:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 198:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** /* Sets the baudrate and oversampling based on standard speed or fast speed */
 199:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, bool norm
 200:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** {
 169              	 .loc 1 200 0
 170              	 .cfi_startproc
 171              	 
 172              	 
 173              	.LVL16:
 174 0000 08B5     	 push {r3,lr}
 175              	.LCFI1:
 176              	 .cfi_def_cfa_offset 8
 177              	 .cfi_offset 3,-8
 178              	 .cfi_offset 14,-4
 201:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   XMC_USIC_CH_STATUS_t status;
 202:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****    
 203:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 179              	 .loc 1 203 0
 180 0002 114B     	 ldr r3,.L21
 181 0004 9942     	 cmp r1,r3
 182 0006 0CD8     	 bhi .L15
 204:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 205:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 	  channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 183              	 .loc 1 205 0
 184 0008 C36B     	 ldr r3,[r0,#60]
 185 000a 23F40033 	 bic r3,r3,#131072
 186 000e C363     	 str r3,[r0,#60]
 206:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     if (normal_divider_mode)
 187              	 .loc 1 206 0
 188 0010 1AB1     	 cbz r2,.L16
 207:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     {
 208:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****       status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STA
 189              	 .loc 1 208 0
 190 0012 0A22     	 movs r2,#10
 191              	.LVL17:
 192 0014 FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrateEx
 193              	.LVL18:
 194 0018 08BD     	 pop {r3,pc}
 195              	.LVL19:
 196              	.L16:
 209:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     }
 210:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     else
 211:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     {
 212:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****       /* Fractional divider mode */
 213:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****       status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STAND
 197              	 .loc 1 213 0
 198 001a 0A22     	 movs r2,#10
 199              	.LVL20:
 200 001c FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
 201              	.LVL21:
 202 0020 08BD     	 pop {r3,pc}
 203              	.LVL22:
 204              	.L15:
 214:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     }   
 215:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 216:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 205              	 .loc 1 216 0
 206 0022 0A4B     	 ldr r3,.L21+4
 207 0024 9942     	 cmp r1,r3
 208 0026 0CD8     	 bhi .L19
 217:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 218:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 209              	 .loc 1 218 0
 210 0028 C36B     	 ldr r3,[r0,#60]
 211 002a 43F40033 	 orr r3,r3,#131072
 212 002e C363     	 str r3,[r0,#60]
 219:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     if (normal_divider_mode)
 213              	 .loc 1 219 0
 214 0030 1AB1     	 cbz r2,.L18
 220:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     {
 221:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****       status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAS
 215              	 .loc 1 221 0
 216 0032 1922     	 movs r2,#25
 217              	.LVL23:
 218 0034 FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrateEx
 219              	.LVL24:
 220 0038 08BD     	 pop {r3,pc}
 221              	.LVL25:
 222              	.L18:
 222:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     }
 223:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     else
 224:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     {
 225:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****       /* Fractional divider mode */
 226:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****       status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST)
 223              	 .loc 1 226 0
 224 003a 1922     	 movs r2,#25
 225              	.LVL26:
 226 003c FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
 227              	.LVL27:
 228 0040 08BD     	 pop {r3,pc}
 229              	.LVL28:
 230              	.L19:
 227:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     }
 228:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 229:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   else 
 230:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 231:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     status = XMC_USIC_CH_STATUS_ERROR;
 231              	 .loc 1 231 0
 232 0042 0120     	 movs r0,#1
 233              	.LVL29:
 232:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 233:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   
 234:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   return (XMC_I2C_CH_STATUS_t)status;
 235:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** }
 234              	 .loc 1 235 0
 235 0044 08BD     	 pop {r3,pc}
 236              	.L22:
 237 0046 00BF     	 .align 2
 238              	.L21:
 239 0048 A0860100 	 .word 100000
 240 004c 801A0600 	 .word 400000
 241              	 .cfi_endproc
 242              	.LFE217:
 244              	 .section .text.XMC_I2C_CH_Init,"ax",%progbits
 245              	 .align 2
 246              	 .global XMC_I2C_CH_Init
 247              	 .thumb
 248              	 .thumb_func
 250              	XMC_I2C_CH_Init:
 251              	.LFB213:
 115:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   XMC_USIC_CH_Enable(channel);
 252              	 .loc 1 115 0
 253              	 .cfi_startproc
 254              	 
 255              	 
 256              	.LVL30:
 257 0000 38B5     	 push {r3,r4,r5,lr}
 258              	.LCFI2:
 259              	 .cfi_def_cfa_offset 16
 260              	 .cfi_offset 3,-16
 261              	 .cfi_offset 4,-12
 262              	 .cfi_offset 5,-8
 263              	 .cfi_offset 14,-4
 264 0002 0446     	 mov r4,r0
 265 0004 0D46     	 mov r5,r1
 116:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   
 266              	 .loc 1 116 0
 267 0006 FFF7FEFF 	 bl XMC_USIC_CH_Enable
 268              	.LVL31:
 119:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****                   ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
 269              	 .loc 1 119 0
 270 000a 0A4B     	 ldr r3,.L25
 271 000c 6363     	 str r3,[r4,#52]
 125:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   (void)XMC_I2C_CH_SetBaudrateEx(channel, config->baudrate, config->normal_divider_mode);
 272              	 .loc 1 125 0
 273 000e 2046     	 mov r0,r4
 274 0010 E988     	 ldrh r1,[r5,#6]
 275 0012 FFF7FEFF 	 bl XMC_I2C_CH_SetSlaveAddress
 276              	.LVL32:
 126:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   
 277              	 .loc 1 126 0
 278 0016 2046     	 mov r0,r4
 279 0018 2968     	 ldr r1,[r5]
 280 001a 2A79     	 ldrb r2,[r5,#4]
 281 001c FFF7FEFF 	 bl XMC_I2C_CH_SetBaudrateEx
 282              	.LVL33:
 130:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 283              	 .loc 1 130 0
 284 0020 4FF4A063 	 mov r3,#1280
 285 0024 A363     	 str r3,[r4,#56]
 133:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 286              	 .loc 1 133 0
 287 0026 4FF0FF33 	 mov r3,#-1
 288 002a E364     	 str r3,[r4,#76]
 136:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** }
 289              	 .loc 1 136 0
 290 002c 0023     	 movs r3,#0
 291 002e 2364     	 str r3,[r4,#64]
 292 0030 38BD     	 pop {r3,r4,r5,pc}
 293              	.LVL34:
 294              	.L26:
 295 0032 00BF     	 .align 2
 296              	.L25:
 297 0034 03033F07 	 .word 121570051
 298              	 .cfi_endproc
 299              	.LFE213:
 301              	 .section .text.XMC_I2C_CH_MasterStart,"ax",%progbits
 302              	 .align 2
 303              	 .global XMC_I2C_CH_MasterStart
 304              	 .thumb
 305              	 .thumb_func
 307              	XMC_I2C_CH_MasterStart:
 308              	.LFB218:
 236:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 237:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** /* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non
 238:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD
 239:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** {
 309              	 .loc 1 239 0
 310              	 .cfi_startproc
 311              	 
 312              	 
 313              	 
 314              	.LVL35:
 240:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   uint32_t temp;
 241:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   
 242:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 243:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   if (command == XMC_I2C_CH_CMD_READ)
 315              	 .loc 1 243 0
 316 0000 012A     	 cmp r2,#1
 242:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   if (command == XMC_I2C_CH_CMD_READ)
 317              	 .loc 1 242 0
 318 0002 41F48061 	 orr r1,r1,#1024
 319              	.LVL36:
 244:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 245:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     temp |= 0x1U;
 320              	 .loc 1 245 0
 321 0006 08BF     	 it eq
 322 0008 41F00101 	 orreq r1,r1,#1
 323              	.LVL37:
 246:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 247:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 248:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   /* Check FIFO size */
 249:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 324              	 .loc 1 249 0
 325 000c D0F80831 	 ldr r3,[r0,#264]
 326 0010 13F0E06F 	 tst r3,#117440512
 327 0014 0AD1     	 bne .L30
 328              	.L33:
 329              	.LVL38:
 330              	.LBB34:
 331              	.LBB35:
 332              	 .file 2 "C:/Files/Projects/Git/XMCLib/inc/xmc_usic.h"
   1:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
   2:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @file xmc_usic.h
   3:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @date 2019-05-07
   4:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
   5:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @cond
   6:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  **************************************************************************************************
   7:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
   9:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * All rights reserved.                        
  11:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *                                             
  12:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * following conditions are met:   
  14:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *                                                                              
  15:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * disclaimer.                        
  17:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
  18:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
  21:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *                                                                              
  24:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *                                                                              
  32:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  **************************************************************************************************
  35:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  36:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Change History
  37:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * --------------
  38:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  39:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2015-02-20:
  40:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Initial draft<br>
  41:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Documentation improved <br>
  42:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  43:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2015-05-08:
  44:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetInputTriggerCombinationMode() and XMC_USIC_CH_SetTransmitBufferStatus
  45:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *      
  46:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2015-06-20:
  47:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  48:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
  49:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2015-08-17:
  50:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Bug fixed in XMC_USIC_CH_SetTransmitBufferStatus API. OR operator removed.
  51:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  52:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2015-08-24:
  53:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_USIC_CH_DisableDelayCompensation(
  54:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *       XMC_USIC_CH_DisableDelayCompensation()
  55:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  56:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2015-08-25:
  57:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for defining if the data shift unit input is derived
  58:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *       from the input data path DXn or from the selected protocol pre-processors: XMC_USIC_CH_Con
  59:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *       and XMC_USIC_CH_ConnectInputDataShiftToDataInput()
  60:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  61:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2015-08-27:
  62:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Fixed bug in XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T value.
  63:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for direct TBUF access: XMC_USIC_CH_WriteToTBUF() and XMC_USIC_CH_WriteToTBUFTC
  64:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  65:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  66:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2015-08-28:
  67:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added API for enabling the transfer trigger unit to set bit TCSR.TE if the trigger signal 
  68:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *       Clear to Send (CTS) signal: XMC_USIC_CH_EnableTBUFDataValidTrigger() and XMC_USIC_CH_Disab
  69:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  70:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2016-03-09:
  71:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Optimization of write only registers
  72:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  73:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2016-04-10:
  74:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added an API to put the data into FIFO when hardware port control is enabled: XMC_USIC_CH_
  75:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  76:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2017-02-10:
  77:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetShiftDirection() to allow selection of shift direction of the data wo
  78:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetCaptureTimerValue() and XMC_USIC_CH_SetFractionalDivider()
  79:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  80:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2017-09-08:
  81:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Fixed value of macro XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST used in XMC_USIC_CH_SetShiftDir
  82:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  83:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2018-09-29:
  84:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetBaudrateEx which uses the integer divider instead of the fractional d
  85:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
  86:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2019-05-07:
  87:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetBaudrate(), XMC_USIC_CH_GetSCLKFrequency() and XMC_USIC_CH_GetMCLKFre
  88:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  89:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @endcond
  90:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  91:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
  92:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
  93:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #ifndef XMC_USIC_H
  94:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC_H
  95:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
  96:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * HEADER FILES
  97:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
  98:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
  99:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #include "xmc_common.h"
 100:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 101:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 102:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @addtogroup XMClib XMC Peripheral Library
 103:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @{
 104:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 105:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 106:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 107:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @addtogroup USIC
 108:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @brief Universal Serial Interface Channel(USIC) driver for serial communication.
 109:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 110:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The Universal Serial Interface Channel(USIC) module is a flexible interface module
 111:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * covering several serial communication protocols. A USIC module contains two
 112:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * independent communication channels named USICx_CH0 and USICx_CH1, with x
 113:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * being the number of the USIC module. The user can program, during run-time, which protocol will 
 114:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * by each communication channel and which pins are used.
 115:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The driver provides APIs, configuration structures and enumerations to configure common features
 116:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * communication protocols.
 117:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
 118:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC driver features:
 119:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of FIFO for transmit and receive functions.
 120:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * -# Provides a structure type XMC_USIC_CH_t to represent the USIC channel registers in a programm
 121:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  friendly format.
 122:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of automatic update for frame length, word length, slave select or slave
 123:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * -# Allows transmission of data to FIFO using XMC_USIC_CH_TXFIFO_PutData() and XMC_USIC_CH_TXFIFO
 124:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * -# Allows reading of received data in FIFO using XMC_USIC_CH_RXFIFO_GetData()
 125:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of baudrate using XMC_USIC_CH_SetBaudrate()
 126:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * -# Provides API to trigger interrupts using XMC_USIC_CH_TriggerServiceRequest()
 127:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @{
 128:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 129:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 130:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 131:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * MACROS
 132:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 133:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 134:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0 ((XMC_USIC_t *)USIC0_BASE)			/**< USIC0 module base address */
 135:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH0 ((XMC_USIC_CH_t *)USIC0_CH0_BASE)	/**< USIC0 channel 0 base address */
 136:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH1 ((XMC_USIC_CH_t *)USIC0_CH1_BASE)	/**< USIC0 channel 1 base address */
 137:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 138:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if defined(USIC1)
 139:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1 ((XMC_USIC_t *)USIC1_BASE)			/**< USIC1 module base address */
 140:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH0 ((XMC_USIC_CH_t *)USIC1_CH0_BASE)	/**< USIC1 channel 0 base address */
 141:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH1 ((XMC_USIC_CH_t *)USIC1_CH1_BASE)	/**< USIC1 channel 1 base address */
 142:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 143:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 144:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if defined(USIC2)
 145:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2 ((XMC_USIC_t *)USIC2_BASE)			/**< USIC2 module base address */
 146:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH0 ((XMC_USIC_CH_t *)USIC2_CH0_BASE)	/**< USIC2 channel 0 base address */
 147:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH1 ((XMC_USIC_CH_t *)USIC2_CH1_BASE)	/**< USIC2 channel 1 base address */
 148:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 149:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 150:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Msk  USIC_CH_DX0CR_DSEL_Msk   /**< Common mask for DSEL bitfield mask in 
 151:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Pos  USIC_CH_DX0CR_DSEL_Pos   /**< Common mask for DSEL bitfield position
 152:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Pos USIC_CH_DX0CR_SFSEL_Pos  /**< Common mask for SFSEL bitfield positio
 153:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Msk USIC_CH_DX0CR_SFSEL_Msk  /**< Common mask for SFSEL bitfield mask in
 154:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DPOL_Msk  USIC_CH_DX0CR_DPOL_Msk   /**< Common mask for DPOL bitfield mask in 
 155:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DFEN_Msk  USIC_CH_DX0CR_DFEN_Msk   /**< Common mask for DFEN bitfield mask in 
 156:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEN_Msk  USIC_CH_DX0CR_DSEN_Msk   /**< Common mask for DSEN bitfield mask in 
 157:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Pos    USIC_CH_DX0CR_CM_Pos     /**< Common mask for CM bitfield position i
 158:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Msk    USIC_CH_DX0CR_CM_Msk     /**< Common mask for CM bitfield mask in DX
 159:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_Msk  USIC_CH_DX0CR_INSW_Msk   /**< Common mask for INSW bitfield mask in 
 160:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_pos  USIC_CH_DX0CR_INSW_Pos   /**< Common mask for INSW bitfield position
 161:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 162:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC1
 163:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  #include "xmc1_usic_map.h"
 164:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 165:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 166:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC4
 167:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  #include "xmc4_usic_map.h"
 168:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 169:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 170:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 171:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * ENUMS
 172:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 173:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 174:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 175:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel driver status
 176:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 177:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_STATUS
 178:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 179:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_OK,    /**< USIC driver status : OK */
 180:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_ERROR, /**< USIC driver status : ERROR */
 181:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_BUSY   /**< USIC driver status : BUSY */
 182:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_STATUS_t;
 183:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 184:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 185:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel kernel mode
 186:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 187:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_KERNEL_MODE
 188:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 189:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_0  = 0x0UL,  /**< Run mode 0 (transmission and reception possible)*/
 190:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_1  = 0x1UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Run mode 1 (transmissio
 191:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_0 = 0x2UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Stop mode 0 (no transmi
 192:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_1 = 0x3UL << USIC_CH_KSCFG_NOMCFG_Pos   /**< Stop mode 1 (both trans
 193:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_KERNEL_MODE_t;
 194:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 195:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 196:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel operating mode
 197:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 198:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_OPERATING_MODE
 199:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 200:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_IDLE = 0x0UL, /**< USIC channel idle */
 201:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_SPI  = 0x1UL << USIC_CH_CCR_MODE_Pos, /**< SPI mode */
 202:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_UART = 0x2UL << USIC_CH_CCR_MODE_Pos, /**< UART mode */
 203:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2S  = 0x3UL << USIC_CH_CCR_MODE_Pos, /**< I2S mode */
 204:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2C  = 0x4UL << USIC_CH_CCR_MODE_Pos  /**< I2C mode */
 205:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_OPERATING_MODE_t;
 206:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 207:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 208:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel inputs
 209:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 210:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT
 211:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 212:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX0, /**< DX0 input */
 213:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX1, /**< DX1 input */
 214:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX2, /**< DX2 input */
 215:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX3, /**< DX3 input */
 216:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX4, /**< DX4 input */
 217:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX5  /**< DX5 input */
 218:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_t;
 219:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 220:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 221:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel input source sampling frequency
 222:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 223:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_SAMPLING_FREQ
 224:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 225:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH            = 0x0UL, /**< Use fperiph frequency for input 
 226:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = 0x1UL << USIC_CH_DXCR_SFSEL_Pos  /**< Use fF
 227:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_SAMPLING_FREQ_t;
 228:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 229:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 230:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel input combination mode
 231:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 232:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_COMBINATION_MODE
 233:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 234:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED = 0x0UL, /**< The trigger activation is disab
 235:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE      = 0x1UL, /**< A rising edge activates DXnT*/
 236:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE     = 0x2UL, /**< A falling edge activates DXnT*/
 237:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES       = 0x3UL, /**< Both edges activate DXnT*/
 238:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_COMBINATION_MODE_t;
 239:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 240:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 241:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel data transmission start modes.
 242:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Data shifted out of the transmit pin depends on the value configured for the
 243:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * TDEN bitfield of the TCSR register. Following enum values are used for configuring
 244:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * the TCSR->TDEN bitfield.
 245:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 246:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_START_TRANSMISION_MODE
 247:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 248:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_DISABLED      = 0x0U, /**< Passive data level is sent out on transm
 249:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV        = 0x1UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 250:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0 = 0x2UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 251:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1 = 0x3UL << USIC_CH_TCSR_TDEN_Pos  /**< Transmission o
 252:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_START_TRANSMISION_MODE_t;
 253:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 254:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 255:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel interrupt node pointers
 256:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 257:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INTERRUPT_NODE_POINTER
 258:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 259:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = USIC_CH_INPR_TSINP_Pos, /**< Node pointe
 260:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = USIC_CH_INPR_TBINP_Pos, /**< Node pointe
 261:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE             = USIC_CH_INPR_RINP_Pos,  /**< Node pointe
 262:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = USIC_CH_INPR_AINP_Pos,  /**< Node pointe
 263:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = USIC_CH_INPR_PINP_Pos   /**< Node pointe
 264:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INTERRUPT_NODE_POINTER_t;
 265:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 266:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 267:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel events
 268:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 269:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_EVENT
 270:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 271:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 272:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 273:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 274:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 275:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 276:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 277:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk /**< Baudrate generator event */
 278:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_EVENT_t;
 279:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 280:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 281:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel parity mode
 282:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 283:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_PARITY_MODE
 284:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 285:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_NONE     = 0x0UL,  /**< Disable parity mode */
 286:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_EVEN     = 0x2UL << USIC_CH_CCR_PM_Pos,  /**< Enable even parity mode */
 287:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_ODD      = 0x3UL << USIC_CH_CCR_PM_Pos   /**< Enable odd parity mode */
 288:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PARITY_MODE_t;
 289:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 290:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 291:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel data output mode
 292:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 293:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_DATA_OUTPUT_MODE
 294:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 295:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL   = 0x0UL,  /**< Data output normal mode */
 296:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED = 0x1UL << USIC_CH_SCTR_DOCFG_Pos   /**< Data output invert
 297:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_DATA_OUTPUT_MODE_t;
 298:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 299:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 300:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status
 301:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 302:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS
 303:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 304:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_IDLE = 0x0UL,                 /**< Transfer buffer is currently idle*/
 305:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_BUSY = USIC_CH_TCSR_TDV_Msk   /**< Transfer buffer is currently busy*/
 306:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_t;
 307:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 308:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 309:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 310:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 311:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status modification
 312:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 313:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS_SET
 314:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 315:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_BUSY   = 0x1UL, /**< Set Transfer buffer status to busy*/
 316:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_IDLE   = 0x2UL  /**< Set Transfer buffer status to idle*/
 317:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_SET_t;
 318:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 319:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 320:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel receive buffer status
 321:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 322:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RBUF_STATUS
 323:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 324:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 = USIC_CH_RBUFSR_RDV0_Msk, /**< RBUF0 data has not yet been r
 325:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID1 = USIC_CH_RBUFSR_RDV1_Msk  /**< RBUF1 data has not yet been r
 326:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RBUF_STATUS_t;
 327:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 328:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 329:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel output signal passive data level
 330:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 331:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USCI_CH_PASSIVE_DATA_LEVEL
 332:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 333:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL0 = 0x0UL, /**< Passive level(idle mode signal level) 0 */
 334:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL1 = 0x1UL << USIC_CH_SCTR_PDL_Pos  /**< Passive level(idle mode sig
 335:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PASSIVE_DATA_LEVEL_t;
 336:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 337:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 338:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO size
 339:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 340:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_FIFO_SIZE
 341:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 342:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_DISABLED     = 0x0U,  /**< FIFO Disabled */
 343:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_2WORDS  = 0x1U,  /**< FIFO size: 2 words */
 344:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_4WORDS  = 0x2U,  /**< FIFO size: 4 words */
 345:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_8WORDS  = 0x3U,  /**< FIFO size: 8 words */
 346:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_16WORDS = 0x4U,  /**< FIFO size: 16 words */
 347:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_32WORDS = 0x5U,  /**< FIFO size: 32 words */
 348:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_64WORDS = 0x6U   /**< FIFO size: 64 words */
 349:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_FIFO_SIZE_t;
 350:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 351:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 352:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO interrupt node pointers
 353:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 354:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER
 355:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 356:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_TBCTR_STBINP_Pos,  /**< Node pointe
 357:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_TBCTR_ATBINP_Pos   /**< Node pointe
 358:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t;
 359:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 360:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 361:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO event configuration
 362:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 363:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT_CONF
 364:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 365:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD  = USIC_CH_TBCTR_STBIEN_Msk,   /**< Enable FIFO standard t
 366:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_TBCTR_TBERIEN_Msk  /**< Enable transmi
 367:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_CONF_t;
 368:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 369:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 370:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO status
 371:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 372:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT
 373:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 374:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_STANDARD = USIC_CH_TRBSR_STBI_Msk,    /**< Transmit FIFO status: Standar
 375:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_ERROR    = USIC_CH_TRBSR_TBERI_Msk    /**< Transmit FIFO status: Error e
 376:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_t;
 377:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 378:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 379:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO interrupt node pointers
 380:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 381:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER
 382:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 383:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_RBCTR_SRBINP_Pos, /**< Node pointer
 384:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_RBCTR_ARBINP_Pos  /**< Node pointer
 385:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t;
 386:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 387:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 388:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO event configuration
 389:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 390:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT_CONF
 391:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 392:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD  = USIC_CH_RBCTR_SRBIEN_Msk,   /**< Enable FIFO standard r
 393:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_RBCTR_RBERIEN_Msk,  /**< Enable receiv
 394:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE = USIC_CH_RBCTR_ARBIEN_Msk   /**< Enable FIFO alternative
 395:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_CONF_t;
 396:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 397:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 398:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO status
 399:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 400:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT
 401:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 402:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_STANDARD  = USIC_CH_TRBSR_SRBI_Msk,   /**< Receive FIFO status: Standard
 403:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ERROR     = USIC_CH_TRBSR_RBERI_Msk,  /**< Receive FIFO status: Error ev
 404:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE = USIC_CH_TRBSR_ARBI_Msk    /**< Receive FIFO status: Alternat
 405:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_t;
 406:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 407:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 408:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator clock source
 409:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 410:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_SOURCE
 411:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 412:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DIVIDER = 0x0UL, /**< Baudrate generator clock source : Source divid
 413:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T    = 0x2UL << USIC_CH_BRG_CLKSEL_Pos  /**< Baudrate generator c
 414:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_SOURCE_t;
 415:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 416:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 417:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator divider mode
 418:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 419:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE
 420:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 421:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_DISABLED   = 0x0UL, /**< Baudrate generator clock divider: Dis
 422:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL     = 0x1UL << USIC_CH_FDR_DM_Pos, /**< Baudrate genera
 423:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL = 0x2UL << USIC_CH_FDR_DM_Pos  /**< Baudrate genera
 424:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t;
 425:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 426:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 427:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator master clock passive level
 428:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 429:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL
 430:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 431:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0 = 0x0UL, /**< Baudrate generator master clock passiv
 432:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_1 = 0x1UL << USIC_CH_BRG_MCLKCFG_Pos  /**< Baudrate ge
 433:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t;
 434:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 435:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 436:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock passive level
 437:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 438:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 439:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 440:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = 0x0UL, /**< Shift clock passive leve
 441:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = 0x1UL << USIC_CH_BRG_SCLKCFG_Pos, /*
 442:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = (int32_t)(0x2UL << USIC_CH_BRG_SCLKC
 443:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = (int32_t)(0x3UL << USIC_CH_BRG_SCLKC
 444:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 445:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 446:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 447:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock output
 448:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 449:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
 450:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 451:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = 0x0UL, /**< Baudrate generator shift clock output: SCL.
 452:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1 = 0x1UL << USIC_CH_BRG_SCLKOSEL_Pos   /**< Baudrate genera
 453:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 454:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 455:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 456:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel shift direction.
 457:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * Defines the shift direction of the data words for transmission and reception
 458:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 459:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_SHIFT_DIRECTION
 460:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 461:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_LSB_FIRST = 0x0UL, /**< Shift LSB first. The first data bit of a data
 462:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST = 0x1UL << USIC_CH_SCTR_SDIR_Pos /**< Shift MSB first. The 
 463:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_SHIFT_DIRECTION_t;
 464:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 465:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 466:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 467:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * DATA STRUCTURES
 468:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 469:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 470:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard start*/
 471:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 472:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   #pragma push
 473:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   #pragma anon_unions
 474:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 475:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   #pragma warning 586
 476:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 477:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 478:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 479:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC module structure
 480:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 481:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef USIC_GLOBAL_TypeDef XMC_USIC_t;
 482:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 483:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 484:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel structure.<br> The members of the structure are same as in the device header file, 
 485:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * except for some registers.
 486:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * DX0CR, DX1CR, DX2CR, DX3CR, DX4CR and DX5CR are replaced with the array DXCR[6].
 487:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * TBUF0 to TBUF31 are replaced with TBUF[32].
 488:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * IN0 to IN31 are replaced with IN[32].
 489:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 490:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef struct XMC_USIC_CH
 491:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 492:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED0;
 493:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  CCFG;			/**< Channel configuration register*/
 494:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED1;
 495:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  KSCFG;			/**< Kernel state configuration register*/
 496:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  FDR;			/**< Fractional divider configuration register*/
 497:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BRG;			/**< Baud rate generator register*/
 498:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  INPR;			/**< Interrupt node pointer register*/
 499:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  DXCR[6];		/**< Input control registers DX0 to DX5.*/
 500:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  SCTR;			/**< Shift control register*/
 501:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TCSR;
 502:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 503:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   union {
 504:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IICMode;	/**< I2C protocol configuration register*/
 505:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IISMode; /**< I2S protocol configuration register*/
 506:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_SSCMode;	/**< SPI protocol configuration register*/
 507:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR;			/**< Protocol configuration register*/
 508:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_ASCMode;	/**< UART protocol configuration register*/
 509:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   };
 510:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CCR;			/**< Channel control register*/
 511:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CMTR;			/**< Capture mode timer register*/
 512:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 513:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   union {
 514:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IICMode;	/**< I2C protocol status register*/
 515:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IISMode;	/**< I2S protocol status register*/
 516:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_SSCMode;	/**< SPI protocol status register*/
 517:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR;			/**< Protocol status register*/
 518:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_ASCMode;	/**< UART protocol status register*/
 519:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   };
 520:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  PSCR;			/**< Protocol status clear register*/
 521:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFSR;		/**< Receive buffer status register*/
 522:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF;			/**< Receive buffer register*/
 523:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFD;			/**< Debug mode receive buffer register*/
 524:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF0;			/**< Receive buffer 0*/
 525:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF1;			/**< Receive buffer 1*/
 526:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF01SR;		/**< Receive buffer status register*/
 527:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  FMR;			/**< Flag modification register*/
 528:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED2[5];
 529:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBUF[32];		/**< Tranmsit buffer registers*/
 530:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYP;			/**< FIFO bypass register*/
 531:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYPCR;			/**< FIFO bypass control register*/
 532:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBCTR;			/**< Transmit FIFO control register*/
 533:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  RBCTR;			/**< Receive FIFO control register*/
 534:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  TRBPTR;		/**< Transmit/recive buffer pointer register*/
 535:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TRBSR;			/**< Transmit/receive buffer status register*/
 536:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  TRBSCR;		/**< Transmit/receive buffer status clear register*/
 537:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTR;			/**< Receive FIFO output register*/
 538:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTDR;			/**< Receive FIFO debug output register*/
 539:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED3[23];
 540:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  IN[32];		/**< Transmit FIFO input register*/
 541:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_t;
 542:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 543:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 544:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard end*/
 545:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 546:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   #pragma pop
 547:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 548:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   #pragma warning restore
 549:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 550:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 551:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 552:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * API PROTOTYPES
 553:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  ******************************************************************************/
 554:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 555:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #ifdef __cplusplus
 556:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** extern "C" {
 557:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 558:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 559:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsModuleValid(const XMC_USIC_t *const module)
 560:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 561:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   bool tmp;
 562:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 563:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   tmp = (module == XMC_USIC0);
 564:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 565:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC1);
 566:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 567:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 568:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC2);
 569:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 570:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 571:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return tmp;
 572:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 573:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 574:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsChannelValid(const XMC_USIC_CH_t *const channel)
 575:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 576:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   bool tmp;
 577:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 578:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   tmp = ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1));
 579:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 580:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1));
 581:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 582:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 583:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1));
 584:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 585:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 586:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return tmp;
 587:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 588:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 589:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /* Common APIs */
 590:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 591:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 592:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 593:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 594:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 595:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
 596:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 597:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables the USIC module.\n\n
 598:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables the clock for the USIC module by following the
 599:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * clock enabling sequence for the selected device.
 600:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 601:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 602:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 603:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 604:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Enable(XMC_USIC_t *const usic);
 605:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 606:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 607:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 608:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 609:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 610:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 611:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables the USIC module.\n\n
 612:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables the clock for the USIC module by following the clock
 613:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * disabling sequence for the selected device.
 614:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 615:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 616:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 617:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 618:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Disable(XMC_USIC_t *const usic);
 619:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 620:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 621:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 622:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 623:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 624:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 625:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables the USIC channel. \n\n
 626:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel is enabled by setting the module enable bit in KSCFG register bitfield MODEN.
 627:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * On enabling, the channel is set to idle mode.
 628:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 629:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 630:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 631:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 632:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel);
 633:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 634:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 635:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 636:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 637:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 638:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 639:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables the USIC channel.\n\n
 640:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel is disabled by setting the module enable bit(MDEN) to 0 in the register KSCFG.
 641:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 642:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 643:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 644:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 645:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel);
 646:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 647:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 648:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 649:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 650:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. \b Range: minimum value = 100, maximum value depends on the perip
 651:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/(10
 652:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 653:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 654:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 655:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 656:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 657:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 658:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 659:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 660:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel. \n\n
 661:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 662:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 663:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * baudrate.
 664:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 665:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 666:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 667:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 668:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 669:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 670:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 671:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 672:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 673:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. Only integer dividers of peripheral clock are achievable
 674:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 675:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *            This can be related to the number of samples for each logic state of the data signal.
 676:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *            \b Range: 1 to 32. Value should be chosen based on the protocol used.
 677:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 678:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *      \b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 679:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *            @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 680:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 681:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 682:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel using the integer divider which restrics the achieva
 683:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 684:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 685:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * baudrate.
 686:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 687:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 688:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 689:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 690:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t 
 691:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 692:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 693:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 694:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 695:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 696:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel for .\n
 697:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 698:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 699:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Calculates the current used baudrate (fCTQIN) of a USIC channel. \n\n
 700:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png	 
 701:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png	 
 702:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 703:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 704:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 705:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 706:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetBaudrate(XMC_USIC_CH_t *const channel);
 707:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 708:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 709:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 710:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 711:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel.\n
 712:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 713:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 714:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Calculates the current used SCLK frequency of a USIC channel. \n\n
 715:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png	 
 716:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png	 
 717:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 718:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 719:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 720:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 721:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetSCLKFrequency(XMC_USIC_CH_t *const channel);
 722:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 723:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 724:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 725:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 726:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel.\n
 727:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 728:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 729:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Calculates the current used MCLK frequency of a USIC channel. \n\n
 730:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png	 
 731:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png	 
 732:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 733:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 734:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 735:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 736:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetMCLKFrequency(XMC_USIC_CH_t *const channel);
 737:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 738:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 739:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 740:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 741:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  pdiv Desired divider for the external frequency input. \b Range: minimum value = 1, maxi
 742:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 743:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 744:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 745:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Selects which edge of the synchronized(and optionally filtered) signal 
 746:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *                          output DXnT of the input stage.
 747:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 748:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 749:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 750:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 751:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables the external frequency input for the Baudrate Generator and configures the divider, over
 752:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * the combination mode of the USIC channel. \n\n
 753:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 754:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 755:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBRGInputClockSource(), XMC_USIC_CH_SetInputTriggerCombinationMode() \n\n\n
 756:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 757:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 758:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 		                                         const uint16_t pdiv,
 759:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 												 const uint32_t oversampling,
 760:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 												 const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode);
 761:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 762:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 763:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 764:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 765:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 766:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 767:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  source Input source select for the input stage. The table below maps the enum value with
 768:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 769:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 770:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * </tr></table>
 771:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 772:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 773:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 774:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Selects the data source for USIC input stage.\n\n
 775:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 776:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * like DX0CR, DX1CR etc. 
 777:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *  
 778:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 779:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableIn
 780:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 781:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 782:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INP
 783:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 784:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 785:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 786:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 787:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 788:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 789:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 790:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 791:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 792:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 793:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 794:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 795:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is controlled by the
 796:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * protocol pre-processor. \n\n
 797:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 798:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 799:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToDataInput()\n\n\n
 800:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 801:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_USIC_CH_t *const channel, const XMC
 802:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 803:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_INSW_Msk;
 804:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 805:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 806:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 807:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 808:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 809:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 810:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 811:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 812:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 813:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 814:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is connected to
 815:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * the selected data input line. \n\n
 816:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 817:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * This setting is used
 818:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * if the signals are directly derived from an input
 819:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * pin without treatment by the protocol preprocessor.
 820:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 821:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToPPP()\n\n\n
 822:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 823:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToDataInput(XMC_USIC_CH_t *const channel, con
 824:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 825:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_INSW_Msk;
 826:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 827:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 828:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 829:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 830:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 831:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 832:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 833:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 834:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 835:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 836:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables input inversion for USIC channel input data signal. \n\n
 837:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 838:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Polarity of the input source can be changed to provide inverted data input.
 839:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 840:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputInversion()\n\n\n
 841:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 842:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_
 843:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 844:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 845:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 846:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 847:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 848:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 849:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 850:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 851:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 852:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 853:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 854:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 855:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables input inversion for USIC channel. \n\n
 856:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 857:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Resets the input data polarity for the USIC channel input data signal.
 858:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 859:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion()\n\n\n
 860:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 861:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC
 862:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 863:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DPOL_Msk;
 864:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 865:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 866:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 867:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 868:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 869:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 870:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 871:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 872:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables delay compensation. \n\n
 873:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 874:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Delay compensation can be applied to the receive path.
 875:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 876:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableDelayCompensation()\n\n\n
 877:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 878:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableDelayCompensation(XMC_USIC_CH_t *const channel)
 879:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 880:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] |= USIC_CH_DX1CR_DCEN_Msk;
 881:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 882:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 883:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 884:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 885:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 886:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 887:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 888:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 889:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables delay compensation.. \n\n
 890:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 891:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 892:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableDelayCompensation()\n\n\n
 893:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 894:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableDelayCompensation(XMC_USIC_CH_t *const channel)
 895:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 896:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] &=(uint32_t)~USIC_CH_DX1CR_DCEN_Msk;
 897:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 898:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 899:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 900:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 901:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 902:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 903:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 904:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 905:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 906:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 907:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables the input digital filter for USIC channel input data signal. \n\n
 908:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be digitally filtered.
 909:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 910:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 911:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 912:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 913:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_U
 914:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 915:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 916:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 917:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 918:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 919:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 920:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 921:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 922:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 923:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 924:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 925:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables the input digital filter for USIC channel input data signal. \n\n
 926:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be digitally filtered.
 927:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 928:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 929:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 930:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 931:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_
 932:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 933:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DFEN_Msk;
 934:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 935:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 936:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 937:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 938:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 939:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 940:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 941:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 942:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 943:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables input synchronization for the USIC channel input data signal. \n\n
 944:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be synchronized with fPERIPH.
 945:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * A noisy signal can be synchronized and filtered by enabling the digital filter.
 946:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 947:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 948:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 949:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 950:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_IN
 951:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 952:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 953:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 954:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 955:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 956:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 957:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 958:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 959:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 960:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 961:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 962:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables input synchronization for the USIC channel input data signal. \n\n
 963:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be synchronized.
 964:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 965:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 966:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_DisableInputDigitalFilter() \n\n\n
 967:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 968:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_I
 969:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 970:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DSEN_Msk;
 971:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 972:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 973:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 974:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 975:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 976:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 977:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  sampling_freq Sampling frequency value of type \a XMC_USIC_CH_INPUT_SAMPLING_FREQ_t.
 978:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 979:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 980:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 981:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets sampling frequency for USIC channel input data signal. \n\n
 982:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 983:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 984:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 985:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 986:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSamplingFreq(XMC_USIC_CH_t *const channel,
 987:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_t input,
 988:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_SAMPLING_FREQ_t sampling_fr
 989:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 990:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_SFSEL_Msk)) |
 991:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)sampling_freq);
 992:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 993:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 994:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 995:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 996:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 997:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 998:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 999:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Combination mode value of type \a XMC_USIC_CH_INPUT_COMBINATION_MODE_t.
1000:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1001:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1002:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1003:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Selects which edge of the synchronized signal DXnS activates the trigger output DXnT of the inpu
1004:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1005:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1006:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
1007:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1008:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
1009:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_t input,
1010:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_COMBINATION_MODE_
1011:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1012:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
1013:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
1014:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1015:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1016:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1017:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1018:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1019:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  clock_source clock source for the BRG.
1020:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1021:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1022:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1023:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the clock source for the BRG. \n\n
1024:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1025:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1026:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
1027:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1028:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USI
1029:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1030:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
1031:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1032:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1033:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1034:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1035:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1036:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1037:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1038:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1039:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1040:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1041:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit buffer. \n\n
1042:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in TBUF[0U].
1043:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1044:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1045:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1046:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUFTCI() \n\n\n
1047:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1048:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUF(XMC_USIC_CH_t *const channel, const uint16_t data)
1049:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1050:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TBUF[0U] = data;
1051:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1052:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1053:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1054:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1055:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1056:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1057:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param transmit_control_information transmit control information to be configured while transmit
1058:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31.
1059:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1060:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1061:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1062:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit buffer in a control mode. \n\n
1063:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the respective control mode is enabled , this API can be used.
1064:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1065:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1066:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1067:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUF() \n\n\n
1068:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1069:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
1070:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                              const uint16_t data,
1071:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                              const uint32_t transmit_control_information)
1072:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1073:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TBUF[transmit_control_information] = data;
1074:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1075:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1076:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1077:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1078:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1079:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1080:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					   \b Range: minimum= 1, maximum= 16. \n
1081:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					   e.g: For word length of 8, \a word_length should be provided as 8.
1082:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1083:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1084:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1085:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1086:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1087:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1088:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1089:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1090:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1091:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
1092:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1093:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
1094:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                   (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
1095:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1096:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1097:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1098:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1099:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1100:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1101:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *             \b Range: minimum= 1, maximum= 16. \n
1102:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *             e.g: For word length of 8, \a word_length should be provided as 8.
1103:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1104:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1105:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1106:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1107:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1108:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1109:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1110:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1111:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1112:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetShiftDirection(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_
1113:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1114:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_SDIR_Msk)) | (uint32_t)shift_direction;
1115:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1116:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1117:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1118:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1119:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1120:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1121:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Captured counter value 
1122:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1123:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1124:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1125:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The value of the counter is captured if one of the trigger signals DX0T or DX1T are activated by
1126:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1127:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetCaptureTimerValue(const XMC_USIC_CH_t *const channel)
1128:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1129:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return channel->CMTR;
1130:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1131:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1132:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1133:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1134:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1135:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  mode divider mode ::XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t \n
1136:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  step divider \n
1137:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL resulting divider = 1023 - step \n
1138:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL resulting divider = 1023 / step \n
1139:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1140:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1141:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1142:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1143:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The fractional divider generates its output frequency fFD by either dividing the input frequency
1144:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1145:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1146:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFractionalDivider(XMC_USIC_CH_t *const channel, const XMC_USIC_
1147:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1148:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->FDR = mode | step;
1149:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1150:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1151:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1152:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1153:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1154:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  frame_length Number of bits in a frame. \n
1155:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						\b Range: minimum= 1, maximum= 0x3f. The maximum value for fixed frame size is 0x3f. \n
1156:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						e.g: For a frame length of 16, \a frame_length should be provided as 16.
1157:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1158:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1159:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1160:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Define the data frame length.\n\n
1161:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Set the number of bits to be serially transmitted in a frame.
1162:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The frame length should be multiples of word length. If the value is set to 0x40, the frame leng
1163:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * has to be controlled explicitly. 
1164:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1165:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1166:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1167:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1168:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
1169:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1170:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
1171:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                   (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
1172:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1173:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1174:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1175:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1176:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1177:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be enabled. Use @ref XMC_USIC_CH_EVENT_t for the 
1178:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1179:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1180:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1181:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1182:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1183:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enable the channel interrupt events.\n\n
1184:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Common channel events related to serial communication can be configured using this API.
1185:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1186:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1187:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1188:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1189:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1190:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1191:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1192:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1193:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->CCR |= event;
1194:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1195:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1196:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1197:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1198:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1199:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be disabled. Use @ref XMC_USIC_CH_EVENT_t for the
1200:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1201:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1202:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1203:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1204:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1205:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disable the channel interrupt events. \n\n
1206:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1207:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1208:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1209:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1210:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1211:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
1212:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1213:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1214:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->CCR &= (uint32_t)~event;
1215:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1216:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1217:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1218:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1219:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1220:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
1221:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
1222:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
1223:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param service_request Service request number.\n
1224:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1225:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1226:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1227:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1228:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the interrupt node for USIC channel events. \n\n
1229:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
1230:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
1231:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
1232:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1233:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1234:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent() \n\n\n
1235:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1236:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1237:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                          const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
1238:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                          const uint32_t service_request);
1239:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1240:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1241:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1242:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1243:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Stataus @ref XMC_USIC_CH_TBUF_STATUS_IDLE if transmit buffer is free,
1244:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *                 @ref XMC_USIC_CH_TBUF_STATUS_BUSY if transmit buffer is busy.
1245:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1246:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1247:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Gets transmit buffer status. \n\n
1248:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Status indicates whether the transmit buffer is free, or busy transmitting data.
1249:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The status depends on the value of TDV flag in TCSR register.
1250:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * This status can be used while transmitting data. Transmit data when the transmit buffer
1251:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * status is @ref XMC_USIC_CH_TBUF_STATUS_IDLE.
1252:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1253:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1254:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetDataOutputMode() \n\n\n
1255:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1256:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const 
1257:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1258:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 333              	 .loc 2 1258 0 discriminator 1
 334 0016 836B     	 ldr r3,[r0,#56]
 335              	.LBE35:
 336              	.LBE34:
 250:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 251:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 337              	 .loc 1 251 0 discriminator 1
 338 0018 13F0800F 	 tst r3,#128
 339 001c FBD1     	 bne .L33
 340              	.LVL39:
 341              	.LBB36:
 342              	.LBB37:
 343              	 .file 3 "C:/Files/Projects/Git/XMCLib/inc/xmc_i2c.h"
   1:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
   2:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @file xmc_i2c.h
   3:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @date 2019-05-07
   4:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
   5:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @cond
   6:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  **************************************************************************************************
   7:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
   9:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * All rights reserved.                        
  11:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *                                             
  12:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * following conditions are met:   
  14:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *                                                                              
  15:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * disclaimer.                        
  17:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * 
  18:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * 
  21:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *                                                                              
  24:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *                                                                              
  32:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  **************************************************************************************************
  35:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
  36:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Change History
  37:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * --------------
  38:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
  39:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * 2015-02-20:
  40:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *     - Initial <br>
  41:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *      
  42:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * 2015-05-20:
  43:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *     - Description updated <br>
  44:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_TriggerServiceRequest() and XMC_I2C_CH_SelectInterruptNodePointer() <br>
  45:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
  46:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * 2015-06-20:
  47:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  48:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
  49:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * 2015-08-27:
  50:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *     - Added APIs for external input for BRG configuration:XMC_I2C_CH_ConfigExternalInputSignalTo
  51:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
  52:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * 2015-09-01:
  53:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *     - Added APIs for enabling or disabling the ACK response to a 0x00 slave address: XMC_I2C_CH_
  54:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *       XMC_I2C_CH_DisableSlaveAcknowledgeTo00(). <br>
  55:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *     - Modified XMC_I2C_CH_SetInputSource() API for avoiding complete DXCR register overwriting. 
  56:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *     - Modified XMC_I2C_CH_EVENT_t enum for supporting XMC_I2C_CH_EnableEvent() and XMC_I2C_CH_Di
  57:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *       for supporting multiple events configuration <br>
  58:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
  59:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * 2015-10-02:
  60:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *     - Fix 10bit addressing
  61:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
  62:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * 2015-10-07:
  63:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *     - Fix register access in XMC_I2C_CH_EnableSlaveAcknowledgeTo00() and XMC_I2C_CH_DisableSlave
  64:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *     - Naming of APIs modified: from XMC_I2C_CH_EnableSlaveAcknowledgeTo00() to  XMC_I2C_CH_Enabl
  65:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *       and from XMC_I2C_CH_DisableSlaveAcknowledgeTo00() to XMC_I2C_CH_DisableAcknowledgeAddress0
  66:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
  67:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * 2016-05-20:
  68:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_EnableDataTransmission() and XMC_I2C_CH_DisableDataTransmission()
  69:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
  70:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * 2016-08-17:
  71:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *     - Improved documentation of slave address passing
  72:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
  73:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * 2017-10-25:
  74:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_EnableMasterClock() and XMC_I2C_CH_DisableMasterClock()
  75:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
  76:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * 2019-05-07:
  77:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *     - Added normal_divider_mode to XMC_I2C_CH_CONFIG_t configuration structure.
  78:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *       It selects normal divider mode for baudrate generator instead of default fractional divide
  79:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_SetBaudrateEx()
  80:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
  81:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @endcond 
  82:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
  83:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
  84:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
  85:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** #ifndef XMC_I2C_H
  86:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C_H
  87:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
  88:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
  89:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * HEADER FILES
  90:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
  91:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
  92:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** #include "xmc_usic.h"
  93:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
  94:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
  95:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @addtogroup XMClib XMC Peripheral Library
  96:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @{
  97:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
  98:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
  99:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 100:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @addtogroup I2C
 101:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @brief Inter Integrated Circuit(IIC) driver for the XMC microcontroller family. 
 102:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 103:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * USIC IIC Features: <br>
 104:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *  * Two-wire interface, with one line for shift clock transfer and synchronization (shift clock S
 105:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *	* Communication in standard mode (100 kBit/s) or in fast mode (up to 400 kBit/s) <br>
 106:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *	* Support of 7-bit addressing, as well as 10-bit addressing <br>
 107:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *	* Master mode operation, where the IIC controls the bus transactions and provides the clock sign
 108:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *	* Slave mode operation, where an external master controls the bus transactions and provides the 
 109:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *	* Multi-master mode operation, where several masters can be connected to the bus and bus arbitra
 110:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 	  The master/slave operation of an IIC bus participant can change from frame to frame. <br>
 111:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *	* Efficient frame handling (low software effort), also allowing DMA transfers <br>
 112:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *	* Powerful interrupt handling due to multitude of indication flags <br>
 113:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @{
 114:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 115:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 116:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 117:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * MACROS
 118:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 119:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 120:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** #if defined(USIC0)
 121:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C0_CH0 XMC_USIC0_CH0                   /**< USIC0 channel 0 base address */
 122:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C0_CH1 XMC_USIC0_CH1                   /**< USIC0 channel 1 base address */
 123:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** #endif
 124:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 125:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** #if defined(USIC1)
 126:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C1_CH0 XMC_USIC1_CH0                   /**< USIC1 channel 0 base address */
 127:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C1_CH1 XMC_USIC1_CH1                   /**< USIC1 channel 1 base address */
 128:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** #endif
 129:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 130:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** #if defined(USIC2)
 131:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C2_CH0 XMC_USIC2_CH0                   /**< USIC2 channel 0 base address */
 132:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C2_CH1 XMC_USIC2_CH1                   /**< USIC2 channel 1 base address */
 133:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** #endif
 134:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 135:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C_10BIT_ADDR_GROUP       (0x7800U)	 /**< Value to verify the address is 10-bit or not
 136:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 137:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 138:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * ENUMS
 139:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 140:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 141:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 142:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @brief I2C Status
 143:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 144:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_STATUS
 145:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** {
 146:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_OK,      /**< Status OK */
 147:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_ERROR,   /**< Status ERROR */
 148:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_BUSY     /**< Status BUSY */
 149:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_STATUS_t;
 150:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 151:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 152:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @brief I2C status
 153:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 154:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_STATUS_FLAG
 155:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** {
 156:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_SLAVE_SELECT = USIC_CH_PSR_IICMode_SLSEL_Msk,                     /**< Sla
 157:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND = USIC_CH_PSR_IICMode_WTDF_Msk,              /**< Wro
 158:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_SCR_Msk,           /**< Sta
 159:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_RSCR_Msk, /**< Rep
 160:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_PCR_Msk,            /**< Sto
 161:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED = USIC_CH_PSR_IICMode_NACK_Msk,                     /**< NAC
 162:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST = USIC_CH_PSR_IICMode_ARL_Msk,                   /**< Arb
 163:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_SLAVE_READ_REQUESTED = USIC_CH_PSR_IICMode_SRR_Msk,               /**< Sla
 164:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ERROR = USIC_CH_PSR_IICMode_ERR_Msk,                              /**< Err
 165:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED = USIC_CH_PSR_IICMode_ACK_Msk,                       /**< ACK
 166:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_RECEIVER_START_INDICATION = USIC_CH_PSR_IICMode_RSIF_Msk,         /**< Rec
 167:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_DATA_LOST_INDICATION = USIC_CH_PSR_IICMode_DLIF_Msk,              /**< Dat
 168:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION = USIC_CH_PSR_IICMode_TSIF_Msk,         /**< Tra
 169:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION = USIC_CH_PSR_IICMode_TBIF_Msk,        /**< Tra
 170:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION = USIC_CH_PSR_IICMode_RIF_Msk,                 /**< Rec
 171:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION = USIC_CH_PSR_IICMode_AIF_Msk,     /**< Alt
 172:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION = USIC_CH_PSR_IICMode_BRGIF_Msk    /**< Bau
 173:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_STATUS_FLAG_t;
 174:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 175:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 176:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @brief I2C receiver status. The received data byte is available at the bit
 177:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * positions RBUF[7:0], whereas the additional information is monitored at the bit positions
 178:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** *  RBUF[12:8].
 179:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 180:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_RECEIVER_STATUS_FLAG
 181:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** {
 182:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ACK = 0x1U,      /**< Bit 8:  Value of Received Acknowledgement b
 183:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_FIN = 0x2U,      /**< Bit 9:  A 1 at this bit position indicates 
 184:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****                                                                 followed by the address reception t
 185:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****                                                                 been received. A 0 at this bit posi
 186:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_MODE = 0x4U,     /**< Bit 10: A 0 at this bit position indicates 
 187:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****                                                                 when the device has been in slave m
 188:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ERR = 0x8U,      /**< Bit 11: A 1 at this bit position indicates 
 189:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****                                                                 data byte in the receive buffer */
 190:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ADR = 0x10       /**< Bit 12: A 0 at this bit position indicates 
 191:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****                                                                 has been received. A 1 indicates a 
 192:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_RECEIVER_STATUS_FLAG_t;
 193:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 194:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 195:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @brief I2C commands
 196:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 197:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_CMD
 198:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** {
 199:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_CMD_WRITE,                            /**< I2C Command Write */
 200:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_CMD_READ                              /**< I2C Command Read */
 201:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_CMD_t;
 202:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 203:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 204:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @brief I2C events
 205:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 206:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_EVENT
 207:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** {
 208:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk,  /**< Receive start event */
 209:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk,  /**< Data lost event */
 210:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk,  /**< Transmit shift event */
 211:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk,  /**< Transmit buffer event */
 212:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,   /**< Receive event */
 213:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,   /**< Alternate receive event */
 214:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk, /**< Baudrate generator event */
 215:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 216:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_START_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_SCRIEN_Msk,             /**< Star
 217:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_REPEATED_START_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_RSCRIEN_Msk,   /**< Repe
 218:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_STOP_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_PCRIEN_Msk,              /**< Stop
 219:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_NACK = USIC_CH_PCR_IICMode_NACKIEN_Msk,                                /**< NACK
 220:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ARBITRATION_LOST = USIC_CH_PCR_IICMode_ARLIEN_Msk,                     /**< Arbi
 221:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_SLAVE_READ_REQUEST = USIC_CH_PCR_IICMode_SRRIEN_Msk,                   /**< Slav
 222:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ERROR = USIC_CH_PCR_IICMode_ERRIEN_Msk,	                              /**< Error
 223:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ACK = USIC_CH_PCR_IICMode_ACKIEN_Msk                                   /**< ACK 
 224:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_EVENT_t;
 225:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 226:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 227:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @brief I2C input stage selection
 228:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 229:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_INPUT
 230:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** {
 231:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA = 0U,   /**< selection of sda input stage */
 232:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** #if UC_FAMILY == XMC1
 233:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA1 = 3U,
 234:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA2 = 5U,
 235:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** #endif  
 236:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SCL = 1U,  /**< selection of scl input stage */
 237:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** #if UC_FAMILY == XMC1
 238:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SCL1 = 4U
 239:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** #endif  
 240:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_INPUT_t;
 241:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 242:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 243:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * I2C channel interrupt node pointers
 244:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 245:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_INTERRUPT_NODE_POINTER
 246:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** {
 247:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 248:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 249:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_RECEIVE             = XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIV
 250:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERN
 251:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOC
 252:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_INTERRUPT_NODE_POINTER_t;
 253:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 254:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 255:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * DATA STRUCTURES
 256:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 257:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 258:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @brief I2C_CH configuration structure
 259:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 260:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** typedef struct XMC_I2C_CH_CONFIG
 261:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** {
 262:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   uint32_t baudrate;   /**< baud rate configuration upto max of 400KHz */
 263:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   bool normal_divider_mode; /**< Selects normal divider mode for baudrate generator instead of defa
 264:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   uint16_t address;    /**< slave address 
 265:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****                             A 7-bit address needs to be left shifted it by 1.
 266:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****                             A 10-bit address needs to be ORed with XMC_I2C_10BIT_ADDR_GROUP. */
 267:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_CONFIG_t;
 268:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 269:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 270:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * API PROTOTYPES
 271:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 272:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 273:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** #ifdef __cplusplus
 274:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** extern "C" {
 275:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** #endif
 276:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 277:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 278:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 279:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param config  Constant pointer to I2C channel config structure of type @ref XMC_I2C_CH_CONFIG_t
 280:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 281:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 282:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 283:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 284:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Initializes the I2C \a channel.<br>
 285:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 286:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par
 287:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Configures the data format in SCTR register. Sets the slave address, baud rate. Enables transmit
 288:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * and disables parity generation.<br>
 289:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 290:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 291:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_Enable()\n\n
 292:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 293:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 294:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config);
 295:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 296:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 297:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 298:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param rate  baud rate of I2C channel
 299:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 300:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 301:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 302:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 303:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Sets the rate of I2C \a channel.
 304:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 305:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Note:</b><br>
 306:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Standard over sampling is considered if rate <= 100KHz and fast over sampling is considered if r
 307:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 308:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 309:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetBaudrate()\n\n
 310:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 311:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate);
 312:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 313:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 314:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 315:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param rate  baud rate of I2C channel
 316:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param normal_divider_mode Selects normal divider mode for baudrate generator instead of default
 317:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 318:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 319:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 320:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 321:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Sets the rate of I2C \a channel.
 322:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 323:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Note:</b><br>
 324:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Standard over sampling is considered if rate <= 100KHz and fast over sampling is considered if r
 325:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 326:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 327:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetBaudrate()\n\n
 328:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 329:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, bool norm
 330:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 331:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 332:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 333:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 334:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 335:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 336:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 337:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Starts the I2C \a channel.
 338:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 339:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par
 340:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Sets the USIC input operation mode to I2C mode using CCR register.
 341:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 342:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 343:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetMode()\n\n
 344:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 345:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
 346:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** {
 347:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 348:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** }
 349:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 350:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 351:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 352:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 353:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @return @ref XMC_I2C_CH_STATUS_t<br>
 354:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 355:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 356:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Stops the I2C \a channel.<br>
 357:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 358:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par
 359:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Sets the USIC input operation to IDLE mode using CCR register.
 360:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 361:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 362:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetMode()\n\n
 363:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 364:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_Stop(XMC_USIC_CH_t *const channel);
 365:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 366:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 367:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 368:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param service_request Service request number in the range of 0-5
 369:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 370:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 371:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 372:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Sets the interrupt node for protocol interrupt.<br>
 373:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 374:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par
 375:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * To generate interrupt for an event, node pointer should be configured with service request numbe
 376:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
 377:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 378:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Note:</b><br>
 379:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * NVIC node should be separately enabled to generate the interrupt. After setting the node pointer
 380:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 381:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 382:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 383:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 384:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
 385:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****                                                         const uint8_t service_request)
 386:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** {
 387:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service
 388:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** }
 389:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 390:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 391:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 392:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 393:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * 				  \b Range: @ref XMC_I2C0_CH0, @ref XMC_I2C0_CH1,@ref XMC_I2C1_CH0,@ref XMC_I2C1_CH1,@ref XM
 394:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
 395:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * 						  \b Range: @ref XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
 396:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * 						  			@ref XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
 397:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param service_request Service request number.\n
 398:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * 						  \b Range: 0 to 5.
 399:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @return None
 400:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 401:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description</b><br>
 402:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Sets the interrupt node for USIC channel events. \n\n
 403:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
 404:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
 405:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
 406:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 407:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><BR>
 408:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent() \n\n\n
 409:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 410:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SelectInterruptNodePointer(XMC_USIC_CH_t *const channel,
 411:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****                                                            const XMC_I2C_CH_INTERRUPT_NODE_POINTER_
 412:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****                                                            const uint32_t service_request)
 413:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** {
 414:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, (XMC_USIC_CH_INTERRUPT_NODE_POINTER_t)interrupt_node
 415:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 		                                       (uint32_t)service_request);
 416:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** }
 417:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 418:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 419:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 420:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * 				   \b Range: @ref XMC_I2C0_CH0, @ref XMC_I2C0_CH1,@ref XMC_I2C1_CH0,@ref XMC_I2C1_CH1,@ref X
 421:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param  service_request_line service request number of the event to be triggered. \n
 422:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * 			\b Range: 0 to 5.
 423:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @return None
 424:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 425:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description</b><br>
 426:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Trigger a I2C interrupt service request.\n\n
 427:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * When the I2C service request is triggered, the NVIC interrupt associated with it will be
 428:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * generated if enabled.
 429:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 430:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><BR>
 431:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_SelectInterruptNodePointer() \n\n\n
 432:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 433:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t 
 434:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** {
 435:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_TriggerServiceRequest(channel, (uint32_t)service_request_line);
 436:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** }
 437:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 438:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 439:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 440:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param input I2C channel input stage of type @ref XMC_I2C_CH_INPUT_t
 441:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param source Input source select for the input stage(0->DX0A, 1->DX1A, .. 7->DX7G)
 442:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 443:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 444:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 445:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Sets the input source for I2C \a channel.<br>
 446:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Defines the input stage for the corresponding input line.
 447:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 448:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @note After configuring the input source for corresponding channel, interrupt node pointer is se
 449:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 450:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 451:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetInptSource(), XMC_USIC_CH_SetInterruptNodePointer()
 452:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 453:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 454:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_INPUT
 455:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** {
 456:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   channel->DXCR[input] =  (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_INSW_Msk)) | USIC_CH_DX
 457:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 458:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** }
 459:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 460:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 461:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 462:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param address I2C slave address
 463:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 464:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 465:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 466:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Sets the I2C \a channel slave address.<br>
 467:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 468:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par
 469:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Address is set in PCR_IICMode register by checking if it is in 10-bit address group or 7-bit add
 470:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * (If first five bits of address are assigned with 0xF0, then address mode is 10-bit mode otherwis
 471:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @note A 7-bit address should include an additional bit at the LSB for read/write indication. For
 472:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * be provided as 0x0a. A 10-bit address should be provided with the identifier 0b11110xx at the mo
 473:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * address 0x305 should be provided as 0x7b05(bitwise OR with 0x7800).
 474:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 475:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 476:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_GetSlaveAddress()\n\n
 477:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 478:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address);
 479:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 480:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 481:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel handler of type @ref XMC_USIC_CH_t
 482:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @return uint16_t Slave address<br>
 483:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 484:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 485:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Gets the I2C \a channel slave address.<br>
 486:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 487:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par
 488:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Returns the address using PCR_IICMode register by checking if it is in 10-bit address group or 7
 489:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * (If first five bits of address are assigned with 0xF0, then address mode is considered as 10-bit
 490:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @note A 7-bit address will include an additional bit at the LSB. For example, address 0x05 will 
 491:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * 10-bit address will not include the 10-bit address identifier 0b11110xx at the most signifcant b
 492:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 493:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 494:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_SetSlaveAddress()\n\n
 495:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 496:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** uint16_t XMC_I2C_CH_GetSlaveAddress(const XMC_USIC_CH_t *const channel);
 497:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 498:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 499:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 500:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param addr I2C master address
 501:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param command read/write command
 502:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 503:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 504:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 505:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Starts the I2C master \a channel.<br>
 506:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 507:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par
 508:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Sends the Start condition with read/write command by updating IN/TBUF register based on FIFO/non
 509:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @note Address(addr) should reserve an additional bit at the LSB for read/write indication. For e
 510:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 511:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 512:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * followed by 1-bit field for read/write).
 513:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 514:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 515:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 516:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 517:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD
 518:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 519:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 520:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 521:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param addr I2C master address
 522:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param command read/write command
 523:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 524:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 525:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 526:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Sends the repeated start condition from I2C master \a channel.<br>
 527:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 528:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par
 529:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Sends the repeated start condition with read/write command by updating IN/TBUF register based on
 530:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @note Address(addr) should reserve an additional bit at the LSB for read/write indication. For e
 531:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 532:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 533:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * followed by 1-bit field for read/write).
 534:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 535:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 536:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 537:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 538:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2
 539:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 540:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 541:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 542:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 543:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 544:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 545:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Stops the I2C master \a channel.<br>
 546:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 547:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par
 548:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on F
 549:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 550:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 551:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 552:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 553:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel);
 554:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 555:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 556:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 557:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param data data to transmit from I2C \a channel
 558:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 559:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 560:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 561:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Transmit the data from the I2C master \a channel.<br>
 562:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 563:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par
 564:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 565:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 566:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 567:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 568:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 569:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data);
 570:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 571:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 572:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 573:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param data data to transmit from I2C \a channel
 574:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 575:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 576:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 577:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Transmit the data from the I2C slave \a channel.<br>
 578:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 579:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par
 580:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 581:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 582:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 583:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(),XMC_I2C_CH_ClearStatusFlag()\n\n
 584:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 585:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_SlaveTransmit(XMC_USIC_CH_t *const channel, const uint8_t data);
 586:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 587:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 588:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 589:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 590:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 591:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 592:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Sends the Ack request from I2C master \a channel.<br>
 593:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 594:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par
 595:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FIF
 596:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 597:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 598:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 599:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 600:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel);
 601:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 602:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 603:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 604:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 605:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 606:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 607:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Sends the Nack request from I2C master \a channel.<br>
 608:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 609:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par
 610:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 611:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 612:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 613:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 614:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 615:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel);
 616:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 617:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 618:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 619:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @return uint8_t OUTR/RBUF register data<br>
 620:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 621:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 622:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Reads the data from I2C \a channel.<br>
 623:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 624:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par
 625:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Data is read by using OUTR/RBUF register based on FIFO/non-FIFO modes.
 626:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 627:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 628:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 629:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 630:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel);
 631:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 632:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 633:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 634:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @return uint8_t Receiver status flag<br>
 635:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 636:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 637:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Gets the receiver status of I2C \a channel using RBUF register of bits 8-12 which gives informat
 638:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 639:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 640:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 641:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 642:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE uint8_t XMC_I2C_CH_GetReceiverStatusFlag(XMC_USIC_CH_t *const channel)
 643:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** {
 644:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   return((uint8_t)((channel->RBUF) >> 8U));
 645:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** }
 646:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 647:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 648:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 649:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param event ORed values of @ref XMC_I2C_CH_EVENT_t enum
 650:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 651:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 652:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 653:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Enables the input parameter @ref XMC_I2C_CH_EVENT_t event using PCR_IICMode register.
 654:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 655:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 656:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_DisableEvent()\n\n
 657:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 658:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, uint32_t event);
 659:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 660:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 661:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 662:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param event ORed values of @ref XMC_I2C_CH_EVENT_t enum
 663:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 664:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 665:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 666:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Disables the input parameter @ref XMC_I2C_CH_EVENT_t event using PCR_IICMode register.
 667:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 668:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 669:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent()\n\n
 670:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 671:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, uint32_t event);
 672:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 673:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 674:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 675:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @return uint32_t Status byte<br>
 676:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 677:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 678:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Retrieves the status byte of I2C \a channel using PSR_IICMode register.\n
 679:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 680:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 681:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_ClearStatusFlag()\n\n
 682:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 683:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
 684:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** {
 685:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   return (channel->PSR_IICMode);
 686:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** }
 687:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** 
 688:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** /**
 689:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 690:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @param flag Status flag
 691:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 692:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 693:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 694:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * Clears the status flag of I2C \a channel by setting the input parameter \a flag in PSCR register
 695:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  *
 696:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 697:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_GetStatusFlag()\n\n
 698:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****  */
 699:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
 700:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h **** {
 701:C:/Files/Projects/Git/XMCLib/inc\xmc_i2c.h ****   channel->PSCR |= flag;
 344              	 .loc 3 701 0
 345 001e C36C     	 ldr r3,[r0,#76]
 346 0020 43F40053 	 orr r3,r3,#8192
 347 0024 C364     	 str r3,[r0,#76]
 348              	.LBE37:
 349              	.LBE36:
 252:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 	{
 253:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****       /* check TDV, wait until TBUF is ready */
 254:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     }
 255:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 256:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     /* clear PSR_TBIF */
 257:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 258:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 259:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     channel->TBUF[0] = temp;
 350              	 .loc 1 259 0
 351 0026 C0F88010 	 str r1,[r0,#128]
 352 002a 7047     	 bx lr
 353              	.LVL40:
 354              	.L30:
 260:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 261:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   else
 262:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 263:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     channel->IN[0U] = temp;
 355              	 .loc 1 263 0
 356 002c C0F88011 	 str r1,[r0,#384]
 357 0030 7047     	 bx lr
 358              	 .cfi_endproc
 359              	.LFE218:
 361 0032 00BF     	 .section .text.XMC_I2C_CH_MasterRepeatedStart,"ax",%progbits
 362              	 .align 2
 363              	 .global XMC_I2C_CH_MasterRepeatedStart
 364              	 .thumb
 365              	 .thumb_func
 367              	XMC_I2C_CH_MasterRepeatedStart:
 368              	.LFB219:
 264:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 265:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** }
 266:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** /* Sends master repeated start condition along with read/write command to IN/TBUF register based on
 267:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2
 268:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** {
 369              	 .loc 1 268 0
 370              	 .cfi_startproc
 371              	 
 372              	 
 373              	 
 374              	.LVL41:
 269:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   uint32_t tmp;
 270:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 271:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   if (command == XMC_I2C_CH_CMD_READ)
 375              	 .loc 1 271 0
 376 0000 012A     	 cmp r2,#1
 270:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   if (command == XMC_I2C_CH_CMD_READ)
 377              	 .loc 1 270 0
 378 0002 41F4A061 	 orr r1,r1,#1280
 379              	.LVL42:
 272:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 273:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     tmp |= 0x1U;
 380              	 .loc 1 273 0
 381 0006 08BF     	 it eq
 382 0008 41F00101 	 orreq r1,r1,#1
 383              	.LVL43:
 274:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 275:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 276:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   /* Check FIFO size */
 277:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 384              	 .loc 1 277 0
 385 000c D0F80831 	 ldr r3,[r0,#264]
 386 0010 13F0E06F 	 tst r3,#117440512
 387 0014 0AD1     	 bne .L38
 388              	.L41:
 389              	.LVL44:
 390              	.LBB38:
 391              	.LBB39:
 392              	 .loc 2 1258 0 discriminator 1
 393 0016 836B     	 ldr r3,[r0,#56]
 394              	.LBE39:
 395              	.LBE38:
 278:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {  
 279:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 396              	 .loc 1 279 0 discriminator 1
 397 0018 13F0800F 	 tst r3,#128
 398 001c FBD1     	 bne .L41
 399              	.LVL45:
 400              	.LBB40:
 401              	.LBB41:
 402              	 .loc 3 701 0
 403 001e C36C     	 ldr r3,[r0,#76]
 404 0020 43F40053 	 orr r3,r3,#8192
 405 0024 C364     	 str r3,[r0,#76]
 406              	.LBE41:
 407              	.LBE40:
 280:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 	{
 281:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****       /* check TDV, wait until TBUF is ready */
 282:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     }
 283:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 284:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     /* clear PSR_TBIF */
 285:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 286:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 287:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     channel->TBUF[0] = tmp;
 408              	 .loc 1 287 0
 409 0026 C0F88010 	 str r1,[r0,#128]
 410 002a 7047     	 bx lr
 411              	.LVL46:
 412              	.L38:
 288:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 289:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   else
 290:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 291:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     channel->IN[0U] = tmp;
 413              	 .loc 1 291 0
 414 002c C0F88011 	 str r1,[r0,#384]
 415 0030 7047     	 bx lr
 416              	 .cfi_endproc
 417              	.LFE219:
 419 0032 00BF     	 .section .text.XMC_I2C_CH_MasterStop,"ax",%progbits
 420              	 .align 2
 421              	 .global XMC_I2C_CH_MasterStop
 422              	 .thumb
 423              	 .thumb_func
 425              	XMC_I2C_CH_MasterStop:
 426              	.LFB220:
 292:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 293:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** }
 294:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 295:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** /* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
 296:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
 297:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** {
 427              	 .loc 1 297 0
 428              	 .cfi_startproc
 429              	 
 430              	 
 431              	 
 432              	.LVL47:
 298:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   /* Check FIFO size */
 299:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 433              	 .loc 1 299 0
 434 0000 D0F80831 	 ldr r3,[r0,#264]
 435 0004 13F0E06F 	 tst r3,#117440512
 436 0008 0CD1     	 bne .L44
 437              	.L47:
 438              	.LVL48:
 439              	.LBB42:
 440              	.LBB43:
 441              	 .loc 2 1258 0 discriminator 1
 442 000a 836B     	 ldr r3,[r0,#56]
 443              	.LBE43:
 444              	.LBE42:
 300:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 301:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 445              	 .loc 1 301 0 discriminator 1
 446 000c 13F0800F 	 tst r3,#128
 447 0010 FBD1     	 bne .L47
 448              	.LVL49:
 449              	.LBB44:
 450              	.LBB45:
 451              	 .loc 3 701 0
 452 0012 C36C     	 ldr r3,[r0,#76]
 453 0014 43F40053 	 orr r3,r3,#8192
 454 0018 C364     	 str r3,[r0,#76]
 455              	.LBE45:
 456              	.LBE44:
 302:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     {
 303:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****       /* check TDV, wait until TBUF is ready */
 304:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     }
 305:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 306:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     /* clear PSR_TBIF */
 307:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 308:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 309:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 457              	 .loc 1 309 0
 458 001a 4FF4C063 	 mov r3,#1536
 459 001e C0F88030 	 str r3,[r0,#128]
 460 0022 7047     	 bx lr
 461              	.LVL50:
 462              	.L44:
 310:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 311:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   else
 312:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 313:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 463              	 .loc 1 313 0
 464 0024 4FF4C063 	 mov r3,#1536
 465 0028 C0F88031 	 str r3,[r0,#384]
 466 002c 7047     	 bx lr
 467              	 .cfi_endproc
 468              	.LFE220:
 470 002e 00BF     	 .section .text.XMC_I2C_CH_MasterTransmit,"ax",%progbits
 471              	 .align 2
 472              	 .global XMC_I2C_CH_MasterTransmit
 473              	 .thumb
 474              	 .thumb_func
 476              	XMC_I2C_CH_MasterTransmit:
 477              	.LFB221:
 314:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 315:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** }
 316:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 317:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** /* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
 318:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
 319:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** {
 478              	 .loc 1 319 0
 479              	 .cfi_startproc
 480              	 
 481              	 
 482              	 
 483              	.LVL51:
 320:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   /* Check FIFO size */
 321:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 484              	 .loc 1 321 0
 485 0000 D0F80831 	 ldr r3,[r0,#264]
 486 0004 13F0E06F 	 tst r3,#117440512
 487 0008 0AD1     	 bne .L50
 488              	.L53:
 489              	.LVL52:
 490              	.LBB46:
 491              	.LBB47:
 492              	 .loc 2 1258 0 discriminator 1
 493 000a 836B     	 ldr r3,[r0,#56]
 494              	.LBE47:
 495              	.LBE46:
 322:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {    
 323:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 496              	 .loc 1 323 0 discriminator 1
 497 000c 13F0800F 	 tst r3,#128
 498 0010 FBD1     	 bne .L53
 499              	.LVL53:
 500              	.LBB48:
 501              	.LBB49:
 502              	 .loc 3 701 0
 503 0012 C36C     	 ldr r3,[r0,#76]
 504 0014 43F40053 	 orr r3,r3,#8192
 505 0018 C364     	 str r3,[r0,#76]
 506              	.LBE49:
 507              	.LBE48:
 324:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 	{
 325:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****       /* check TDV, wait until TBUF is ready */
 326:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     }
 327:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 328:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     /* clear PSR_TBIF */
 329:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 330:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 331:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 508              	 .loc 1 331 0
 509 001a C0F88010 	 str r1,[r0,#128]
 510 001e 7047     	 bx lr
 511              	.LVL54:
 512              	.L50:
 332:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 333:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   else
 334:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 335:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 513              	 .loc 1 335 0
 514 0020 C0F88011 	 str r1,[r0,#384]
 515 0024 7047     	 bx lr
 516              	 .cfi_endproc
 517              	.LFE221:
 519 0026 00BF     	 .section .text.XMC_I2C_CH_SlaveTransmit,"ax",%progbits
 520              	 .align 2
 521              	 .global XMC_I2C_CH_SlaveTransmit
 522              	 .thumb
 523              	 .thumb_func
 525              	XMC_I2C_CH_SlaveTransmit:
 526              	.LFB222:
 336:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 337:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** }
 338:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 339:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** /* Sends slave send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
 340:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** void XMC_I2C_CH_SlaveTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
 341:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** {
 527              	 .loc 1 341 0
 528              	 .cfi_startproc
 529              	 
 530              	 
 531              	 
 532              	.LVL55:
 342:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   /* Check FIFO size */
 343:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 533              	 .loc 1 343 0
 534 0000 D0F80831 	 ldr r3,[r0,#264]
 535 0004 13F0E06F 	 tst r3,#117440512
 536 0008 0CD1     	 bne .L56
 537              	.L59:
 538              	.LVL56:
 539              	.LBB50:
 540              	.LBB51:
 541              	 .loc 2 1258 0 discriminator 1
 542 000a 836B     	 ldr r3,[r0,#56]
 543              	.LBE51:
 544              	.LBE50:
 344:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {    
 345:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 545              	 .loc 1 345 0 discriminator 1
 546 000c 13F0800F 	 tst r3,#128
 547 0010 FBD1     	 bne .L59
 548              	.LVL57:
 549              	.LBB52:
 550              	.LBB53:
 551              	 .loc 3 701 0
 552 0012 C36C     	 ldr r3,[r0,#76]
 553 0014 43F40053 	 orr r3,r3,#8192
 554 0018 C364     	 str r3,[r0,#76]
 555              	.LBE53:
 556              	.LBE52:
 346:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 	{
 347:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****       /* check TDV, wait until TBUF is ready */
 348:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     }    
 349:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 350:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     /* clear PSR_TBIF */
 351:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 352:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 353:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_SLAVE_SEND | data;
 557              	 .loc 1 353 0
 558 001a 41F48071 	 orr r1,r1,#256
 559              	.LVL58:
 560 001e C0F88010 	 str r1,[r0,#128]
 561 0022 7047     	 bx lr
 562              	.LVL59:
 563              	.L56:
 354:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 355:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   else
 356:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 357:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_SLAVE_SEND | data;
 564              	 .loc 1 357 0
 565 0024 41F48071 	 orr r1,r1,#256
 566              	.LVL60:
 567 0028 C0F88011 	 str r1,[r0,#384]
 568 002c 7047     	 bx lr
 569              	 .cfi_endproc
 570              	.LFE222:
 572 002e 00BF     	 .section .text.XMC_I2C_CH_MasterReceiveAck,"ax",%progbits
 573              	 .align 2
 574              	 .global XMC_I2C_CH_MasterReceiveAck
 575              	 .thumb
 576              	 .thumb_func
 578              	XMC_I2C_CH_MasterReceiveAck:
 579              	.LFB223:
 358:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 359:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** }
 360:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 361:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** /* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
 362:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
 363:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** {
 580              	 .loc 1 363 0
 581              	 .cfi_startproc
 582              	 
 583              	 
 584              	 
 585              	.LVL61:
 364:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** /* Check FIFO size */
 365:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 586              	 .loc 1 365 0
 587 0000 D0F80831 	 ldr r3,[r0,#264]
 588 0004 13F0E06F 	 tst r3,#117440512
 589 0008 0CD1     	 bne .L62
 590              	.L65:
 591              	.LVL62:
 592              	.LBB54:
 593              	.LBB55:
 594              	 .loc 2 1258 0 discriminator 1
 595 000a 836B     	 ldr r3,[r0,#56]
 596              	.LBE55:
 597              	.LBE54:
 366:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {    
 367:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 598              	 .loc 1 367 0 discriminator 1
 599 000c 13F0800F 	 tst r3,#128
 600 0010 FBD1     	 bne .L65
 601              	.LVL63:
 602              	.LBB56:
 603              	.LBB57:
 604              	 .loc 3 701 0
 605 0012 C36C     	 ldr r3,[r0,#76]
 606 0014 43F40053 	 orr r3,r3,#8192
 607 0018 C364     	 str r3,[r0,#76]
 608              	.LBE57:
 609              	.LBE56:
 368:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 	{
 369:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****       /* check TDV, wait until TBUF is ready */
 370:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     }
 371:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 372:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     /* clear PSR_TBIF */
 373:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 374:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 375:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 610              	 .loc 1 375 0
 611 001a 4FF40073 	 mov r3,#512
 612 001e C0F88030 	 str r3,[r0,#128]
 613 0022 7047     	 bx lr
 614              	.LVL64:
 615              	.L62:
 376:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 377:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   else
 378:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 379:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 616              	 .loc 1 379 0
 617 0024 4FF40073 	 mov r3,#512
 618 0028 C0F88031 	 str r3,[r0,#384]
 619 002c 7047     	 bx lr
 620              	 .cfi_endproc
 621              	.LFE223:
 623 002e 00BF     	 .section .text.XMC_I2C_CH_MasterReceiveNack,"ax",%progbits
 624              	 .align 2
 625              	 .global XMC_I2C_CH_MasterReceiveNack
 626              	 .thumb
 627              	 .thumb_func
 629              	XMC_I2C_CH_MasterReceiveNack:
 630              	.LFB224:
 380:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 381:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** }
 382:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 383:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** /* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
 384:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
 385:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** {
 631              	 .loc 1 385 0
 632              	 .cfi_startproc
 633              	 
 634              	 
 635              	 
 636              	.LVL65:
 386:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   /* Check FIFO size */
 387:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 637              	 .loc 1 387 0
 638 0000 D0F80831 	 ldr r3,[r0,#264]
 639 0004 13F0E06F 	 tst r3,#117440512
 640 0008 0CD1     	 bne .L68
 641              	.L71:
 642              	.LVL66:
 643              	.LBB58:
 644              	.LBB59:
 645              	 .loc 2 1258 0 discriminator 1
 646 000a 836B     	 ldr r3,[r0,#56]
 647              	.LBE59:
 648              	.LBE58:
 388:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {    
 389:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 649              	 .loc 1 389 0 discriminator 1
 650 000c 13F0800F 	 tst r3,#128
 651 0010 FBD1     	 bne .L71
 652              	.LVL67:
 653              	.LBB60:
 654              	.LBB61:
 655              	 .loc 3 701 0
 656 0012 C36C     	 ldr r3,[r0,#76]
 657 0014 43F40053 	 orr r3,r3,#8192
 658 0018 C364     	 str r3,[r0,#76]
 659              	.LBE61:
 660              	.LBE60:
 390:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 	{
 391:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****       /* check TDV, wait until TBUF is ready */
 392:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     }
 393:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 394:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     /* clear PSR_TBIF */
 395:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 396:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 397:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 661              	 .loc 1 397 0
 662 001a 4FF44073 	 mov r3,#768
 663 001e C0F88030 	 str r3,[r0,#128]
 664 0022 7047     	 bx lr
 665              	.LVL68:
 666              	.L68:
 398:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 399:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   else 
 400:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 401:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 667              	 .loc 1 401 0
 668 0024 4FF44073 	 mov r3,#768
 669 0028 C0F88031 	 str r3,[r0,#384]
 670 002c 7047     	 bx lr
 671              	 .cfi_endproc
 672              	.LFE224:
 674 002e 00BF     	 .section .text.XMC_I2C_CH_GetReceivedData,"ax",%progbits
 675              	 .align 2
 676              	 .global XMC_I2C_CH_GetReceivedData
 677              	 .thumb
 678              	 .thumb_func
 680              	XMC_I2C_CH_GetReceivedData:
 681              	.LFB225:
 402:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 403:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** }
 404:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 405:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** /* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
 406:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
 407:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** {
 682              	 .loc 1 407 0
 683              	 .cfi_startproc
 684              	 
 685              	 
 686              	 
 687              	.LVL69:
 408:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   uint8_t retval;
 409:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 410:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   /* Check FIFO size */
 411:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 688              	 .loc 1 411 0
 689 0000 D0F80C31 	 ldr r3,[r0,#268]
 690 0004 13F0E06F 	 tst r3,#117440512
 412:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 413:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     retval = (uint8_t)channel->RBUF;
 691              	 .loc 1 413 0
 692 0008 0CBF     	 ite eq
 693 000a 406D     	 ldreq r0,[r0,#84]
 694              	.LVL70:
 414:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 415:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   else
 416:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 417:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     retval = (uint8_t)channel->OUTR;
 695              	 .loc 1 417 0
 696 000c D0F81C01 	 ldrne r0,[r0,#284]
 697 0010 C0B2     	 uxtb r0,r0
 698              	.LVL71:
 418:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 419:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 420:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   return retval;
 421:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** }
 699              	 .loc 1 421 0
 700 0012 7047     	 bx lr
 701              	 .cfi_endproc
 702              	.LFE225:
 704              	 .section .text.XMC_I2C_CH_Stop,"ax",%progbits
 705              	 .align 2
 706              	 .global XMC_I2C_CH_Stop
 707              	 .thumb
 708              	 .thumb_func
 710              	XMC_I2C_CH_Stop:
 711              	.LFB226:
 422:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 423:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** /* Sets the operating mode of USIC to IDLE */
 424:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_Stop(XMC_USIC_CH_t *const channel)
 425:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** {
 712              	 .loc 1 425 0
 713              	 .cfi_startproc
 714              	 
 715              	 
 716              	 
 717              	.LVL72:
 718              	.LBB62:
 719              	.LBB63:
 720              	 .loc 2 1258 0
 721 0000 836B     	 ldr r3,[r0,#56]
 722              	.LBE63:
 723              	.LBE62:
 426:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   XMC_I2C_CH_STATUS_t status = XMC_I2C_CH_STATUS_OK;
 427:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 428:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   if (((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) & (uint32_t)XMC_USIC_CH_TBUF_STATUS_B
 724              	 .loc 1 428 0
 725 0002 13F0800F 	 tst r3,#128
 726 0006 05D1     	 bne .L78
 727              	.LVL73:
 728              	.LBB64:
 729              	.LBB65:
1259:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1260:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1261:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1262:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @brief API to get receive buffer status
1263:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1264:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1265:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status of data validity check for RBUF0 and RBUF1. \n
1266:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		   Returned value should be masked with RDV0 and RDV1 bits to know the status. \n
1267:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		   \b Range: @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID0, @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID
1268:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1269:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1270:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Checks if RBUF0 and RBUF1 have valid unread data. \n\n
1271:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * It checks the bits RDV0 and RDV1 of the RBUFSR register.
1272:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Returns the value of RBUFSR masked with bitmasks of RDV0 and RDV1.
1273:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * It can be used to decide whether 2bytes has to be read from RBUF or 1 byte. 
1274:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * If both bitmasks XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 and XMC_USIC_CH_RBUF_STATUS_DATA_VALID1
1275:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * are set, then 2 bytes can be read from RBUF. If only either of them is set, then only one byte
1276:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * can be read from RBUF.
1277:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1278:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1279:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1280:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
1281:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1282:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
1283:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1284:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1285:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1286:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1287:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1288:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1289:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  start_transmision_mode Transmission mode to be enabled. \n
1290:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 								\b Range: @ref XMC_USIC_CH_START_TRANSMISION_DISABLED,
1291:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV, @ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2
1292:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1
1293:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *                              
1294:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1295:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1296:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1297:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Configures data transmission. \n\n
1298:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The configuration affects the data shifted on the DOUT0 pin.
1299:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1300:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1301:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetDataOutputMode() \n\n\n
1302:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1303:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetStartTransmisionMode(XMC_USIC_CH_t *const channel,
1304:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                          const XMC_USIC_CH_START_TRANSMISION_MODE_t
1305:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1306:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~USIC_CH_TCSR_TDEN_Msk)) | (uint32_t)start_transmisio
1307:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1308:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1309:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1310:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1311:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1312:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1313:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  data_output_mode  Data output mode. \n
1314:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL, @ref XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTE
1315:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1316:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1317:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1318:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Configures the mode for data output. \n\n
1319:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel can be configured to shift inverted data or direct data based on the input to the A
1320:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1321:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1322:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1323:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1324:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetDataOutputMode(XMC_USIC_CH_t *const channel,
1325:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                    const XMC_USIC_CH_DATA_OUTPUT_MODE_t data_output
1326:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1327:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_DOCFG_Msk)) | (uint32_t)data_output_mod
1328:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1329:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1330:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1331:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1332:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1333:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1334:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1335:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1336:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables automatic update of frame length. \n\n
1337:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the automatic update of frame length is enabled, frame length is configured based on the 
1338:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], frame length is co
1339:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1340:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * IN[x] register.
1341:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1342:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1343:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1344:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1345:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableFrameLengthControl(XMC_USIC_CH_t *const channel)
1346:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1347:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1348:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_SELMD_Msk |
1349:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_WAMD_Msk |
1350:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_HPCMD_Msk))) |
1351:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                          (uint32_t)USIC_CH_TCSR_FLEMD_Msk;
1352:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1353:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1354:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1355:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1356:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1357:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1358:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1359:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1360:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables automatic update of frame length. \n\n
1361:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When automatic update of frame length is disabled, frame length has to configured explicitly.
1362:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Frame length remains fixed until it is changed again.
1363:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1364:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1365:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_SetFrameLength() \n\n\n
1366:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1367:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableFrameLengthControl(XMC_USIC_CH_t *const channel)
1368:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1369:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_FLEMD_Msk;
1370:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1371:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1372:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1373:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1374:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1375:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1376:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1377:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1378:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is set if DX2T becomes active while TDV = 1. \n\n
1379:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables the transfer trigger unit to set bit TCSR.TE if the trigger signal DX2T becomes active
1380:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * for event driven transfer starts.
1381:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1382:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1383:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTBUFDataValidTrigger()\n\n\n
1384:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1385:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1386:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1387:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_TDVTR_Msk;
1388:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1389:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1390:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1391:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1392:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1393:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1394:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1395:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1396:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables the trigger of TDV depending on DX2T signal. \n\n
1397:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is permanently set.
1398:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1399:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1400:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTBUFDataValidTrigger() \n\n\n
1401:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1402:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1403:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1404:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_TDVTR_Msk;
1405:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1406:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1407:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1408:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1409:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1410:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  service_request_line service request number of the event to be triggered. \n
1411:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 0 to 5.
1412:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1413:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1414:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1415:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Trigger a USIC interrupt service request.\n\n
1416:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the USIC service request is triggered, the NVIC interrupt associated with it will be 
1417:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * generated if enabled. 
1418:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1419:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1420:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1421:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1422:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
1423:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1424:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
1425:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1426:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1427:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1428:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1429:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1430:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  transmit_buffer_status clearing or setting the TDV flag. \n
1431:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1432:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1433:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1434:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1435:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1436:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1437:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1438:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1439:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1440:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH_t *const channel,
1441:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 		                                                 const XMC_USIC_CH_TBUF_STATUS_SET_t transmit_buf
1442:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1443:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)transmit_buffer_status;
1444:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1445:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1446:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1447:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1448:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1449:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  passive_level Value of passive level for the channel. \n
1450:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL0, @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL1
1451:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1452:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1453:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1454:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Set the passive data level of the output signal. \n\n
1455:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the USIC channel transmit stage is idle, the output signal level stays at the 
1456:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * configured passive level.
1457:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1458:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1459:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1460:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1461:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetPassiveDataLevel(XMC_USIC_CH_t *const channel,
1462:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                      const XMC_USIC_CH_PASSIVE_DATA_LEVEL_t passive
1463:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1464:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->SCTR &= (~USIC_CH_SCTR_PDL_Msk);
1465:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->SCTR |= (uint32_t)passive_level;
1466:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1467:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1468:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /* TX FIFO APIs */
1469:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1470:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1471:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1472:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1473:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1474:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1475:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1476:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of transmit FIFO filling level to be considered for generating events. \n
1477:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1478:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1479:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1480:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1481:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Initializes the transmit FIFO. \n\n
1482:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO is a subset of a common FIFO sized 64 words. This FIFO is shared between 2 channel
1483:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1484:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * from where transmit data can be put, for the selected USIC channel. \a size represents the size 
1485:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2. Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A F
1486:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * event is generated when the FIFO filling level falls below the \a limit value.
1487:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1488:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1489:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent(), XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1490:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1491:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
1492:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1493:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1494:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1495:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1496:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1497:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1498:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1499:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1500:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1501:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1502:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1503:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1504:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1505:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1506:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the transmit FIFO. \n\n
1507:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the transmit FIFO. The API shall be used for the 
1508:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * runtime change of transmit FIFO trigger limit. FIFO start position will not be affected on execu
1509:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1510:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1511:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1512:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1513:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1514:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1515:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                             const uint32_t limit);
1516:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1517:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1518:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1519:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1520:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1521:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1522:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1523:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1524:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1525:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1526:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t.
1527:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1528:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation. Events are configured in the TBC
1529:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1530:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1531:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1532:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1533:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1534:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1535:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1536:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1537:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1538:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TBCTR |= event;
1539:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1540:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1541:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1542:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1543:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1544:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1545:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t \n
1546:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1547:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1548:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1549:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables the interrupt events related to transmit FIFO. \n\n
1550:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1551:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_TXFIFO_GetEvent(). 
1552:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t. Fo
1553:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1554:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1555:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1556:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1557:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1558:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1559:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1560:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TBCTR &= (uint32_t)~event;
1561:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1562:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1563:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1564:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1565:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				      \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1566:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the transmit FIFO events. \n
1567:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1568:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1569:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation. \n
1570:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1571:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1572:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1573:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1574:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the transmit FIFO events.\n\n
1575:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1576:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1577:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1578:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * A transmit FIFO event can generate an interrupt only if the interrupt node is configured for the
1579:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1580:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1581:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1582:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1583:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1584:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1585:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1586:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1587:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1588:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                 const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t i
1589:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                 const uint32_t service_request);
1590:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1591:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1592:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1593:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1594:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1595:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1596:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1597:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1598:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1599:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit FIFO. \n\n
1600:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in the transmit FIFO.
1601:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The transmit FIFO should be configured before calling this API.
1602:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1603:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1604:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1605:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1606:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutData(XMC_USIC_CH_t *const channel, const uint16_t data)
1607:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1608:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->IN[0] = data;
1609:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1610:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1611:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1612:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1613:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1614:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1615:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1616:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1617:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1618:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1619:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1620:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in frame length control mode. \n\n
1621:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When frame length control is enabled for dynamic update of frame length, this API can be used.
1622:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1623:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1624:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1625:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1626:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1627:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1628:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataFLEMode(XMC_USIC_CH_t *const channel,
1629:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                        const uint16_t data,
1630:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1631:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1632:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1633:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1634:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1635:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1636:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1637:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1638:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1639:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1640:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1641:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1642:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1643:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1644:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in hardware port control mode. \n\n
1645:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When hardware port control is enabled for dynamic update of frame length, this API can be used.
1646:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1647:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1648:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1649:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1650:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1651:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1652:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
1653:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                        const uint16_t data,
1654:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1655:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1656:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1657:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1658:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1659:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1660:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1661:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1662:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1663:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1664:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1665:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Clears the contents of transmit FIFO. \n\n
1666:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO contents will be cleared and the filling level will be reset to 0.
1667:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1668:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1669:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
1670:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1671:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
1672:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1673:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
1674:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1675:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1676:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1677:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1678:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1679:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is full
1680:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO is not full.
1681:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1682:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1683:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is full. \n\n
1684:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO filling level reaches the configured size, FIFO full flag is set.
1685:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * User should not write to the FIFO when the transmit FIFO is full.
1686:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1687:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1688:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
1689:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1690:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1691:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1692:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1693:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1694:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1695:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1696:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1697:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1698:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is empty
1699:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO has some data.
1700:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1701:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1702:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is empty. \n\n
1703:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO is empty, data can be written to FIFO.
1704:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the last written word to the transmit FIFO is transmitted out of the FIFO, 
1705:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * FIFO empty flag is set.
1706:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1707:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1708:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1709:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1710:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1711:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1712:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
1713:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1714:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1715:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1716:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1717:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1718:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Transmit FIFO filling level. \n 
1719:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= transmit FIFO size.
1720:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1721:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1722:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO filling level. \n\n
1723:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * For every word written to the FIFO, filling level is updated. The API gives the value
1724:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * of this filling level.
1725:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1726:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1727:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1728:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1729:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1730:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1731:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_TBFLVL_Msk) >> USIC_CH_TRBSR_TBFLVL_Pos);
1732:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1733:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1734:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1735:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1736:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1737:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status of standard transmit and transmit buffer error events. @ref XMC_USIC_CH_TXFIFO_EV
1738:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1739:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1740:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO event status. \n\n
1741:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Gives the status of transmit FIFO standard transmit buffer event and transmit buffer error event
1742:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The status bits are located at their bit positions in the TRBSR register in the returned value.
1743:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * User can make use of the @ref XMC_USIC_CH_TXFIFO_EVENT_t enumeration for checking the status of 
1744:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1745:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1746:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1747:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1748:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1749:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_ClearEvent() \n\n\n
1750:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1751:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1752:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1753:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_STBI_Msk |
1754:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                               USIC_CH_TRBSR_TBERI_Msk));
1755:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1756:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1757:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1758:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1759:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1760:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  event Transmit FIFO events to be cleared. \n
1761:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			     \b Range: @ref XMC_USIC_CH_TXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_TXFIFO_EVENT_ERROR.
1762:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1763:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1764:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1765:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Clears the transmit FIFO event flags in the status register. \n\n
1766:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1767:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1768:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EVENT enumeration can be used as input. Multiple events
1769:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1770:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * multiple event enumerations.
1771:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1772:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1773:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent() \n\n\n
1774:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1775:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1776:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                    const uint32_t event)
1777:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1778:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = event;
1779:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1780:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1781:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1782:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1783:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1784:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1785:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1786:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1787:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1788:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of receive FIFO filling level to be considered for generating events. \n
1789:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1790:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1791:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1792:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1793:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Configures the receive FIFO. \n\n
1794:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Receive FIFO is the subset of a common FIFO sized 64 words. This FIFO is shared between 2 channe
1795:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1796:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * from where received data can be put. \a size represents the size of receive FIFO as a multiple o
1797:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A FIFO
1798:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * event or alternative receive buffer event is generated when the FIFO filling level exceeds the \
1799:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1800:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1801:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent(), XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1802:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
1803:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
1804:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1805:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1806:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1807:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1808:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1809:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1810:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1811:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1812:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1813:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for receive FIFO filling level to be considered for generating events. \n
1814:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1815:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1816:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1817:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1818:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the receive FIFO. \n\n
1819:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the receive FIFO. The API shall be used for the 
1820:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * runtime change of receive FIFO trigger limit. FIFO start position will not be affected on execut
1821:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1822:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1823:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit()\ n\n\n
1824:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1825:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1826:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1827:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                             const uint32_t limit);
1828:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1829:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1830:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1831:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1832:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1833:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1834:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1835:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1836:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1837:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_t.
1838:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1839:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.<br>
1840:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1841:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1842:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1843:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1844:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1845:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1846:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1847:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1848:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1849:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->RBCTR |= event;
1850:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1851:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1852:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1853:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1854:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1855:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1856:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. \n
1857:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ERR
1858:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			@ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE.
1859:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1860:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1861:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1862:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables the selected interrupt events related to receive FIFO. \n\n
1863:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1864:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_RXFIFO_GetEvent(). 
1865:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration \a XMC_USIC_CH_RXFIFO_EVENT_CONF. For pr
1866:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1867:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1868:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1869:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1870:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1871:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1872:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1873:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->RBCTR &= (uint32_t)~event;
1874:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1875:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1876:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1877:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1878:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1879:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the receive FIFO events. \n
1880:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1881:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					@ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1882:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation.\n
1883:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					\b Range: 0 to 5.
1884:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1885:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1886:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1887:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the receive FIFO events. \n\n
1888:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1889:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1890:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1891:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * A receive FIFO event can generate an interrupt only if the interrupt node is configured for the 
1892:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1893:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1894:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1895:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1896:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1897:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1898:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1899:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1900:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1901:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                 const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t i
1902:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                 const uint32_t service_request);
1903:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1904:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1905:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1906:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1907:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Value read from the receive FIFO. \n
1908:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 16bit data. Length of data depends on the word length configuration.
1909:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1910:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1911:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Gets data from the receive FIFO. \n\n
1912:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Receive FIFO should be read only if data is availble in the FIFO. This can be checked using
1913:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * the API XMC_USIC_CH_RXFIFO_IsEmpty(). Receive FIFO error flag will be set if an attempt is made
1914:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO. To read all the received data, user should keep reading data
1915:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * until receive FIFO is empty.
1916:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1917:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1918:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent() \n\n\n
1919:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1920:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint16_t XMC_USIC_CH_RXFIFO_GetData(XMC_USIC_CH_t *const channel)
1921:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1922:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return (uint16_t)(channel->OUTR);
1923:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1924:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1925:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1926:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1927:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1928:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1929:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1930:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1931:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Clears the contents of receive FIFO. \n\n
1932:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Receive FIFO contents will be cleared and the filling level will be reset to 0.
1933:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1934:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1935:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
1936:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1937:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
1938:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1939:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
1940:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1941:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1942:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1943:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1944:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1945:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is full
1946:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO is not full.
1947:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1948:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1949:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is full. \n\n
1950:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO filling level reaches the configured size, FIFO full flag is set.
1951:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Any data received when the receive FIFO is full, is lost.
1952:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1953:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1954:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_IsEmpty(), XMC_USIC_CH_RXFIFO_Flush() \n\n\n
1955:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1956:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1957:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1958:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_RFULL_Msk);
1959:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1960:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1961:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1962:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1963:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1964:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is empty,
1965:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO has some data.
1966:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1967:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1968:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is empty. \n\n
1969:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO is empty, received data will be put in receive FIFO.
1970:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the last received word in the FIFO is read, FIFO empty flag is set. Any attempt
1971:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO will set the receive FIFO error flag.
1972:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1973:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1974:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1975:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1976:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1977:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1978:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
1979:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1980:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1981:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1982:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1983:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1984:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return uint32_t Receive FIFO filling level. \n
1985:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= receive FIFO size.
1986:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1987:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1988:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Gets the receive FIFO filling level. \n\n
1989:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * For every word received, the filling level is incremented. The API gives the value
1990:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * of this filling level. The filling level is decremented when the data is read out of the 
1991:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * receive FIFO.
1992:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1993:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1994:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1995:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1996:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1997:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1998:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_RBFLVL_Msk) >> USIC_CH_TRBSR_RBFLVL_Pos);
1999:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
2000:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
2001:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
2002:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2003:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2004:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status of standard receive buffer, alternative receive buffer and receive buffer error e
2005:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
2006:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
2007:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
2008:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2009:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Gets the receive FIFO events' status. \n\n
2010:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Gives the status of receive FIFO standard receive buffer event, alternative receive buffer event
2011:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The status bits are located at their bitpositions in the TRBSR register in the returned value.
2012:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * User can make use of the XMC_USIC_CH_RXFIFO_EVENT enumeration for checking the status of return 
2013:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
2014:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
2015:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
2016:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2017:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2018:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent()\n\n\n
2019:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
2020:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
2021:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
2022:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_SRBI_Msk |
2023:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                               USIC_CH_TRBSR_RBERI_Msk |
2024:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                               USIC_CH_TRBSR_ARBI_Msk));
2025:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
2026:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
2027:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
2028:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2029:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2030:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  event Receive FIFO events to be cleared. \n
2031:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
2032:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
2033:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
2034:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2035:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2036:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Clears the receive FIFO event flags in the status register. \n\n
2037:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
2038:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
2039:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EVENT enumeration can be used as input. Multiple events
2040:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
2041:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * multiple event enumerations.
2042:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2043:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2044:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent() \n\n\n
2045:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
2046:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
2047:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                    const uint32_t event)
2048:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
2049:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = event;
2050:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
2051:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
2052:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
2053:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2054:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2055:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
2056:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2057:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2058:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables time measurement using the capture mode timer. \n\n
2059:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Time measurement is enabled by setting the timer enable flag in BRG register.
2060:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2061:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2062:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTimeMeasurement() \n\n\n
2063:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
2064:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTimeMeasurement(XMC_USIC_CH_t *const channel)
2065:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
2066:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->BRG |= (uint32_t)USIC_CH_BRG_TMEN_Msk;
2067:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
2068:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
2069:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
2070:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2071:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2072:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
2073:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2074:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2075:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables time measurement using the capture mode timer. \n\n
2076:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Time measurement is disabled by clearing the timer enable flag in BRG register.
2077:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2078:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2079:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTimeMeasurement() \n\n\n
2080:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
2081:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTimeMeasurement(XMC_USIC_CH_t *const channel)
2082:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
2083:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->BRG &= (uint32_t)~USIC_CH_BRG_TMEN_Msk;
2084:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
2085:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
2086:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
2087:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2088:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2089:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param passive_level Passive level for the master clock output. \n
2090:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0, @ref XMC_USIC_CH_BRG_MASTER_CL
2091:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
2092:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2093:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2094:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the idle mode pin level for the master clock output. \n
2095:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
2096:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMclkOutputPassiveLevel(XMC_USIC_CH_t *const channel,
2097:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_MASTER_CLOCK_PASSI
2098:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
2099:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_MCLKCFG_Msk)) | (uint32_t)passive_level;
2100:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
2101:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
2102:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2103:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2104:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param passive_level Passive level for the clock output. \n
2105:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
2106:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED,
2107:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
2108:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED,
2109:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param clock_output Shift clock source selection. \n
2110:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					\b Range: Use @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK,
2111:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 								  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1
2112:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
2113:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2114:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2115:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the idle mode shift clock output level and selects the shift clock source. \n\n
2116:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Shift clock idle mode output level can be set to logic high or low. Shift clock output can be co
2117:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * delay of half shift clock period. Both the configurations are available as enumeration values de
2118:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t.
2119:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * This value should be configured based on the slave device requirement.
2120:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Shift clock source can be selected between internal clock(master) and external input(slave).
2121:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
2122:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
2123:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
2124:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIV
2125:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
2126:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
2127:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
2128:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                              USIC_CH_BRG_SCLKOSEL_Msk))) |
2129:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                  (uint32_t)passive_level |
2130:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                  (uint32_t)clock_output;
2131:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
2132:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
2133:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
2134:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2135:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2136:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param mode USIC channel operation mode. \n
2137:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_OPERATING_MODE_IDLE, @ref XMC_USIC_CH_OPERATING_MODE_SPI,
2138:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_UART, @ref XMC_USIC_CH_OPERATING_MODE_I2S,
2139:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_I2C.
2140:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
2141:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2142:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2143:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the USIC channel operation mode.\n\n
2144:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * A USIC channel can support multiple serial communication protocols like UART, SPI, I2C and I2S.
2145:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The API sets the input operation mode to the USIC channel.
2146:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2147:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2148:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
2149:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
2150:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_
2151:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
2152:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 730              	 .loc 2 2152 0
 731 0008 036C     	 ldr r3,[r0,#64]
 732 000a 23F00F03 	 bic r3,r3,#15
 733 000e 0364     	 str r3,[r0,#64]
 734              	.LBE65:
 735              	.LBE64:
 426:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   XMC_I2C_CH_STATUS_t status = XMC_I2C_CH_STATUS_OK;
 736              	 .loc 1 426 0
 737 0010 0020     	 movs r0,#0
 738              	.LVL74:
 739 0012 7047     	 bx lr
 740              	.LVL75:
 741              	.L78:
 429:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 430:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     status = XMC_I2C_CH_STATUS_BUSY;
 742              	 .loc 1 430 0
 743 0014 0220     	 movs r0,#2
 744              	.LVL76:
 431:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 432:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   else
 433:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   {
 434:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     /* USIC channel in IDLE mode */
 435:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****     XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_IDLE);
 436:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   }
 437:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   return status;
 438:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** }
 745              	 .loc 1 438 0
 746 0016 7047     	 bx lr
 747              	 .cfi_endproc
 748              	.LFE226:
 750              	 .section .text.XMC_I2C_CH_EnableEvent,"ax",%progbits
 751              	 .align 2
 752              	 .global XMC_I2C_CH_EnableEvent
 753              	 .thumb
 754              	 .thumb_func
 756              	XMC_I2C_CH_EnableEvent:
 757              	.LFB227:
 439:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 440:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
 441:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** {
 758              	 .loc 1 441 0
 759              	 .cfi_startproc
 760              	 
 761              	 
 762              	 
 763              	.LVL77:
 442:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   channel->CCR |= (event&0x1fc00U);
 764              	 .loc 1 442 0
 765 0000 036C     	 ldr r3,[r0,#64]
 766 0002 01F4FE32 	 and r2,r1,#130048
 767 0006 1343     	 orrs r3,r3,r2
 768 0008 0364     	 str r3,[r0,#64]
 443:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   channel->PCR_IICMode |= ((event) & 0x41fc0000U);
 769              	 .loc 1 443 0
 770 000a C36B     	 ldr r3,[r0,#60]
 771 000c 024A     	 ldr r2,.L80
 772 000e 0A40     	 ands r2,r2,r1
 773 0010 1343     	 orrs r3,r3,r2
 774 0012 C363     	 str r3,[r0,#60]
 775 0014 7047     	 bx lr
 776              	.L81:
 777 0016 00BF     	 .align 2
 778              	.L80:
 779 0018 0000FC41 	 .word 1107034112
 780              	 .cfi_endproc
 781              	.LFE227:
 783              	 .section .text.XMC_I2C_CH_DisableEvent,"ax",%progbits
 784              	 .align 2
 785              	 .global XMC_I2C_CH_DisableEvent
 786              	 .thumb
 787              	 .thumb_func
 789              	XMC_I2C_CH_DisableEvent:
 790              	.LFB228:
 444:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** }
 445:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** 
 446:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
 447:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c **** {
 791              	 .loc 1 447 0
 792              	 .cfi_startproc
 793              	 
 794              	 
 795              	 
 796              	.LVL78:
 448:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   channel->CCR &= (uint32_t)~(event&0x1fc00U);
 797              	 .loc 1 448 0
 798 0000 036C     	 ldr r3,[r0,#64]
 799 0002 01F4FE32 	 and r2,r1,#130048
 800 0006 23EA0203 	 bic r3,r3,r2
 801 000a 0364     	 str r3,[r0,#64]
 449:C:/Files/Projects/Git/XMCLib/src\xmc_i2c.c ****   channel->PCR_IICMode &= (uint32_t)~((event) & 0x41fc0000U);
 802              	 .loc 1 449 0
 803 000c C36B     	 ldr r3,[r0,#60]
 804 000e 034A     	 ldr r2,.L83
 805 0010 0A40     	 ands r2,r2,r1
 806 0012 23EA0203 	 bic r3,r3,r2
 807 0016 C363     	 str r3,[r0,#60]
 808 0018 7047     	 bx lr
 809              	.L84:
 810 001a 00BF     	 .align 2
 811              	.L83:
 812 001c 0000FC41 	 .word 1107034112
 813              	 .cfi_endproc
 814              	.LFE228:
 816              	 .text
 817              	.Letext0:
 818              	 .file 4 "c:\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 819              	 .file 5 "c:\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 820              	 .file 6 "C:/Files/Projects/Git/CMSIS/Include/cmsis_gcc.h"
 821              	 .file 7 "C:/Files/Projects/Git/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_i2c.c
    {standard input}:20     .text.XMC_I2C_CH_SetSlaveAddress:00000000 $t
    {standard input}:25     .text.XMC_I2C_CH_SetSlaveAddress:00000000 XMC_I2C_CH_SetSlaveAddress
    {standard input}:57     .text.XMC_I2C_CH_GetSlaveAddress:00000000 $t
    {standard input}:62     .text.XMC_I2C_CH_GetSlaveAddress:00000000 XMC_I2C_CH_GetSlaveAddress
    {standard input}:92     .text.XMC_I2C_CH_SetBaudrate:00000000 $t
    {standard input}:97     .text.XMC_I2C_CH_SetBaudrate:00000000 XMC_I2C_CH_SetBaudrate
    {standard input}:156    .text.XMC_I2C_CH_SetBaudrate:00000040 $d
    {standard input}:162    .text.XMC_I2C_CH_SetBaudrateEx:00000000 $t
    {standard input}:167    .text.XMC_I2C_CH_SetBaudrateEx:00000000 XMC_I2C_CH_SetBaudrateEx
    {standard input}:239    .text.XMC_I2C_CH_SetBaudrateEx:00000048 $d
    {standard input}:245    .text.XMC_I2C_CH_Init:00000000 $t
    {standard input}:250    .text.XMC_I2C_CH_Init:00000000 XMC_I2C_CH_Init
    {standard input}:297    .text.XMC_I2C_CH_Init:00000034 $d
    {standard input}:302    .text.XMC_I2C_CH_MasterStart:00000000 $t
    {standard input}:307    .text.XMC_I2C_CH_MasterStart:00000000 XMC_I2C_CH_MasterStart
    {standard input}:362    .text.XMC_I2C_CH_MasterRepeatedStart:00000000 $t
    {standard input}:367    .text.XMC_I2C_CH_MasterRepeatedStart:00000000 XMC_I2C_CH_MasterRepeatedStart
    {standard input}:420    .text.XMC_I2C_CH_MasterStop:00000000 $t
    {standard input}:425    .text.XMC_I2C_CH_MasterStop:00000000 XMC_I2C_CH_MasterStop
    {standard input}:471    .text.XMC_I2C_CH_MasterTransmit:00000000 $t
    {standard input}:476    .text.XMC_I2C_CH_MasterTransmit:00000000 XMC_I2C_CH_MasterTransmit
    {standard input}:520    .text.XMC_I2C_CH_SlaveTransmit:00000000 $t
    {standard input}:525    .text.XMC_I2C_CH_SlaveTransmit:00000000 XMC_I2C_CH_SlaveTransmit
    {standard input}:573    .text.XMC_I2C_CH_MasterReceiveAck:00000000 $t
    {standard input}:578    .text.XMC_I2C_CH_MasterReceiveAck:00000000 XMC_I2C_CH_MasterReceiveAck
    {standard input}:624    .text.XMC_I2C_CH_MasterReceiveNack:00000000 $t
    {standard input}:629    .text.XMC_I2C_CH_MasterReceiveNack:00000000 XMC_I2C_CH_MasterReceiveNack
    {standard input}:675    .text.XMC_I2C_CH_GetReceivedData:00000000 $t
    {standard input}:680    .text.XMC_I2C_CH_GetReceivedData:00000000 XMC_I2C_CH_GetReceivedData
    {standard input}:705    .text.XMC_I2C_CH_Stop:00000000 $t
    {standard input}:710    .text.XMC_I2C_CH_Stop:00000000 XMC_I2C_CH_Stop
    {standard input}:751    .text.XMC_I2C_CH_EnableEvent:00000000 $t
    {standard input}:756    .text.XMC_I2C_CH_EnableEvent:00000000 XMC_I2C_CH_EnableEvent
    {standard input}:779    .text.XMC_I2C_CH_EnableEvent:00000018 $d
    {standard input}:784    .text.XMC_I2C_CH_DisableEvent:00000000 $t
    {standard input}:789    .text.XMC_I2C_CH_DisableEvent:00000000 XMC_I2C_CH_DisableEvent
    {standard input}:812    .text.XMC_I2C_CH_DisableEvent:0000001c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_USIC_CH_SetBaudrate
XMC_USIC_CH_SetBaudrateEx
XMC_USIC_CH_Enable
