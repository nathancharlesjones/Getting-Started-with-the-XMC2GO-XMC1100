   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,1
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_vadc.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_VADC_GLOBAL_EnableModule,"ax",%progbits
  20              	 .align 2
  21              	 .global XMC_VADC_GLOBAL_EnableModule
  22              	 .thumb
  23              	 .thumb_func
  25              	XMC_VADC_GLOBAL_EnableModule:
  26              	.LFB256:
  27              	 .file 1 "C:/Files/Projects/Git/XMCLib/src/xmc_vadc.c"
   1:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /**
   2:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * @file xmc_vadc.c
   3:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * @date 2019-05-07
   4:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *
   5:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * @cond
   6:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  **************************************************************************************************
   7:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *
   9:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * All rights reserved.                        
  11:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *                                             
  12:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * following conditions are met:   
  14:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *                                                                              
  15:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * disclaimer.                        
  17:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * 
  18:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * 
  21:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * products derived from this software without specific prior written permission.                  
  23:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *                                                                              
  24:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *                                                                              
  32:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  **************************************************************************************************
  35:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *
  36:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * Change History
  37:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * --------------
  38:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *
  39:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * 2015-02-15:
  40:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *     - Initial <br>
  41:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *      
  42:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * 2015-02-20:
  43:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *     - Revised for XMC1201 device.<br>
  44:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *   
  45:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * 2015-04-27:
  46:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *     - Added new APIs for SHS.<br>
  47:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *     - Added New APIs for trigger edge selection.<BR>
  48:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *
  51:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * 2015-06-20:
  52:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *
  54:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * 2015-06-25:
  55:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *     - BFL configuration in channel initialization fixed.
  56:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *
  57:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * 2015-07-28:
  58:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  59:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  60:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  61:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *     - New APIs Created.
  62:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  63:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  64:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetAlias
  65:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetInputClass
  66:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  67:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  68:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  69:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  70:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *
  71:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * 2015-12-01:
  72:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  73:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  74:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *
  75:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * 2016-06-17:
  76:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *     - New macros added XMC_VADC_SHS_FULL_SET_REG, XMC_VADC_RESULT_PRIORITY_AVAILABLE 
  77:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *       and XMC_VADC_SYNCTR_START_LOCATION
  78:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *     - New Enum added XMC_VADC_SHS_GAIN_LEVEL_t and XMC_VADC_SYNCTR_EVAL_t
  79:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *     - Fixed the EVAL configuration in API XMC_VADC_GROUP_CheckSlaveReadiness and XMC_VADC_GROUP_
  80:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *     - New APIs added are:
  81:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetSyncSlaveReadySignal
  82:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetAssertedEvents
  83:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetAssertedResultEvents
  84:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetResultRegPriority
  85:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetSyncReadySignal
  86:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetSyncReadySignal
  87:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetResultRegPriority
  88:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *
  89:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * 2017-01-11:
  90:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *     - Fix assertion in XMC_VADC_GROUP_CheckSlaveReadiness() and XMC_VADC_GROUP_IgnoreSlaveReadin
  91:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *
  92:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * 2018-06-26:
  93:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *     - Fixed XMC_VADC_GLOBAL_StartupCalibration(), added wait until calibration is started
  94:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *
  95:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * 2019-03-30:
  96:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *     - Changed XMC_VADC_GROUP_SetChannelAlias() to inline function
  97:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *
  98:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * 2019-05-07:
  99:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *     - Fix compilation warnings
 100:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * 
 101:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * @endcond 
 102:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  *
 103:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  */
 104:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 105:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /**************************************************************************************************
 106:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * HEADER FILES
 107:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  **************************************************************************************************
 108:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #include <xmc_vadc.h>
 109:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 110:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /**************************************************************************************************
 111:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * MACROS
 112:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  **************************************************************************************************
 113:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #define XMC_VADC_MAX_ICLASS_SET          (2U)  /**< Defines the maximum number of conversion parame
 114:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #define XMC_VADC_NUM_EMUX_INTERFACES     (2U)  /**< Defines the maximum number of external multiple
 115:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 116:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #define XMC_VADC_RESULT_LEFT_ALIGN_10BIT (2U)  /**< Defines the 10 bit converted result register le
 117:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                     is used in the XMC_VADC_GLOBAL_SetCompareValue(
 118:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 119:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #define XMC_VADC_SYNCTR_START_LOCATION (3U)  /**< Defines the location in SYNCTR needed for calcula
 120:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /**************************************************************************************************
 121:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * ENUMS
 122:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  **************************************************************************************************
 123:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 124:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /**************************************************************************************************
 125:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * DATA STRUCTURES
 126:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  **************************************************************************************************
 127:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 128:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /**************************************************************************************************
 129:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * GLOBAL DATA
 130:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  **************************************************************************************************
 131:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 132:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 133:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 134:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U) 
 135:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** static VADC_G_TypeDef *const g_xmc_vadc_group_array[XMC_VADC_MAXIMUM_NUM_GROUPS] = {(VADC_G_TypeDef
 136:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 137:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 138:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 139:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #else
 140:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** static VADC_G_TypeDef *const g_xmc_vadc_group_array[XMC_VADC_MAXIMUM_NUM_GROUPS] = {(VADC_G_TypeDef
 141:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 142:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
 143:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 144:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif 
 145:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 146:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /**************************************************************************************************
 147:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * LOCAL ROUTINES
 148:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  **************************************************************************************************
 149:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 150:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /**************************************************************************************************
 151:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  * API IMPLEMENTATION
 152:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****  **************************************************************************************************
 153:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 154:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /*API to enable the VADC Module*/
 155:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_EnableModule(void)
 156:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
  28              	 .loc 1 156 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32 0000 08B5     	 push {r3,lr}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 8
  35              	 .cfi_offset 3,-8
  36              	 .cfi_offset 14,-4
 157:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /*
 158:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****    * Enable Out of Range Comparator for ADC channels pins P2.2to P2.9. This hack is applicable only
 159:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****    * and in particular the G11 step.
 160:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****    *
 161:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****    * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additona
 162:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****    * function
 163:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****    */
 164:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 165:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if defined (COMPARATOR)
 166:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   COMPARATOR->ORCCTRL = (uint32_t)0xFF;
 167:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
 168:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 169:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 170:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 171:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
 172:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 173:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 174:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Reset the Hardware */
 175:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC )
  37              	 .loc 1 175 0
  38 0002 0120     	 movs r0,#1
  39 0004 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
  40              	.LVL0:
  41 0008 08BD     	 pop {r3,pc}
  42              	 .cfi_endproc
  43              	.LFE256:
  45 000a 00BF     	 .section .text.XMC_VADC_GLOBAL_DisableModule,"ax",%progbits
  46              	 .align 2
  47              	 .global XMC_VADC_GLOBAL_DisableModule
  48              	 .thumb
  49              	 .thumb_func
  51              	XMC_VADC_GLOBAL_DisableModule:
  52              	.LFB257:
 176:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
 177:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 178:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 179:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /*API to Disable the VADC Module*/
 180:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_DisableModule(void)
 181:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
  53              	 .loc 1 181 0
  54              	 .cfi_startproc
  55              	 
  56              	 
  57 0000 08B5     	 push {r3,lr}
  58              	.LCFI1:
  59              	 .cfi_def_cfa_offset 8
  60              	 .cfi_offset 3,-8
  61              	 .cfi_offset 14,-4
 182:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 183:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Reset the Hardware */
 184:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_SCU_RESET_AssertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
  62              	 .loc 1 184 0
  63 0002 0120     	 movs r0,#1
  64 0004 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
  65              	.LVL1:
  66 0008 08BD     	 pop {r3,pc}
  67              	 .cfi_endproc
  68              	.LFE257:
  70 000a 00BF     	 .section .text.XMC_VADC_GLOBAL_Init,"ax",%progbits
  71              	 .align 2
  72              	 .global XMC_VADC_GLOBAL_Init
  73              	 .thumb
  74              	 .thumb_func
  76              	XMC_VADC_GLOBAL_Init:
  77              	.LFB258:
 185:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
 186:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 187:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 188:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 189:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
 190:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 191:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 192:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 193:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 194:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to initialize global resources */
 195:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
 196:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
  78              	 .loc 1 196 0
  79              	 .cfi_startproc
  80              	 
  81              	 
  82              	.LVL2:
  83 0000 38B5     	 push {r3,r4,r5,lr}
  84              	.LCFI2:
  85              	 .cfi_def_cfa_offset 16
  86              	 .cfi_offset 3,-16
  87              	 .cfi_offset 4,-12
  88              	 .cfi_offset 5,-8
  89              	 .cfi_offset 14,-4
  90 0002 0446     	 mov r4,r0
  91 0004 0D46     	 mov r5,r1
 197:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 198:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t reg;
 199:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
 200:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))
 201:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 202:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Enable the VADC module*/
 203:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_VADC_GLOBAL_EnableModule();
  92              	 .loc 1 203 0
  93 0006 FFF7FEFF 	 bl XMC_VADC_GLOBAL_EnableModule
  94              	.LVL3:
 204:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 205:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->CLC = (uint32_t)(config->clc);
  95              	 .loc 1 205 0
  96 000a 6B69     	 ldr r3,[r5,#20]
  97 000c 2360     	 str r3,[r4]
 206:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 207:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Clock configuration */
 208:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 209:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 210:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Ms
  98              	 .loc 1 210 0
  99 000e 6B68     	 ldr r3,[r5,#4]
 100 0010 43F40043 	 orr r3,r3,#32768
 101 0014 C4F88030 	 str r3,[r4,#128]
 211:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
 212:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 213:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* ICLASS-0 configuration */
 214:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 102              	 .loc 1 214 0
 103 0018 AB68     	 ldr r3,[r5,#8]
 104 001a C4F8A030 	 str r3,[r4,#160]
 215:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 216:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* ICLASS-1 configuration */
 217:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 105              	 .loc 1 217 0
 106 001e EB68     	 ldr r3,[r5,#12]
 107 0020 C4F8A430 	 str r3,[r4,#164]
 218:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 219:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 220:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /*Result generation related configuration */
 221:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 108              	 .loc 1 221 0
 109 0024 2B69     	 ldr r3,[r5,#16]
 110 0026 C4F88032 	 str r3,[r4,#640]
 222:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 223:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
 224:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 225:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Boundaries */
 226:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 111              	 .loc 1 226 0
 112 002a 2B68     	 ldr r3,[r5]
 113 002c C4F8B830 	 str r3,[r4,#184]
 114 0030 38BD     	 pop {r3,r4,r5,pc}
 115              	 .cfi_endproc
 116              	.LFE258:
 118 0032 00BF     	 .section .text.XMC_VADC_GLOBAL_InputClassInit,"ax",%progbits
 119              	 .align 2
 120              	 .global XMC_VADC_GLOBAL_InputClassInit
 121              	 .thumb
 122              	 .thumb_func
 124              	XMC_VADC_GLOBAL_InputClassInit:
 125              	.LFB259:
 227:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 228:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
 229:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 230:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Configure the SHS register that are needed for XMC11xx devices*/
 231:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 232:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 233:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Enabling the Analog part of the converter*/
 234:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   reg = SHS0->SHSCFG  | SHS_SHSCFG_SCWC_Msk;
 235:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   reg &= ~(SHS_SHSCFG_ANOFF_Msk);
 236:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   SHS0->SHSCFG = reg;
 237:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 238:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* From the Errata sheet of XMC1100 V1.7*/
 239:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
 240:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
 241:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 242:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 243:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 244:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to Set the Global IClass registers*/
 245:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
 246:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
 247:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 126              	 .loc 1 247 0
 127              	 .cfi_startproc
 128              	 
 129              	 
 130              	 
 131              	.LVL4:
 248:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 249:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
 250:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP
 251:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLA
 252:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 253:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 254:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (conv_type == XMC_VADC_GROUP_CONV_STD )
 132              	 .loc 1 254 0
 133 0000 3AB9     	 cbnz r2,.L8
 255:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 256:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
 257:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 	XMC_UNUSED_ARG(conv_type);
 258:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     global_ptr->GLOBICLASS[set_num] = config.globiclass &
 134              	 .loc 1 258 0
 135 0002 21F0E001 	 bic r1,r1,#224
 136              	.LVL5:
 137 0006 4905     	 lsls r1,r1,#21
 138 0008 490D     	 lsrs r1,r1,#21
 139 000a 2833     	 adds r3,r3,#40
 140              	.LVL6:
 141 000c 40F82310 	 str r1,[r0,r3,lsl#2]
 142 0010 7047     	 bx lr
 143              	.LVL7:
 144              	.L8:
 259:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                       (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk
 260:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 261:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 262:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
 263:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 264:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC
 145              	 .loc 1 264 0
 146 0012 21F07841 	 bic r1,r1,#-134217728
 147              	.LVL8:
 148 0016 21F46001 	 bic r1,r1,#14680064
 149 001a 090C     	 lsrs r1,r1,#16
 150 001c 0904     	 lsls r1,r1,#16
 151 001e 2833     	 adds r3,r3,#40
 152              	.LVL9:
 153 0020 40F82310 	 str r1,[r0,r3,lsl#2]
 154 0024 7047     	 bx lr
 155              	 .cfi_endproc
 156              	.LFE259:
 158 0026 00BF     	 .section .text.XMC_VADC_GLOBAL_StartupCalibration,"ax",%progbits
 159              	 .align 2
 160              	 .global XMC_VADC_GLOBAL_StartupCalibration
 161              	 .thumb
 162              	 .thumb_func
 164              	XMC_VADC_GLOBAL_StartupCalibration:
 165              	.LFB260:
 265:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 266:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
 267:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 268:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 269:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to enable startup calibration feature */
 270:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
 271:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 166              	 .loc 1 271 0
 167              	 .cfi_startproc
 168              	 
 169              	 
 170              	 
 171              	.LVL10:
 272:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 273:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint8_t i;
 274:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   VADC_G_TypeDef *group_ptr;
 275:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
 276:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
 277:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))
 278:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 279:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 172              	 .loc 1 279 0
 173 0000 D0F88030 	 ldr r3,[r0,#128]
 174 0004 43F00043 	 orr r3,r3,#-2147483648
 175 0008 C0F88030 	 str r3,[r0,#128]
 176              	.LVL11:
 177 000c 0B49     	 ldr r1,.L17
 178 000e 01F11000 	 add r0,r1,#16
 179              	.LVL12:
 180              	.L13:
 280:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 281:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 282:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Loop until all active groups finish calibration */
 283:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 284:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 285:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     group_ptr = g_xmc_vadc_group_array[i];
 181              	 .loc 1 285 0
 182 0012 51F8042B 	 ldr r2,[r1],#4
 183              	.LVL13:
 286:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 184              	 .loc 1 286 0
 185 0016 D2F88030 	 ldr r3,[r2,#128]
 186 001a 13F4403F 	 tst r3,#196608
 187 001e 0AD0     	 beq .L11
 287:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     {
 288:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       /* This group is active. Loop until it finishes calibration */
 289:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 188              	 .loc 1 289 0
 189 0020 D2F88030 	 ldr r3,[r2,#128]
 190 0024 13F0805F 	 tst r3,#268435456
 191 0028 05D0     	 beq .L11
 192              	.L14:
 290:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       {
 291:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****         __NOP();
 193              	 .loc 1 291 0
 194              	
 195 002a 00BF     	 nop
 196              	
 289:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       {
 197              	 .loc 1 289 0
 198              	 .thumb
 199 002c D2F88030 	 ldr r3,[r2,#128]
 200 0030 13F0805F 	 tst r3,#268435456
 201 0034 F9D1     	 bne .L14
 202              	.L11:
 283:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 203              	 .loc 1 283 0 discriminator 2
 204 0036 8142     	 cmp r1,r0
 205 0038 EBD1     	 bne .L13
 292:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       }
 293:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     }
 294:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 295:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #else
 296:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 297:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Loop until calibration is started */
 298:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   while ((((SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) >> (uint32_t)SHS_SHSCFG_STATE_Pos) !=
 299:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 		  XMC_VADC_SHS_START_UP_CAL_ACTIVE  )
 300:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****    {
 301:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****      __NOP();
 302:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****    }
 303:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Loop until it finishes calibration */
 304:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   while ((((SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) >> (uint32_t)SHS_SHSCFG_STATE_Pos) ==
 305:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****          XMC_VADC_SHS_START_UP_CAL_ACTIVE )
 306:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 307:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     __NOP();
 308:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 309:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
 310:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 206              	 .loc 1 310 0
 207 003a 7047     	 bx lr
 208              	.L18:
 209              	 .align 2
 210              	.L17:
 211 003c 00000000 	 .word .LANCHOR0
 212              	 .cfi_endproc
 213              	.LFE260:
 215              	 .section .text.XMC_VADC_GLOBAL_SetBoundaries,"ax",%progbits
 216              	 .align 2
 217              	 .global XMC_VADC_GLOBAL_SetBoundaries
 218              	 .thumb
 219              	 .thumb_func
 221              	XMC_VADC_GLOBAL_SetBoundaries:
 222              	.LFB261:
 311:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 312:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to set boudaries for result of conversion. Should the boundaries be violated, interrupts are
 313:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
 314:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr,
 315:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                    const uint32_t boundary0,
 316:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                    const uint32_t boundary1)
 317:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 223              	 .loc 1 317 0
 224              	 .cfi_startproc
 225              	 
 226              	 
 227              	 
 228              	.LVL14:
 318:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t globbound;
 319:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 320:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))
 321:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 322:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   globbound = 0U;
 323:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   globbound |= (uint32_t) (boundary0 << VADC_GLOBBOUND_BOUNDARY0_Pos);
 324:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   globbound |= (uint32_t) (boundary1 << VADC_GLOBBOUND_BOUNDARY1_Pos);
 229              	 .loc 1 324 0
 230 0000 41EA0242 	 orr r2,r1,r2,lsl#16
 231              	.LVL15:
 325:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 326:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->GLOBBOUND = globbound;
 232              	 .loc 1 326 0
 233 0004 C0F8B820 	 str r2,[r0,#184]
 234 0008 7047     	 bx lr
 235              	 .cfi_endproc
 236              	.LFE261:
 238 000a 00BF     	 .section .text.XMC_VADC_GLOBAL_SetIndividualBoundary,"ax",%progbits
 239              	 .align 2
 240              	 .global XMC_VADC_GLOBAL_SetIndividualBoundary
 241              	 .thumb
 242              	 .thumb_func
 244              	XMC_VADC_GLOBAL_SetIndividualBoundary:
 245              	.LFB262:
 327:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 328:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 329:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to set an individual boundary for conversion results */
 330:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
 331:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
 332:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                            const uint16_t boundary_value)
 333:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 246              	 .loc 1 333 0
 247              	 .cfi_startproc
 248              	 
 249              	 
 250              	 
 251              	.LVL16:
 334:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 335:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t globbound;
 336:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 337:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))
 338:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Boundary Selection",
 339:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              ((XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection) ||
 340:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****               (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)))
 341:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 342:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Program the Boundary registers */
 343:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   globbound = global_ptr->GLOBBOUND;
 252              	 .loc 1 343 0
 253 0000 D0F8B830 	 ldr r3,[r0,#184]
 254              	.LVL17:
 344:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 345:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection)
 255              	 .loc 1 345 0
 256 0004 0229     	 cmp r1,#2
 257 0006 05D1     	 bne .L21
 346:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 347:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY0_Msk);
 258              	 .loc 1 347 0
 259 0008 23F47F63 	 bic r3,r3,#4080
 260              	.LVL18:
 261 000c 23F00F03 	 bic r3,r3,#15
 262              	.LVL19:
 348:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY0_Pos);
 263              	 .loc 1 348 0
 264 0010 1343     	 orrs r3,r3,r2
 265              	.LVL20:
 266 0012 07E0     	 b .L22
 267              	.L21:
 349:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 350:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)
 268              	 .loc 1 350 0
 269 0014 0329     	 cmp r1,#3
 270 0016 05D1     	 bne .L22
 351:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 352:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY1_Msk);
 271              	 .loc 1 352 0
 272 0018 23F07F63 	 bic r3,r3,#267386880
 273              	.LVL21:
 274 001c 23F47023 	 bic r3,r3,#983040
 275              	.LVL22:
 353:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY1_Pos);
 276              	 .loc 1 353 0
 277 0020 43EA0243 	 orr r3,r3,r2,lsl#16
 278              	.LVL23:
 279              	.L22:
 354:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 355:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
 356:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 357:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     /* For MISRA*/
 358:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 359:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->GLOBBOUND = globbound;
 280              	 .loc 1 359 0
 281 0024 C0F8B830 	 str r3,[r0,#184]
 282 0028 7047     	 bx lr
 283              	 .cfi_endproc
 284              	.LFE262:
 286 002a 00BF     	 .section .text.XMC_VADC_GLOBAL_SetCompareValue,"ax",%progbits
 287              	 .align 2
 288              	 .global XMC_VADC_GLOBAL_SetCompareValue
 289              	 .thumb
 290              	 .thumb_func
 292              	XMC_VADC_GLOBAL_SetCompareValue:
 293              	.LFB263:
 360:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 361:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 362:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 363:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
 364:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 365:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to set compare value for the result register. Result of conversion is compared against this 
 366:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
 367:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 294              	 .loc 1 367 0
 295              	 .cfi_startproc
 296              	 
 297              	 
 298              	 
 299              	.LVL24:
 368:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetCompareValue:Wrong Module Pointer", (global_ptr == VADC))
 369:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 370:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->GLOBRES &= ~((uint32_t)VADC_GLOBRES_RESULT_Msk);
 300              	 .loc 1 370 0
 301 0000 D0F80033 	 ldr r3,[r0,#768]
 302 0004 1B0C     	 lsrs r3,r3,#16
 303 0006 1B04     	 lsls r3,r3,#16
 304 0008 C0F80033 	 str r3,[r0,#768]
 371:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->GLOBRES |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 305              	 .loc 1 371 0
 306 000c D0F80033 	 ldr r3,[r0,#768]
 307 0010 43EA8101 	 orr r1,r3,r1,lsl#2
 308              	.LVL25:
 309 0014 C0F80013 	 str r1,[r0,#768]
 310 0018 7047     	 bx lr
 311              	 .cfi_endproc
 312              	.LFE263:
 314 001a 00BF     	 .section .text.XMC_VADC_GLOBAL_GetCompareResult,"ax",%progbits
 315              	 .align 2
 316              	 .global XMC_VADC_GLOBAL_GetCompareResult
 317              	 .thumb
 318              	 .thumb_func
 320              	XMC_VADC_GLOBAL_GetCompareResult:
 321              	.LFB264:
 372:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 373:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 374:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to retrieve the result of comparison */
 375:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr)
 376:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 322              	 .loc 1 376 0
 323              	 .cfi_startproc
 324              	 
 325              	 
 326              	 
 327              	.LVL26:
 377:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_VADC_FAST_COMPARE_t result;
 378:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t res;
 379:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 380:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetCompareResult:Wrong Module Pointer", (global_ptr == VADC))
 381:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 382:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   res = global_ptr->GLOBRES;
 328              	 .loc 1 382 0
 329 0000 D0F80003 	 ldr r0,[r0,#768]
 330              	.LVL27:
 383:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 384:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (res & (uint32_t)VADC_GLOBRES_VF_Msk)
 331              	 .loc 1 384 0
 332 0004 0028     	 cmp r0,#0
 385:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 386:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_GLOBRES_FCR_Pos) & (uint32_
 333              	 .loc 1 386 0
 334 0006 B4BF     	 ite lt
 335 0008 C0F38070 	 ubfxlt r0,r0,#30,#1
 336              	.LVL28:
 387:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 388:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
 389:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 390:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 337              	 .loc 1 390 0
 338 000c 0220     	 movge r0,#2
 339              	.LVL29:
 391:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 392:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 393:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   return result;
 394:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 340              	 .loc 1 394 0
 341 000e 7047     	 bx lr
 342              	 .cfi_endproc
 343              	.LFE264:
 345              	 .section .text.XMC_VADC_GLOBAL_BindGroupToEMux,"ax",%progbits
 346              	 .align 2
 347              	 .global XMC_VADC_GLOBAL_BindGroupToEMux
 348              	 .thumb
 349              	 .thumb_func
 351              	XMC_VADC_GLOBAL_BindGroupToEMux:
 352              	.LFB265:
 395:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 396:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* Bind one of the four groups to one of the two EMUX interfaces */
 397:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if (XMC_VADC_EMUX_AVAILABLE == 1U)
 398:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
 399:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 353              	 .loc 1 399 0
 354              	 .cfi_startproc
 355              	 
 356              	 
 357              	 
 358              	.LVL30:
 359 0000 10B4     	 push {r4}
 360              	.LCFI3:
 361              	 .cfi_def_cfa_offset 4
 362              	 .cfi_offset 4,-4
 400:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t mask;
 401:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t pos;
 402:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 403:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong Module Pointer", (global_ptr == VADC))
 404:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong EMUX Group", (emuxif < XMC_VADC_NUM_EMUX_INTERF
 405:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong VADC Group", (group < XMC_VADC_MAXIMUM_NUM_GROU
 406:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 407:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (0U == emuxif)
 363              	 .loc 1 407 0
 364 0002 0029     	 cmp r1,#0
 408:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 409:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Pos;
 410:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     mask = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Msk;
 411:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 412:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
 413:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 414:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Pos;
 365              	 .loc 1 414 0
 366 0004 0CBF     	 ite eq
 367 0006 0024     	 moveq r4,#0
 368 0008 0424     	 movne r4,#4
 369              	.LVL31:
 415:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     mask = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Msk;
 416:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 417:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 418:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->EMUXSEL &= ~(mask);
 370              	 .loc 1 418 0
 371 000a D0F8F033 	 ldr r3,[r0,#1008]
 372 000e 14BF     	 ite ne
 373 0010 6FF0F001 	 mvnne r1,#240
 374              	.LVL32:
 375 0014 6FF00F01 	 mvneq r1,#15
 376 0018 0B40     	 ands r3,r3,r1
 377 001a C0F8F033 	 str r3,[r0,#1008]
 419:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->EMUXSEL |= (uint32_t) (group << pos);
 378              	 .loc 1 419 0
 379 001e D0F8F033 	 ldr r3,[r0,#1008]
 380 0022 A240     	 lsls r2,r2,r4
 381              	.LVL33:
 382 0024 1343     	 orrs r3,r3,r2
 383 0026 C0F8F033 	 str r3,[r0,#1008]
 420:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 421:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 384              	 .loc 1 421 0
 385 002a 5DF8044B 	 ldr r4,[sp],#4
 386              	.LCFI4:
 387              	 .cfi_restore 4
 388              	 .cfi_def_cfa_offset 0
 389              	.LVL34:
 390 002e 7047     	 bx lr
 391              	 .cfi_endproc
 392              	.LFE265:
 394              	 .section .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode,"ax",%progbits
 395              	 .align 2
 396              	 .global XMC_VADC_GLOBAL_SetResultEventInterruptNode
 397              	 .thumb
 398              	 .thumb_func
 400              	XMC_VADC_GLOBAL_SetResultEventInterruptNode:
 401              	.LFB266:
 422:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif 
 423:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 424:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to bind result event with a service request line */
 425:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
 426:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 402              	 .loc 1 426 0
 403              	 .cfi_startproc
 404              	 
 405              	 
 406              	 
 407              	.LVL35:
 427:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t node;
 428:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
 429:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong Module Pointer", (global_ptr == VAD
 430:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong SR Number", (sr <= XMC_VADC_SR_SHAR
 431:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 432:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (sr >= XMC_VADC_SR_SHARED_SR0)
 408              	 .loc 1 432 0
 409 0000 0329     	 cmp r1,#3
 433:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 434:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 410              	 .loc 1 434 0
 411 0002 88BF     	 it hi
 412 0004 0439     	 subhi r1,r1,#4
 413              	.LVL36:
 435:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 436:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
 437:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 438:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     node = (uint32_t)sr;
 439:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 440:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 441:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_REV0NP_Msk);
 414              	 .loc 1 441 0
 415 0006 D0F84031 	 ldr r3,[r0,#320]
 416 000a 23F47023 	 bic r3,r3,#983040
 417 000e C0F84031 	 str r3,[r0,#320]
 442:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
 418              	 .loc 1 442 0
 419 0012 D0F84031 	 ldr r3,[r0,#320]
 420 0016 43EA0141 	 orr r1,r3,r1,lsl#16
 421              	.LVL37:
 422 001a C0F84011 	 str r1,[r0,#320]
 423 001e 7047     	 bx lr
 424              	 .cfi_endproc
 425              	.LFE266:
 427              	 .section .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode,"ax",%progbits
 428              	 .align 2
 429              	 .global XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
 430              	 .thumb
 431              	 .thumb_func
 433              	XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:
 434              	.LFB267:
 443:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 444:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 445:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to bind request source event with a service request line */
 446:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
 447:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 435              	 .loc 1 447 0
 436              	 .cfi_startproc
 437              	 
 438              	 
 439              	 
 440              	.LVL38:
 448:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t node;
 449:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
 450:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_
 451:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 452:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (sr >= XMC_VADC_SR_SHARED_SR0)
 441              	 .loc 1 452 0
 442 0000 0329     	 cmp r1,#3
 453:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 454:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 443              	 .loc 1 454 0
 444 0002 88BF     	 it hi
 445 0004 0439     	 subhi r1,r1,#4
 446              	.LVL39:
 455:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 456:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
 457:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 458:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     node = (uint32_t)sr;
 459:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 460:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 461:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 447              	 .loc 1 461 0
 448 0006 D0F84031 	 ldr r3,[r0,#320]
 449 000a 23F00F03 	 bic r3,r3,#15
 450 000e C0F84031 	 str r3,[r0,#320]
 462:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 451              	 .loc 1 462 0
 452 0012 D0F84031 	 ldr r3,[r0,#320]
 453 0016 1943     	 orrs r1,r1,r3
 454              	.LVL40:
 455 0018 C0F84011 	 str r1,[r0,#320]
 456 001c 7047     	 bx lr
 457              	 .cfi_endproc
 458              	.LFE267:
 460 001e 00BF     	 .section .text.XMC_VADC_GROUP_InputClassInit,"ax",%progbits
 461              	 .align 2
 462              	 .global XMC_VADC_GROUP_InputClassInit
 463              	 .thumb
 464              	 .thumb_func
 466              	XMC_VADC_GROUP_InputClassInit:
 467              	.LFB269:
 463:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 464:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 465:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to initialize an instance of group of VADC hardware */
 466:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)  
 467:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
 468:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 469:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
 470:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 471:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Program the input classes */
 472:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 473:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 474:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 475:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 476:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 477:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->ARBCFG = config->g_arbcfg;
 478:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 479:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->BOUND = config->g_bound;
 480:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 481:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* External mux configuration */
 482:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 483:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 484:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 485:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 486:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to program conversion characteristics */
 487:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
 488:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
 489:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 468              	 .loc 1 489 0
 469              	 .cfi_startproc
 470              	 
 471              	 
 472              	.LVL41:
 473 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 474              	.LCFI5:
 475              	 .cfi_def_cfa_offset 20
 476              	 .cfi_offset 4,-20
 477              	 .cfi_offset 5,-16
 478              	 .cfi_offset 6,-12
 479              	 .cfi_offset 7,-8
 480              	 .cfi_offset 14,-4
 490:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t        conv_class;
 491:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t        conv_mode_pos;
 492:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t        sample_time_pos;
 493:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t        conv_mode_mask;
 494:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t        sample_time_mask;
 495:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t        sample_time;
 496:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_VADC_CONVMODE_t conv_mode;
 497:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 498:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_pt
 499:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_
 500:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLAS
 501:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 502:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* 
 503:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****    * Obtain the mask and position macros of the parameters based on what is being requested - Stand
 504:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****    * external mux channels.
 505:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****    */
 506:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (XMC_VADC_GROUP_CONV_STD == conv_type)
 481              	 .loc 1 506 0
 482 0002 4AB9     	 cbnz r2,.L38
 483              	.LVL42:
 507:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 508:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 509:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 510:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 511:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 512:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     sample_time      = (uint32_t) config.sample_time_std_conv;
 484              	 .loc 1 512 0
 485 0004 01F01F05 	 and r5,r1,#31
 486              	.LVL43:
 513:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 487              	 .loc 1 513 0
 488 0008 C1F30221 	 ubfx r1,r1,#8,#3
 489              	.LVL44:
 511:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     sample_time      = (uint32_t) config.sample_time_std_conv;
 490              	 .loc 1 511 0
 491 000c 1F22     	 movs r2,#31
 492              	.LVL45:
 509:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 493              	 .loc 1 509 0
 494 000e 4FF4E06E 	 mov lr,#1792
 510:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 495              	 .loc 1 510 0
 496 0012 0026     	 movs r6,#0
 508:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 497              	 .loc 1 508 0
 498 0014 0827     	 movs r7,#8
 499 0016 09E0     	 b .L39
 500              	.LVL46:
 501              	.L38:
 514:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 515:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
 516:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 517:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 518:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 519:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 520:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 521:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 502              	 .loc 1 521 0
 503 0018 C1F30445 	 ubfx r5,r1,#16,#5
 504              	.LVL47:
 522:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 505              	 .loc 1 522 0
 506 001c C1F30261 	 ubfx r1,r1,#24,#3
 507              	.LVL48:
 520:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 508              	 .loc 1 520 0
 509 0020 4FF4F812 	 mov r2,#2031616
 510              	.LVL49:
 518:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 511              	 .loc 1 518 0
 512 0024 4FF0E06E 	 mov lr,#117440512
 519:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 513              	 .loc 1 519 0
 514 0028 1026     	 movs r6,#16
 517:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 515              	 .loc 1 517 0
 516 002a 1827     	 movs r7,#24
 517              	.LVL50:
 518              	.L39:
 519 002c 00EB8303 	 add r3,r0,r3,lsl#2
 520              	.LVL51:
 523:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 524:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 525:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Determine the class */
 526:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   conv_class  = group_ptr->ICLASS[set_num];
 521              	 .loc 1 526 0
 522 0030 D3F8A040 	 ldr r4,[r3,#160]
 523              	.LVL52:
 527:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 528:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Program the class register */
 529:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   conv_class &= ~(conv_mode_mask);
 524              	 .loc 1 529 0
 525 0034 24EA0E04 	 bic r4,r4,lr
 526              	.LVL53:
 530:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 527              	 .loc 1 530 0
 528 0038 B940     	 lsls r1,r1,r7
 529              	.LVL54:
 530 003a 2143     	 orrs r1,r1,r4
 531              	.LVL55:
 531:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   conv_class &= ~(sample_time_mask);
 532              	 .loc 1 531 0
 533 003c 21EA0202 	 bic r2,r1,r2
 534              	.LVL56:
 532:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 535              	 .loc 1 532 0
 536 0040 05FA06F1 	 lsl r1,r5,r6
 537 0044 0A43     	 orrs r2,r2,r1
 538              	.LVL57:
 533:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->ICLASS[set_num] = conv_class;
 539              	 .loc 1 533 0
 540 0046 C3F8A020 	 str r2,[r3,#160]
 541 004a F0BD     	 pop {r4,r5,r6,r7,pc}
 542              	 .cfi_endproc
 543              	.LFE269:
 545              	 .section .text.XMC_VADC_GROUP_Init,"ax",%progbits
 546              	 .align 2
 547              	 .global XMC_VADC_GROUP_Init
 548              	 .thumb
 549              	 .thumb_func
 551              	XMC_VADC_GROUP_Init:
 552              	.LFB268:
 468:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
 553              	 .loc 1 468 0
 554              	 .cfi_startproc
 555              	 
 556              	 
 557              	.LVL58:
 558 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 559              	.LCFI6:
 560              	 .cfi_def_cfa_offset 24
 561              	 .cfi_offset 3,-24
 562              	 .cfi_offset 4,-20
 563              	 .cfi_offset 5,-16
 564              	 .cfi_offset 6,-12
 565              	 .cfi_offset 7,-8
 566              	 .cfi_offset 14,-4
 567 0002 0546     	 mov r5,r0
 568 0004 0C46     	 mov r4,r1
 472:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 569              	 .loc 1 472 0
 570 0006 4968     	 ldr r1,[r1,#4]
 571              	.LVL59:
 572 0008 0022     	 movs r2,#0
 573 000a 1346     	 mov r3,r2
 574 000c FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 575              	.LVL60:
 473:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 576              	 .loc 1 473 0
 577 0010 2846     	 mov r0,r5
 578 0012 6168     	 ldr r1,[r4,#4]
 579 0014 0122     	 movs r2,#1
 580 0016 0023     	 movs r3,#0
 581 0018 FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 582              	.LVL61:
 474:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 583              	 .loc 1 474 0
 584 001c 2846     	 mov r0,r5
 585 001e A168     	 ldr r1,[r4,#8]
 586 0020 0022     	 movs r2,#0
 587 0022 0123     	 movs r3,#1
 588 0024 FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 589              	.LVL62:
 475:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 590              	 .loc 1 475 0
 591 0028 2846     	 mov r0,r5
 592 002a A168     	 ldr r1,[r4,#8]
 593 002c 0122     	 movs r2,#1
 594 002e 1346     	 mov r3,r2
 595 0030 FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 596              	.LVL63:
 477:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 597              	 .loc 1 477 0
 598 0034 2369     	 ldr r3,[r4,#16]
 599 0036 C5F88030 	 str r3,[r5,#128]
 479:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 600              	 .loc 1 479 0
 601 003a E368     	 ldr r3,[r4,#12]
 602 003c C5F8B830 	 str r3,[r5,#184]
 603              	.LVL64:
 604 0040 E178     	 ldrb r1,[r4,#3]
 605 0042 C1F38103 	 ubfx r3,r1,#2,#2
 606              	.LVL65:
 607 0046 C1F30017 	 ubfx r7,r1,#4,#1
 608              	.LVL66:
 609 004a C1F34011 	 ubfx r1,r1,#5,#1
 610              	.LVL67:
 611 004e A078     	 ldrb r0,[r4,#2]
 612              	.LBB28:
 613              	.LBB29:
 614              	 .file 2 "C:/Files/Projects/Git/XMCLib/inc/xmc_vadc.h"
   1:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
   2:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @file xmc_vadc.h
   3:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @date 2019-03-30
   4:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
   5:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @cond
   6:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
   7:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
   9:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * All rights reserved.                        
  11:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                                             
  12:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * following conditions are met:   
  14:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  15:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * disclaimer.                        
  17:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * 
  18:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * 
  21:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  24:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  32:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
  35:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
  36:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Change History
  37:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * --------------
  38:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
  39:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * 2015-02-15:
  40:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - Initial <br>
  41:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *      
  42:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * 2015-02-20:
  43:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - Revised for XMC1201 device.<br>
  44:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *   
  45:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * 2015-04-27:
  46:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for SHS.<br>
  47:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - Added New APIs for trigger edge selection.<BR>
  48:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
  51:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * 2015-06-20:
  52:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * 2015-06-25:
  54:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - BFL configuration in channel initialization fixed.
  55:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
  56:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * 2015-07-28:
  57:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  58:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  59:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  60:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  61:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  62:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  63:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAlias
  64:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetInputClass
  65:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  66:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  67:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  68:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  69:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
  70:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  71:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - Added:
  72:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - XMC4300 device supported
  73:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
  74:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - Fixed:
  75:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_TriggerEvent API updated. OR operation removed. 
  76:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_ClearEvent API updated. Multiple events triggering on clearing the event i
  77:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - Wrong MACRO name defined in xmc_vadc_map.h file corrected for XMC4200/4100 devices.
  78:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *       XMC_VADC_G3_SAMPLE renamed to XMC_VADC_G1_SAMPLE
  79:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
  80:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  81:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  82:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled
  83:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled
  84:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  85:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  86:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
  87:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * 2016-03-09:
  88:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - Optimization of write only registers
  89:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
  90:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * 2016-03-18:
  91:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_IsConverterReady(): API checks the STEPCFG register for the read
  92:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *       SHSCFG SFR. 
  93:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
  94:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * 2016-06-17:
  95:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - New macros added XMC_VADC_SHS_FULL_SET_REG, XMC_VADC_RESULT_PRIORITY_AVAILABLE
  96:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - New Enum added XMC_VADC_SHS_GAIN_LEVEL_t and XMC_VADC_SYNCTR_EVAL_t
  97:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - New APIs added are:
  98:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncSlaveReadySignal
  99:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetAssertedEvents
 100:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAssertedResultEvents
 101:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultRegPriority
 102:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncReadySignal
 103:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetSyncReadySignal
 104:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetResultRegPriority
 105:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
 106:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * 2017-02-06:
 107:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - Added new functions to remove channels from background request source, XMC_VADC_GLOBAL_Bac
 108:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
 109:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * 2017-06-24:
 110:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - Added new function XMC_VADC_GLOBAL_SHS_SetAnalogReference() for XMC1 family
 111:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
 112:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * 2017-08-14:
 113:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - Added XMC_VADC_GLOBAL_DETAILED_RESULT_t
 114:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *       You can cast the return of XMC_VADC_GLOBAL_GetDetailedResult() to a varible of type XMC_VA
 115:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_SetAnalogReference() to update AREF bitfield correctly
 116:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
 117:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * 2019-03-30:
 118:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - Changed XMC_VADC_GROUP_SetChannelAlias() to inline function
 119:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     - Added XMC_VADC_GROUP_GetChannelAlias()
 120:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * 
 121:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @endcond 
 122:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
 123:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 124:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 125:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #ifndef XMC_VADC_H
 126:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_H
 127:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  
 128:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 129:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * HEADER FILES
 130:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 131:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #include <xmc_common.h>
 132:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #include <xmc_scu.h>
 133:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #include <xmc_vadc_map.h>
 134:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 135:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 136:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @addtogroup XMClib XMC Peripheral Library
 137:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @{
 138:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 139:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  
 140:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 141:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @addtogroup VADC
 142:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @brief Versatile Analog to Digital Converter (VADC) driver for XMC microcontroller family.
 143:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
 144:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * The XMC microcontroller provides a series of analog input channels connected to a cluster of Ana
 145:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Converters using the Successive Approximation Register (SAR) principle to convert analog input v
 146:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * to discrete digital values.
 147:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \if XMC1
 148:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * The XMC1x is based on Sample & Hold converters, where a cluster contains 2 Sample&Hold units whi
 149:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * converter.
 150:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \endif
 151:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
 152:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Each converter of the ADC cluster can operate independent of the others, controlled by a dedicat
 153:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * registers and triggered by a dedicated group request source. The results of each channel can be 
 154:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * dedicated channel-specific result register or in a group-specific result register.<BR>
 155:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
 156:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * The Versatile Analog to Digital Converter module (VADC) of the XMC comprises a set of converter 
 157:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * can be operated either independently or via a common request source that emulates a background c
 158:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Each converter block is equipped with a dedicated input multiplexer and dedicated request source
 159:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * which together build separate groups.
 160:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
 161:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \if XMC4
 162:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc4x.png"
 163:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \else
 164:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc1x.png"
 165:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \endif
 166:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
 167:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * The VADC LLD is split into GLOBAL and GROUP related APIs.<BR>
 168:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * <B>GLOBAL: </B><BR>
 169:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * <UL>
 170:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * <LI>Global APIs act on the entire ADC module. Configures global configuration registers</LI>
 171:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * <LI>Allows configuration of the background request source of the VADC.</LI>
 172:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * <LI>The clock related configurations for the VADC module are configured in the Global APIs/</LI>
 173:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * <LI>The Global API names are prefixed by the \b XMC_VADC_GLOBAL_ and they accept ::XMC_VADC_GLOB
 174:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 175:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the background request source of the VADC. The APIs which act on the background r
 176:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_Background</LI>
 177:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the sample and hold unit of the VADC. The APIs which act on the SHS related regis
 178:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_SHS_</LI>
 179:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 180:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
 181:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * <B>GROUP: </B><BR>
 182:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * <UL>
 183:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * <LI>Group APIs act on a VADC group. Configures the group configuration registers</LI>
 184:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the queue request source of the VADC. The APIs which act on the queue related reg
 185:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Queue</LI>
 186:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the scan request source of the VADC. The APIs which act on the scan related regis
 187:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Scan</LI>
 188:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * <LI>Configuration of the channels of each group are done by the API which have a prefix as
 189:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     \b XMC_VADC_GROUP_Channel.</LI>
 190:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * <LI>The Group API names are prefixed by the \b XMC_VADC_GROUP_ and they accept ::XMC_VADC_GROUP_
 191:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 192:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 193:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @{
 194:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 195:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  
 196:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 197:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * MACROS
 198:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 199:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 200:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if ((UC_SERIES == XMC42)||(UC_SERIES == XMC41) || (UC_SERIES == XMC43))
 201:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE           (1U) /*  Defines the availability of group resource in a
 202:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE           (1U) /*  Defines the availability of scan request resour
 203:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE           (1U) /*  Defines the availability of queue request resou
 204:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE            (1U) /*  Defines the availability of external multiplexe
 205:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 206:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE        (1U) /*  Defines the availability of boundary check supp
 207:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS      (1U) /*  Defines the availability of synchronous request
 208:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS        (2U) /*  Defines the maximum number of groups available 
 209:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT      (1U) /*  Defines the availability of boundary flags in a
 210:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE         (1U) /*  Defines the external multiplexer channel select
 211:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 212:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE             (0U) /* Defines the availability of sample and hold modu
 213:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG          (0U) /* Defines the availability of sample and hold modu
 214:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE    (1U) /* Define the availability of a source specific res
 215:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 216:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
 217:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 218:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC44 || UC_SERIES == XMC47 || UC_SERIES == XMC48)
 219:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 220:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 221:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 222:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 223:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 224:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 225:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 226:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 227:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 228:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 229:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 230:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 231:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 232:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 233:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 234:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
 235:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 236:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC45)
 237:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 238:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 239:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 240:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 241:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 242:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 243:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 244:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 245:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 246:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 247:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 248:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 249:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 250:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 251:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 252:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
 253:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 254:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC14 || UC_SERIES == XMC13 || UC_SERIES == XMC12)
 255:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 256:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 257:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 258:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 259:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 260:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 261:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 262:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 263:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 264:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 265:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 266:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 267:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (1U) /* Defines the availability of sample and hold module
 268:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 269:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (1U) /* Define the availability of a priority for result
 270:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
 271:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 272:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC11)
 273:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (0U) /*  Defines the availability of group resource in a d
 274:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (0U) /*  Defines the availability of scan request resource
 275:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (0U) /*  Defines the availability of queue request resourc
 276:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (0U) /*  Defines the availability of external multiplexer 
 277:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 278:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (0U) /*  Defines the availability of boundary check suppor
 279:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (0U) /*  Defines the availability of synchronous request s
 280:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 281:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 282:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_START_UP_CAL_ACTIVE (3U) /*  Defines the need for SHS startup calibration acti
 283:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 devices */
 284:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_CONV_ENABLE_FOR_XMC11   (*(uint32_t*) 0x40010500UL) /*  Defines the additional err
 285:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 device for effective working*/ 
 286:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 287:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 288:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 289:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 290:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 291:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 292:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
 293:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 294:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_PORTS               (16U) /* Defines the number of hardware ports that can be 
 295:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                     as triggers and gating signals */
 296:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 297:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_RESULT_REGISTERS    (16U) /* Defines the number of result holding registers pe
 298:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 299:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_CHANNELS_PER_GROUP  (8U)  /**< Defines the number of ADC channels per group */
 300:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 301:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 302:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * ENUMS
 303:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 304:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef uint16_t XMC_VADC_RESULT_SIZE_t; /**< Type defined the converted result size to unsigned 16
 305:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef VADC_GLOBAL_TypeDef XMC_VADC_GLOBAL_t; /**< Type defined the device header file vadc global
 306:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                              type to VADC type*/
 307:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 308:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_AVAILABLE == 1U)
 309:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef VADC_G_TypeDef XMC_VADC_GROUP_t; /**< Type defined the device header file vadc group regist
 310:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                              type to VADC Group type*/
 311:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
 312:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 313:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 314:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef SHS_Type XMC_VADC_GLOBAL_SHS_t; /**< Type defined the sample and hold register structure*/
 315:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
 316:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 317:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Defines the return status after execution of VADC specific API's. Use @ref XMC_VADC_STATUS_t fo
 318:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 319:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STATUS
 320:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 321:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_SUCCESS = 0,   /**< Returned when the API has been able to fulfill the callers re
 322:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_ERROR          /**< Returned when the API cannot fulfill the request */
 323:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STATUS_t;
 324:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 325:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 326:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Defines the various service requests lines. Each group can raise up to 4 service requests indep
 327:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  all groups together have the possibility of raising 4 module wide service requests. Use @ref XM
 328:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 329:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 330:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SR
 331:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 332:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR0 = 0, /**< Group specific Service Request-0 */
 333:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR1,     /**< Group specific Service Request-1 */
 334:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR2,     /**< Group specific Service Request-2 */
 335:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR3,     /**< Group specific Service Request-3 */
 336:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR0,    /**< Module Wide Common Service Request-0 */
 337:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR1,    /**< Module Wide Common Service Request-1 */
 338:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR2,    /**< Module Wide Common Service Request-2 */
 339:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR3    /**< Module Wide Common Service Request-3 */
 340:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SR_t;
 341:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 342:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 343:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Defines the mode of operation of a channel, when an ongoing conversion gets interrupted in betw
 344:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_STARTMODE_t for this enumeration.
 345:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 346:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STARTMODE
 347:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 348:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_WFS = 0, /**< An ongoing conversion completes without interruption */
 349:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CIR,     /**< An ongoing conversion can be interrupted and resumed later*/
 350:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CNR     /**< An ongoing conversion can be interrupted and never resumed */
 351:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STARTMODE_t;
 352:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 353:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 354:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Defines the edge sensitivity of the trigger signal which can assert a conversion.
 355:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_EDGE_t for this enumeration.
 356:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 357:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_EDGE
 358:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 359:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_NONE = 0, /**< No external trigger. Conversion request can be asserted by s
 360:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_FALLING,  /**< The falling edge of the external trigger can assert conversi
 361:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_RISING,   /**< The rising edge of the external trigger can assert conversio
 362:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_ANY       /**< Both the edges can assert conversion request */
 363:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_EDGE_t;
 364:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 365:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 366:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Defines the external trigger input selection possibilities, to assert a conversion. Refer the V
 367:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  section of the reference manual for details of peripherals which can be used. Also refer xmc_va
 368:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  detailed definitions of the peripherals which can take the control of these enumeration items.
 369:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_INPUT_SELECT_t for this enumeration.
 370:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 371:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_INPUT_SELECT
 372:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 373:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_A = 0, /**< Trigger select signal A */
 374:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_B,     /**< Trigger select signal B */
 375:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_C,     /**< Trigger select signal C */
 376:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_D,     /**< Trigger select signal D */
 377:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_E,     /**< Trigger select signal E */
 378:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_F,     /**< Trigger select signal F */
 379:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_G,     /**< Trigger select signal G */
 380:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_H,     /**< Trigger select signal H */
 381:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_I,     /**< Trigger select signal I */
 382:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_J,     /**< Trigger select signal J */
 383:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_K,     /**< Trigger select signal K */
 384:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_L,     /**< Trigger select signal L */
 385:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_M,     /**< Trigger select signal M */
 386:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_N,     /**< Trigger select signal N */
 387:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_O,     /**< Trigger select signal O */
 388:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_P      /**< Trigger select signal P */
 389:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   
 390:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_INPUT_SELECT_t;
 391:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 392:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 393:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Defines the external gating input selection possibilities, to gate the conversion requests. Ref
 394:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  interconnects section of the reference manual for details of peripherals which can be used. Als
 395:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  xmc_vadc_map.h file for detailed definitions of the peripherals which can take the control of t
 396:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  items. Use @ref XMC_VADC_GATE_INPUT_SELECT_t for this enumeration.
 397:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 398:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATE_INPUT_SELECT
 399:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 400:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_A = 0, /**< Gating select signal A */
 401:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_B,     /**< Gating select signal B */
 402:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_C,     /**< Gating select signal C */
 403:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_D,     /**< Gating select signal D */
 404:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_E,     /**< Gating select signal E */
 405:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_F,     /**< Gating select signal F */
 406:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_G,     /**< Gating select signal G */
 407:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_H,     /**< Gating select signal H */
 408:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_I,     /**< Gating select signal I */
 409:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_J,     /**< Gating select signal J */
 410:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_K,     /**< Gating select signal K */
 411:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_L,     /**< Gating select signal L */
 412:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_M,     /**< Gating select signal M */
 413:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_N,     /**< Gating select signal N */
 414:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_O,     /**< Gating select signal O */
 415:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_P      /**< Gating select signal P */
 416:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   
 417:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATE_INPUT_SELECT_t;
 418:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 419:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 420:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Defines the condition for gating the conversion requests. It can be used to set the ENGT field
 421:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * of ASMR/BSMR/QMR register respectively for auto_scan/background_scan/queue request sources.
 422:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_GATEMODE_t for this enumeration.
 423:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 424:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATEMODE
 425:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 426:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_BLOCK = 0,  /**< External triggers are permanently blocked */
 427:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_IGNORE,     /**< External triggers are unconditionally passed */
 428:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVEHIGH, /**< External trigger is passed only if the gate signal is high */
 429:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVELOW  /**< External trigger is passed only if the gate signal is low */
 430:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATEMODE_t;
 431:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 432:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 433:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion result handling mode. Use @ref XMC_VADC_DMM_t for this enumeration.
 434:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 435:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_DMM
 436:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 437:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_REDUCTION_MODE = 0, /**< Standard Data reduction mode*/
 438:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_FILTERING_MODE,     /**< Provide option to select Finite Impulse Response Filter (FI
 439:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                         Infinite Impulse Response Filter (IIR)*/
 440:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_DIFFERENCE_MODE,    /**< Difference mode is selected*/
 441:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DMM_t;
 442:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 443:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 444:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Defines the conversion mode. It defines the resolution of conversion. Use XMC_VADC_CONVMODE_t f
 445:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 446:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CONVMODE
 447:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 448:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_12BIT       = 0,  /**< Results of conversion are 12bits wide */
 449:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_10BIT       = 1,  /**< Results of conversion are 10bits wide */
 450:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_8BIT        = 2,  /**< Results of conversion are 8bits wide */
 451:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_FASTCOMPARE = 5  /**< Input signal compared with a preset range */
 452:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CONVMODE_t;
 453:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 454:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 455:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Defines the output of a fast compare mode. Use @ref XMC_VADC_FAST_COMPARE_t for
 456:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  this enumeration.
 457:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 458:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_FAST_COMPARE
 459:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 460:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_LOW = 0, /**< Input lower than than programmed reference */
 461:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_HIGH ,   /**< Input higher than than programmed reference */
 462:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_UNKNOWN  /**< Unknown, Conversion probably still ongoing */
 463:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_FAST_COMPARE_t;
 464:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  
 465:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 466:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Defines the type of scan request source to be used. It can choose between auto scan and backgrou
 467:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * source methods. Use @ref XMC_VADC_SCAN_TYPE_t for this enumeration.
 468:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 469:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_TYPE
 470:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 471:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_GROUPSCAN = 0, /**< Auto scan mode of operation selected. Also called as Group
 472:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_BACKGROUND    /**< Background scan mode of operation selected. Also called as 
 473:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_TYPE_t;
 474:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 475:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 476:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Defines the behavior of load event for the scan request source. Use @ref XMC_VADC_SCAN_LOAD_t fo
 477:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 478:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_LOAD
 479:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 480:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_OVERWRITE = 0, /**< The old set of channels is discarded in favor of the new s
 481:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                          awaiting conversion */
 482:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_COMBINE       /**< The new set of channels are combined with the pending chann
 483:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                          previous set */
 484:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_LOAD_t;
 485:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 486:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 487:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion classes that can be selected for each channel. The enumeration members ho
 488:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * global classes. The conversion classes decides the properties of conversion, like resolution, sa
 489:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_CHANNEL_CONV_t for this enumeration.
 490:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 491:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 492:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_CONV
 493:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 494:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 = 0, /**< Conversion property set-0 specific to the group */
 495:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS1,     /**< Conversion property set-1 specific to the group */
 496:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS0,    /**< Conversion property set-0, Module wide */
 497:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1    /**< Conversion property set-1, Module wide */
 498:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONV_t;
 499:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 500:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 501:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Defines the references to boundary values used for limit checking feature. Each of these can be 
 502:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * either an upper bound or a lower bound. Use @ref XMC_VADC_CHANNEL_BOUNDARY_t for this enumeratio
 503:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 504:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 505:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY
 506:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 507:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 = 0, /**< Group specific Boundary-0 value */
 508:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1,     /**< Group specific Boundary-1 value */
 509:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0,    /**< Module wide Boundary-0 value */
 510:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1    /**< Module wide Boundary-1 value */
 511:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_t;
 512:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 513:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 514:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Defines the voltage which the capacitor is charged to. Used in Broken wire detection feature. Us
 515:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_CHANNEL_BWDCH_t for this enumeration.
 516:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 517:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BWDCH
 518:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 519:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAGND = 0, /**< Capacitor pre-charged to ground*/
 520:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAREF     /**< Capacitor pre-charged to reference voltage*/
 521:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BWDCH_t;
 522:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 523:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 524:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *   Defines the criteria for event generation by the channel. Use @ref XMC_VADC_CHANNEL_EVGEN_t fo
 525:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 526:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_EVGEN
 527:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 528:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_NEVER     = 0,  /**< No event generated */
 529:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_INBOUND   = 1U, /**< Event generated when the result is within the normal 
 530:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPHIGH  = 1U, /**< Event generated when the result of fast compare opera
 531:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_OUTBOUND  = 2U, /**< Event generated when the result is outside the normal
 532:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPLOW   = 2U, /**< Event generated when the result result of fast compar
 533:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_ALWAYS    = 3U /**< Event generated always after conversion - unconditiona
 534:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_EVGEN_t;
 535:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 536:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 537:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Defines the reference voltage selection for conversion. Use @ref XMC_VADC_CHANNEL_REF_t for this
 538:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 539:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_REF
 540:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 541:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_INTREF = 0, /**< Internal VARef */
 542:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_ALT_CH0    /**< External voltage available on Channel-0 of the perticular gr
 543:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_REF_t;
 544:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  
 545:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 546:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Defines the criteria for boundary flag assertion. Use @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t
 547:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 548:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 549:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY_CONDITION
 550:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 551:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_ABOVE_BAND = 0, /**< Set Boundary condition criteria to asser
 552:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_BELOW_BAND     /**< Set Boundary condition criteria to assert
 553:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t;
 554:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  
 555:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 556:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Defines the event which can lead to a global service request assertion. Use @ref XMC_VADC_GLOBAL
 557:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 558:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 559:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_EVENT
 560:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 561:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE = VADC_GLOBEFLAG_SEVGLB_Msk, /**< Background scan request sourc
 562:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_RESULT      = VADC_GLOBEFLAG_REVGLB_Msk  /**< Global result event */
 563:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_EVENT_t;
 564:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  
 565:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 566:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Defines the power modes of a VADC Group. Use @ref XMC_VADC_GROUP_POWERMODE_t for this enumeratio
 567:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 568:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_POWERMODE
 569:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 570:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_OFF       = 0, /**< Group is powered down */
 571:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED1,     /**< Reserved */
 572:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED2,     /**< Reserved */
 573:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_NORMAL        /**< Group is powered up */
 574:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_POWERMODE_t;
 575:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 576:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 577:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Defines the status of a VADC group (also known as kernel). Use @ref XMC_VADC_GROUP_STATE_t for 
 578:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 579:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_STATE
 580:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 581:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_IDLE = 0, /**< Idle and can convert if requested */
 582:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_BUSY      /**< Busy with an ongoing conversion */
 583:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_STATE_t;
 584:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 585:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 586:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Defines the reference to sample time and conversion mode settings. Use @ref XMC_VADC_GROUP_CONV
 587:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 588:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 589:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_CONV
 590:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 591:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_STD = 0, /**< Settings pertaining to channels directly attached to VADC modul
 592:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_EMUX    /**< Settings pertaining to channels connected to VADC via EMUX */
 593:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONV_t;
 594:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 595:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 596:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbiter behavior. Use @ref XMC_VADC_GROUP_ARBMODE_t for this enumera
 597:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 598:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_ARBMODE
 599:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 600:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ALWAYS = 0, /**< Arbiter runs all the time */
 601:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ONDEMAND    /**< Arbiter runs only if a conversion request is asserted by 
 602:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                           request sources */
 603:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_ARBMODE_t;
 604:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 605:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 606:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX mode of operation. Use @ref XMC_VADC_GROUP_EMUXMODE_t for this enumeration.
 607:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 608:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXMODE
 609:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 610:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SWCTRL = 0,     /**< Perform EMUX in Software control mode*/
 611:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_STEADYMODE,     /**< Perform EMUX in Steady mode (Use EMUX set value)*/
 612:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SINGLEMODE,     /**< Perform EMUX in Single step mode*/
 613:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SEQUENCEMODE,   /**< Perform EMUX in Sequence mode*/
 614:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXMODE_t;
 615:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 616:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 617:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX channel selection encoding scheme. Use @ref XMC_VADC_GROUP_EMUXCODE_t for this
 618:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 619:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXCODE
 620:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 621:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_BINARY = 0, /**< A linearly incrementing code serves are MUX-SEL */
 622:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_GRAY       /**< The MUX-SEL is gray encoded */
 623:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCODE_t;
 624:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 625:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 626:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Defines the service request set used. Use @ref XMC_VADC_GROUP_IRQ_t for this enumeration.
 627:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 628:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_IRQ
 629:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 630:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_KERNEL = 0, /**< Refers to Group specific service request */
 631:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_SHARED     /**< Refers to Module wide service request */
 632:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_IRQ_t;
 633:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 634:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 635:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Defines the alignment of the converted result. Use @ref XMC_VADC_RESULT_ALIGN_t for this enumer
 636:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 637:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_ALIGN
 638:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 639:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_LEFT = 0,  /**< Always align result to left */
 640:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_RIGHT      /**< Always align result to right */
 641:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_ALIGN_t;
 642:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 643:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_SUBTRATION 
 644:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 645:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_LEFT_ALIGN  = 0U,  /**< Always align result to left */
 646:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 647:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_LEFT_ALIGN  = 2U,  /**< Always align result to left */
 648:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 649:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_LEFT_ALIGN   = 4U,  /**< Always align result to left */
 650:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_RIGHT_ALIGN  = 0U,  /**< Always align result to right */
 651:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_SUBTRATION_t;
 652:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 653:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 654:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbitration priority. Use @ref XMC_VADC_GROUP_RS_PRIORITY_t for this
 655:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 656:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_RS_PRIORITY
 657:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 658:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_0 = 0, /**< Lowest priority for the request source*/
 659:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_1,     /**< Second lowest priority for the request source*/
 660:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_2,     /**< Second highest priority for the request source*/
 661:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_3,     /**< Highest priority for the request source*/
 662:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_RS_PRIORITY_t;
 663:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 664:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 665:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Defines the various modes for the boundary flag. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t f
 666:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 667:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_BOUNDARY_FLAG_MODE
 668:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 669:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_DISABLED = 0,       /**< Disable boundary flag*/
 670:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED,            /**< Always enable boundary*/
 671:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_LOW, /**< Enable boundary flag when gate level
 672:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_HIGH /**< Enable boundary flag when gate level
 673:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t;
 674:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 675:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 676:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 677:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Defines the boundary select for Channel. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t for this 
 678:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 679:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_SELECT
 680:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 681:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_LOWER_BOUND = 0U,       /**< Select the lower boundary*/
 682:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_UPPER_BOUND = 2U        /**< Selects the upper boundary*/
 683:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_SELECT_t;
 684:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 685:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 686:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 687:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Defines the group indices. Use @ref XMC_VADC_GROUP_INDEX_t for this enumeration.
 688:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 689:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_INDEX
 690:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 691:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_0   = 0,
 692:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_1,
 693:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 694:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_2,
 695:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_3
 696:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
 697:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_INDEX_t;
 698:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 699:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 700:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** * Defines channel alias.
 701:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** * All enum items are available for channels 0 and 1. Other Channels can accept only XMC_VADC_CHANNE
 702:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** */
 703:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_ALIAS
 704:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 705:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_DISABLED = -1,
 706:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH0 = 0,
 707:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH1 = 1,
 708:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH2 = 2,
 709:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH3 = 3,
 710:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH4 = 4,
 711:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH5 = 5,
 712:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH6 = 6,
 713:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH7 = 7
 714:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_ALIAS_t;
 715:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 716:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 717:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 718:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 719:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Selection of the reference voltage that is required for conversions (VREF).
 720:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 721:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_AREF
 722:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 723:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_EXTERNAL_VDD_UPPER_RANGE = 0 << SHS_SHSCFG_AREF_Pos, /**< External refer
 724:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_UPPER_RANGE = 2 << SHS_SHSCFG_AREF_Pos, /**< Internal refer
 725:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_LOWER_RANGE = 3 << SHS_SHSCFG_AREF_Pos, /**< Internal refer
 726:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_SHS_AREF_t;
 727:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 728:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 729:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 730:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Defines the gain calibration selection.
 731:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 732:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_GAIN_LEVEL
 733:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 734:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_0 = SHS_CALOC0_CALOFFVAL0_Pos, /**< Select the calibration value for gain
 735:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_1 = SHS_CALOC0_CALOFFVAL1_Pos, /**< Select the calibration value for gain
 736:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_2 = SHS_CALOC0_CALOFFVAL2_Pos, /**< Select the calibration value for gain
 737:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_3 = SHS_CALOC0_CALOFFVAL3_Pos  /**< Select the calibration value for gain
 738:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_GAIN_LEVEL_t;
 739:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
 740:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 741:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 742:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Defines the Delta sigma loop.
 743:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 744:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_LOOP_CH
 745:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 746:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_0 = SHS_LOOP_LPCH0_Pos, /**< Select Delta-sigma loop 0*/
 747:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_1 = SHS_LOOP_LPCH1_Pos /**< Select Delta-sigma loop 1*/
 748:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_LOOP_CH_t;
 749:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 750:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 751:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Provides the order in which the SHS should do the calibration
 752:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 753:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER
 754:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 755:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_POST_CONV = 0, /**< Calibration occur after conversion take
 756:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_PRE_CONV   /**< Calibration occur before conversion takes p
 757:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t;
 758:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
 759:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 760:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 761:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 762:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Provides possible routing values for the boundary flag.
 763:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 764:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_NODE
 765:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 766:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_0 = 0U, /**<Route the Group boundary flag to Common b
 767:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_1,      /**<Route the Group boundary flag to Common b
 768:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_2,      /**<Route the Group boundary flag to Common b
 769:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_3,      /**<Route the Group boundary flag to Common b
 770:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_0,  /**<Route the Group boundary flag to Common Service Req
 771:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_1,  /**<Route the Group boundary flag to Common Service Req
 772:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_2,  /**<Route the Group boundary flag to Common Service Req
 773:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_3   /**<Route the Group boundary flag to Common Service Req
 774:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_NODE_t;
 775:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
 776:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 777:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 778:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 779:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Defines the ready signal selection
 780:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 781:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SYNCTR_EVAL
 782:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 783:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_1 = VADC_G_SYNCTR_EVALR1_Msk, /**<Mask to set the EVAL1 bits of SYNCTR */
 784:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 785:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_2 = VADC_G_SYNCTR_EVALR2_Msk, /**<Mask to set the EVAL2 bits of SYNCTR */
 786:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_3 = VADC_G_SYNCTR_EVALR3_Msk  /**<Mask to set the EVAL3 bits of SYNCTR */
 787:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
 788:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SYNCTR_EVAL_t;
 789:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
 790:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 791:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * DATA STRUCTURES
 792:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 793:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard start*/
 794:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
 795:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   #pragma push
 796:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   #pragma anon_unions
 797:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
 798:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   #pragma warning 586
 799:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
 800:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 801:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 802:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC scan request source. Use type @ref XMC_VADC_SCAN_CONFIG_t for t
 803:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 804:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_SCAN_CONFIG
 805:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 806:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 807:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how scan request source would
 808:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 809:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter. If the Conversion
 810:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                          selected as Cancel inject repeat/Never mode then this fiel
 811:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                          priority of scan request source. Uses @ref XMC_VADC_GROUP_
 812:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     union
 813:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     {
 814:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        struct
 815:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        {
 816:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 817:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Use any one Group related result register as 
 818:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 819:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 820:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #else
 821:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 822:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
 823:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 824:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 825:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_INPUT_SELECT_t enumeration*/
 826:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 827:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal. Uses @ref
 828:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_EDGE_t */
 829:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 830:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 831:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GATE_INPUT_SELECT_t */
 832:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
 833:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Decides whether timer mode for equi-distant s
 834:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       activated or not.*/
 835:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
 836:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        };
 837:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        uint32_t asctrl;
 838:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     };
 839:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     union
 840:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     {
 841:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        struct
 842:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        {
 843:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 2;
 844:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversions be initiated by external hardware trig
 845:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t req_src_interrupt  : 1;  /**< Request source event can be generated after a conv
 846:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t enable_auto_scan   : 1;  /**< Enables the continuous conversion mode. Conversion
 847:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                  of the last channel in a scan sequence will cause 
 848:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t load_mode          : 1;  /**< Selects load event mode. Uses @ref XMC_VADC_SCAN_L
 849:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 26;
 850:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        };
 851:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        uint32_t asmr;
 852:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     };
 853:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_CONFIG_t;
 854:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 855:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 856:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef XMC_VADC_SCAN_CONFIG_t XMC_VADC_BACKGROUND_CONFIG_t; /**< Type defined the scan configurati
 857:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                                  structure for background Request S
 858:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 859:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 860:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC channel. Use type XMC_VADC_CHANNEL_CONFIG_t for this enumeratio
 861:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 862:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_CHANNEL_CONFIG
 863:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 864:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     union
 865:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     {
 866:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        struct
 867:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        {
 868:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t input_class                : 2;  /**< Input conversion class selection.
 869:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_CONV_t */
 870:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 2;
 871:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t lower_boundary_select      : 2;  /**< Which boundary register serves as lower bo
 872:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 873:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t upper_boundary_select      : 2;  /**< Which boundary register serves as upper bo
 874:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 875:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_criteria         : 2;  /**< When should an event be generated?
 876:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_EVGEN_t */
 877:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t sync_conversion            : 1;  /**< Enables synchronous conversion for the con
 878:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t alternate_reference        : 1;  /**< Input reference voltage selection either V
 879:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_REF_t*/
 880:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 4;
 881:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t result_reg_number          : 4;  /**< Group result register number */
 882:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t use_global_result          : 1;  /**< Use global result register for background 
 883:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t result_alignment           : 1;  /**< Alignment of the results read in the resul
 884:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_RESULT_ALIGN_t */
 885:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 6;
 886:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect_channel : 2;  /**< Source to be used to charge the capacitor 
 887:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BWDCH_t. */
 888:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect         : 1;  /**< Configures extra phase before the capacito
 889:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        };
 890:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        uint32_t chctr;
 891:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     };
 892:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     union
 893:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     {
 894:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        struct
 895:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        {
 896:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 8;
 897:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 898:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch0 : 1; /**< Condition for which the boundary flag should
 899:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                        Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITIO
 900:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch1 : 1; /**< Condition for which the boundary flag should
 901:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 902:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch2 : 1; /**< Condition for which the boundary flag should
 903:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 904:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch3 : 1; /**< Condition for which the boundary flag should
 905:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 906:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #else
 907:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 908:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
 909:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 910:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 911:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch0  : 1; /**< Inverts boundary flag output.*/
 912:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch1  : 1; /**< Inverts boundary flag output.*/
 913:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch2  : 1; /**< Inverts boundary flag output.*/
 914:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch3  : 1; /**< Inverts boundary flag output.*/
 915:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 916:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #else
 917:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch0  : 1; /**< Enable the boundary flag output on the speci
 918:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch1  : 1; /**< Enable the boundary flag output on the speci
 919:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch2  : 1; /**< Enable the boundary flag output on the speci
 920:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch3  : 1; /**< Enable the boundary flag output on the speci
 921:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
 922:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 12;
 923:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        };
 924:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        uint32_t bfl;
 925:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     };
 926:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 927:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     union
 928:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     {
 929:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        struct
 930:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        {
 931:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch0    : 4; /**< Specify the basic operation of boundary flag 
 932:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 933:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch1    : 4; /**< Specify the basic operation of boundary flag 
 934:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 935:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch2    : 4; /**< Specify the basic operation of boundary flag 
 936:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 937:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch3    : 4; /**< Specify the basic operation of boundary flag 
 938:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 939:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****          uint32_t                           : 16;
 940:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        };
 941:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        uint32_t bflc;
 942:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     };
 943:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
 944:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     bool    channel_priority;  /**< Only non priority channels can be converted by Background Reque
 945:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     int8_t  alias_channel;     /**< Specifies the channel which has to be aliased with CH0/CH1 (whi
 946:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                     Force the value to \b(int8_t)-1 to bypass alias feature.
 947:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                     Uses @ref XMC_VADC_CHANNEL_ALIAS_t  for configuration.*/
 948:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONFIG_t;
 949:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 950:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 951:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize a queue entry. Use type @ref XMC_VADC_QUEUE_ENTRY_t.
 952:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 953:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_ENTRY
 954:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 955:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     union
 956:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     {
 957:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        struct
 958:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        {
 959:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t channel_num        : 5;  /**< Channel number associated with this queue entry.<B
 960:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t refill_needed      : 1;  /**< Conversion completed channel gets inserted back in
 961:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t generate_interrupt : 1;  /**< Generates a queue request source event */
 962:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversion requests are raised on an external trig
 963:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 24;
 964:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 965:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        };
 966:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        uint32_t qinr0;
 967:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     };
 968:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_ENTRY_t;
 969:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
 970:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
 971:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing a VADC queue request source. Use type @ref XMC_VADC_QUEUE_CONFIG_t.
 972:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
 973:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_CONFIG
 974:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
 975:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 976:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how queue request source woul
 977:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 978:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter.Uses @ref XMC_VADC
 979:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     union
 980:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     {
 981:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        struct
 982:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        {
 983:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 984:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Uses any one Group related result register as
 985:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 986:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 987:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #else
 988:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 989:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
 990:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 991:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 992:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_INPUT_SELECT_t */
 993:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 994:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal.
 995:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_EDGE_t */
 996:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 997:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 998:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GATE_INPUT_SELECT_t */
 999:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
1000:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Timer mode for equi-distant sampling shall be
1001:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
1002:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        };
1003:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        uint32_t qctrl0;
1004:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     };
1005:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     union
1006:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     {
1007:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        struct
1008:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        {
1009:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 2;
1010:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger  : 1;  /**< Are external triggers supported? */
1011:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 29;
1012:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        };
1013:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        uint32_t qmr0;
1014:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     };
1015:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_CONFIG_t;
1016:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1017:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1018:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1019:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the global input class configuration. Configured parameters are sample 
1020:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1021:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1022:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLASS
1023:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
1024:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     union
1025:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     {
1026:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        struct
1027:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        {
1028:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1029:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1030:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1031:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1032:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1033:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1034:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
1035:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1036:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1037:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1038:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1039:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1040:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1041:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #else
1042:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 16;
1043:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
1044:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        };
1045:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        uint32_t globiclass;
1046:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     };
1047:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLASS_t;
1048:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1049:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1050:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1051:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize converter and arbiter clock configuration
1052:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1053:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLOCK
1054:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
1055:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     union
1056:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     {
1057:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        struct
1058:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        {
1059:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1060:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t analog_clock_divider     : 5;  /**< Clock for the converter. <BR>Range: [0x0 to 
1061:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 2;
1062:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t msb_conversion_clock     : 1;  /**< Additional clock cycle for analog converter 
1063:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_clock_divider    : 2;  /**< Request source arbiter clock divider. <BR>Ra
1064:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 5;
1065:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 17;
1066:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        };
1067:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        uint32_t globcfg;
1068:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     };
1069:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLOCK_t;
1070:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
1071:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1072:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1073:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1074:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize the VADC Global functions
1075:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1076:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CONFIG
1077:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
1078:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     union
1079:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     {
1080:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        struct
1081:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        {
1082:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1083:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1084:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1085:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1086:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        };
1087:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        uint32_t globbound;
1088:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     };
1089:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1090:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLOCK_t clock_config; /**< ADC clock configurations*/
1091:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
1092:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class0;      /**< ADC input conversion configurations for GLOBICLASS[0
1093:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class1;      /**< ADC input conversion configurations for GLOBICLASS[1
1094:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     union
1095:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     {
1096:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        struct
1097:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        {
1098:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1099:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Data reduction stages */
1100:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1101:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Results of the next conversion will not be ov
1102:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       result register until the previous value is r
1103:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 6;
1104:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1105:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        };
1106:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        uint32_t globrcr;
1107:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     };
1108:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     union
1109:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     {
1110:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        struct
1111:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        {
1112:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t module_disable              : 1;  /**< Disables the module clock.*/
1113:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 2;
1114:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t disable_sleep_mode_control  : 1;  /**< Set it to true in order to disable the Sl
1115:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 28;
1116:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        };
1117:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        uint32_t clc;
1118:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     };
1119:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CONFIG_t;
1120:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1121:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1122:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1123:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the group input class configuration. Configured parameters are sample t
1124:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1125:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1126:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CLASS
1127:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
1128:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     union
1129:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     {
1130:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        struct
1131:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        {
1132:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1133:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1134:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1135:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1136:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1137:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1138:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1139:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1140:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1141:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1142:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1143:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1144:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        };
1145:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        uint32_t g_iclass0;
1146:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     };
1147:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CLASS_t;
1148:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1149:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1150:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1151:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  EMUX related configuration structure.
1152:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1153:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_EMUXCFG
1154:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
1155:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     union
1156:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     {
1157:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        struct
1158:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        {
1159:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t starting_external_channel : 3;  /**< External channel number to which the VADC w
1160:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                         generate a control signal (needed to select
1161:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                         the analog multiplexer)*/
1162:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 13;
1163:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1164:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 10; /**< The Channel to which the EMUX is connected.
1165:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #else
1166:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 5;  /**< The Channel to which the EMUX is connected.
1167:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 5;
1168:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
1169:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_mode                 : 2;  /**< Selects the external multiplexer modes: Ste
1170:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                         Uses @ref XMC_VADC_GROUP_EMUXMODE_t*/
1171:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_coding               : 1;  /**< Select Binary or Gray coding. Uses @ref XMC
1172:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t stce_usage                : 1;  /**< Use STCE for each conversion of an external
1173:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1174:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_channel_select_style : 1;  /**< Selects the style of configuring the \b con
1175:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                         (Each bit represents the channel or entire 
1176:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 1;
1177:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #else
1178:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 2;
1179:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
1180:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        };
1181:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        uint32_t g_emuxctr;
1182:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     };
1183:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCFG_t;
1184:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1185:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1186:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1187:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *   Group Configuration Data Structures
1188:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1189:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1190:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CONFIG
1191:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
1192:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_EMUXCFG_t emux_config;    /**< External multiplexer related configurations */
1193:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class0;           /**< ADC input conversion configurations for GxICLASS[
1194:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class1;           /**< ADC input conversion configurations for GxICLASS[
1195:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     union
1196:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     {
1197:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        struct
1198:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        {
1199:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1200:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1201:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1202:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1203:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        };
1204:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        uint32_t g_bound;
1205:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     };
1206:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     union
1207:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     {
1208:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        struct
1209:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        {
1210:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 4;
1211:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t arbitration_round_length : 2;  /**< Number of arbiter slots to be considered */
1212:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 1;
1213:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_mode             : 1;  /**< Arbiter mode - Select either Continuous mode
1214:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_ARBMODE_t */
1215:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 24;
1216:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        };
1217:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        uint32_t g_arbcfg;
1218:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     };
1219:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONFIG_t;
1220:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1221:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1222:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize VADC Group result register.
1223:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1224:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1225:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_RESULT_CONFIG
1226:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
1227:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     union
1228:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     {
1229:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        struct
1230:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        {
1231:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1232:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Configures the data reduction stages */
1233:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t post_processing_mode    : 2;  /**< Result data processing mode. Uses @ref  XMC_V
1234:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       For normal operation select
1235:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_DMM_t::XMC_VADC_DMM_REDUCTION_MODE
1236:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       and data_reduction_control as 0*/
1237:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 2;
1238:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Allow the conversion only after previous resu
1239:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t part_of_fifo            : 2;  /**< Make the result register a part of Result FIF
1240:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1241:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1242:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        };
1243:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****        uint32_t g_rcr;
1244:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     };
1245:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_CONFIG_t;
1246:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1247:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1248:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1249:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1250:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Structure to initialize the Stepper configurations
1251:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1252:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_STEP_CONFIG
1253:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
1254:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   union
1255:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   {
1256:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     struct
1257:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     {
1258:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step0            :3;  /**< Select a Sample and hold unit for the stepper's s
1259:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1260:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step0             :1;  /**< Should the step be added to the sequence */
1261:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step1            :3;  /**< Select a Sample and hold unit for the stepper's s
1262:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1263:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step1             :1;  /**< Should the step be added to the sequence */
1264:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step2            :3;  /**< Select a Sample and hold unit for the stepper's s
1265:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1266:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step2             :1;  /**< Should the step be added to the sequence */
1267:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step3            :3;  /**< Select a Sample and hold unit for the stepper's s
1268:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1269:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step3             :1;  /**< Should the step be added to the sequence */
1270:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step4            :3;  /**< Select a Sample and hold unit for the stepper's s
1271:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1272:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step4             :1;  /**< Should the step be added to the sequence */
1273:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step5            :3;  /**< Select a Sample and hold unit for the stepper's s
1274:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1275:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step5             :1;  /**< Should the step be added to the sequence */
1276:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step6            :3;  /**< Select a Sample and hold unit for the stepper's s
1277:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1278:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step6             :1;  /**< Should the step be added to the sequence */
1279:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step7            :3;  /**< Select a Sample and hold unit for the stepper's s
1280:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1281:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step7             :1;  /**< Should the step be added to the sequence */
1282:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1283:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     };
1284:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     uint32_t stepcfg;
1285:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   };
1286:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t;
1287:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
1288:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1289:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Sample and hold Initialization structure
1290:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1291:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_CONFIG
1292:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
1293:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   union
1294:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   {
1295:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     struct
1296:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     {
1297:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1298:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t shs_clock_divider        :4; /**< The divider value for the SHS clock. Range: [0x0 t
1299:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :6;
1300:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #else
1301:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :10;
1302:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif      
1303:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t analog_reference_select  :2; /**< It is possible to different reference voltage for 
1304:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :20;
1305:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     };
1306:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     uint32_t shscfg;
1307:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   };
1308:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1309:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t calibration_order; /**< order in which the calibration sh
1310:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
1311:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CONFIG_t;
1312:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1313:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
1314:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1315:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1316:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Detailed global result structure
1317:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1318:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_DETAILED_RESULT
1319:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
1320:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   union
1321:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   {
1322:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     struct
1323:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     {
1324:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   :16;  /**< Result of the Analog to digital conversion*/
1325:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t group_number             :4;   /**< Indicates the group to which the channel_number 
1326:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           :5;   /**< Converted channel number*/
1327:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      :3;   /**< Converted external multiplexer channel number.
1328:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1329:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source :2;   /**< Converted request source*/
1330:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      :1;   /**< Fast compare result if conversion mode is fast c
1331:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             :1;   /**< Valid flag is set when a new result is available
1332:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     };
1333:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1334:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   };
1335:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_DETAILED_RESULT_t;
1336:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1337:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1338:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Detailed channel result structure
1339:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1340:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_DETAILED_RESULT
1341:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
1342:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   union
1343:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   {
1344:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     struct
1345:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     {
1346:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   :16;  /**< Result of the Analog to digital conversion*/
1347:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t data_reduction_counter   :4;   /**< Results reduction counter value*/
1348:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           :5;   /**< Converted channel number*/
1349:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      :3;   /**< Converted external multiplexer channel number.
1350:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1351:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source :2;   /**< Converted request source*/
1352:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      :1;   /**< Fast compare result if conversion mode is fast c
1353:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             :1;   /**< Valid flag is set when a new result is available
1354:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     };
1355:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1356:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   };
1357:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DETAILED_RESULT_t;
1358:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  
1359:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1360:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard end*/
1361:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
1362:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   #pragma pop
1363:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
1364:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   #pragma warning restore
1365:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
1366:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1367:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * static inline functions
1368:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1369:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1370:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U) 
1371:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_CHECK_GROUP_PTR(XMC_VADC_GROUP_t *const group_ptr)
1372:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
1373:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
1374:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1) || (group_ptr == VADC_G2) || (group_ptr =
1375:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #else
1376:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1));
1377:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
1378:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
1379:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
1380:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1381:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * API Prototypes
1382:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1383:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1384:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #ifdef __cplusplus
1385:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** extern "C" {
1386:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
1387:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1388:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1389:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param None
1390:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1391:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
1392:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1393:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1394:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module.<BR>\n
1395:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API would ungate the clock to the VADC module (if applicable). Also this API would bring
1396:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the VADC module out of reset state(if applicable), by asserting the appropriate registers.
1397:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_UngatePeripheralClock() and XMC_SCU_RESET_DeassertPeripheral
1398:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * if needed. Directly accessed register is  COMPARATOR.ORCCTRL (Refer to the errata for XMC1100).
1399:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1400:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1401:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableModule().
1402:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1403:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_EnableModule(void);
1404:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1405:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1406:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param None
1407:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1408:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
1409:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1410:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1411:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module.<BR>\n
1412:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API would gate the clock to the VADC module (if applicable). Also this API would put
1413:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the VADC module into the reset state(if applicable) by asserting the appropriate registers.
1414:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_GatePeripheralClock() and XMC_SCU_RESET_AssertPeripheralRese
1415:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1416:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1417:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModule().
1418:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1419:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_DisableModule(void);
1420:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1421:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1422:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1423:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module.
1424:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to initialization data structure
1425:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1426:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
1427:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1428:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1429:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC global module with the associated configuration structure pointed by \a con
1430:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * enables the global access to registers by configuring reset and clock un-gating for selected dev
1431:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * initializes global class, boundary , result resources by setting GLOBICLASS,GLOBBOUND,GLOBRCR re
1432:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * configures the global analog and digital clock dividers by setting GLOBCFG register. Refer relat
1433:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the configurations later in the program.
1434:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1435:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1436:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_ClockInit()<BR>
1437:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1438:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
1439:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1440:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1441:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1442:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1443:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1444:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
1445:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1446:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1447:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module clock.\n\n Call this API before any further configuration of VADC. It se
1448:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * register to enable.
1449:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1450:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1451:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1452:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1453:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1454:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1455:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
1456:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Enable:Wrong Module Pointer", (global_ptr == VADC))
1457:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_DISR_Msk);
1458:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
1459:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1460:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1461:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1462:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1463:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1464:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
1465:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1466:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1467:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module clock.\n\n After this API call, no conversion will occur. Call
1468:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModuleClock() to enable the VADC module later in the program.
1469:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1470:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1471:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1472:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1473:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1474:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1475:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
1476:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Disable:Wrong Module Pointer", (global_ptr == VADC))
1477:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_DISR_Pos);
1478:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
1479:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1480:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1481:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1482:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1483:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1484:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
1485:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1486:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1487:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Enables VADC module to sleep if a sleep request comes.\n\n
1488:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * It resets the EDIS bit of CLC register for enabling the sleep mode.
1489:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1490:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1491:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableSleepMode().
1492:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1493:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1494:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
1495:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1496:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_EDIS_Msk);
1497:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
1498:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1499:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1500:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1501:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1502:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1503:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
1504:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1505:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1506:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Ignores the sleep mode request for the VADC.\n\n
1507:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * With the sleep feature enabled, the module will respond to sleep
1508:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * requests by going into a low power mode. It resets the EDIS bit of CLC register for enabling the
1509:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1510:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1511:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableSleepMode().
1512:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1513:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1514:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
1515:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1516:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_EDIS_Pos);
1517:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
1518:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1519:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1520:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1521:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1522:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1523:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to the data structure containing clock configuration data
1524:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1525:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
1526:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1527:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1528:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Configures the VADC clock.<BR>\n
1529:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Sets up the clock configuration of the VADC module using the config structure pointed by \a conf
1530:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * The clock to the analog converter and to the request source arbiter is configured by setting the
1531:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1532:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1533:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None
1534:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1535:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1536:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClockInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_
1537:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
1538:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClockInit:Wrong Module Pointer", (global_ptr == VADC))
1539:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1540:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   /* Write the Clock configuration into the GLOBCFG register */
1541:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG = (uint32_t)(config->globcfg | (VADC_GLOBCFG_DIVWC_Msk));
1542:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
1543:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
1544:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1545:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1546:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1547:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1548:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param config  Conversion class parameter structure
1549:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param conv_type configure the input call for either standard conversion or EMUX related convers
1550:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
1551:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                Range: [0x0, 0x1]
1552:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1553:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1554:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Configures the ADC conversion settings like sample time and resolution.<BR>\n
1555:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc global resource associated with \a config structure. It
1556:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
1557:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the GLOBALICLASS register specified by \a set_num with the required settings.
1558:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1559:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1560:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1561:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None
1562:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1563:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1564:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1565:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
1566:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
1567:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1568:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1569:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1570:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC global module
1571:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to result configuration data structure
1572:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1573:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
1574:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1575:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1576:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Initializes global result register.<BR>\n
1577:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Initializes Global Result Register with specified settings configured in the \a config structure
1578:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * results in configuration of GLOBRCR register. This helps in configuring the Data reduction mode,
1579:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * , wait for read mode on the GLOBRES register.
1580:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1581:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1582:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1583:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None
1584:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1585:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1586:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1587:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_ResultInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
1588:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  {
1589:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ResultInit:Wrong Module Pointer", (global_ptr == VADC))
1590:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1591:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   /* Configure GLOBRCR*/
1592:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBRCR = config->g_rcr;
1593:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  }
1594:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  
1595:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1596:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1597:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1598:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1599:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
1600:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1601:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1602:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Enables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of G
1603:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * enable the startup calibration feature. After turning it on, it loops until all active groups fi
1604:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Call XMC_VADC_GLOBAL_Enable() and XMC_VADC_GLOBAL_ClockInit() before calling this API in sequenc
1605:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableStartupCalibration() can disable the calibration feature at runtime.
1606:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1607:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1608:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1609:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1610:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None
1611:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1612:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr);
1613:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1614:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1615:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1616:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1617:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr  Constant pointer to the VADC module.
1618:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1619:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
1620:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1621:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1622:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Disables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of 
1623:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * disable the startup calibration feature. Calling the API XMC_VADC_GLOBAL_EnsableStartupCalibrati
1624:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * calibration feature at runtime.
1625:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1626:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1627:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None
1628:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1629:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1630:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableStartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
1631:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
1632:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableStartupCalibration:Wrong Module Pointer", (global_ptr == VADC)
1633:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= ~((uint32_t)VADC_GLOBCFG_SUCAL_Msk);
1634:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
1635:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1636:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1637:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1638:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1639:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1640:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be disabled. <BR>
1641:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1642:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1643:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
1644:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1645:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1646:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Disables the post calibration for a particular group specified as \a group_number.\n\n It config
1647:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to disable the post calibration feature. Call XMC_VADC_GLOBAL_Enable() and
1648:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit() before calling this API in sequence. Calling the API
1649:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnablePostCalibration() can enable back the calibration feature at runtime.
1650:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1651:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1652:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1653:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1654:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1655:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None
1656:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1657:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1658:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, ui
1659:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
1660:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1661:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1662:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_numbe
1663:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
1664:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1665:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1666:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1667:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1668:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be enabled. <BR>
1669:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1670:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1671:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
1672:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1673:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1674:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Enables the post calibration for a particular group specified as \a group_number.\n\n It configu
1675:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to enable the post calibration feature. Calling the API XMC_VADC_GLOBAL_Disa
1676:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * can disable the calibration feature at runtime.
1677:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1678:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1679:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1680:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None
1681:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1682:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uin
1683:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
1684:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1685:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1686:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= (~ (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_nu
1687:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
1688:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
1689:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1690:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
1691:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1692:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1693:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1694:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>Range[0 - 4095]
1695:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>Range[0 - 4095]
1696:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1697:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
1698:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1699:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1700:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
1701:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They define a range against which the result of a conversion can be compare
1702:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
1703:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
1704:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * GLOBBOUND1 who will derive their values from this palette.
1705:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1706:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1707:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None
1708:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1709:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1710:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t boundary0, c
1711:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1712:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1713:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1714:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1715:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
1716:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value  Boundary Value<BR>Range[0 - 4095]
1717:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1718:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
1719:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1720:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1721:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Programs either the boundary 0 or boundary 1 for result comparison.\n\n This defines a range aga
1722:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
1723:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
1724:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1725:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1726:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None
1727:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1728:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1729:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
1730:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
1731:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                            const uint16_t boundary_value); 
1732:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
1733:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1734:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_AVAILABLE== 1U)
1735:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1736:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1737:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module
1738:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param emuxif       The EMUX interface<BR>Range[0x0 - 0x1]
1739:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group        The VADC group which must be bound to the desired emux
1740:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1741:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
1742:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1743:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1744:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Binds a VADC \a group to an EMUX interface specified in \a emuxif.<BR>\n
1745:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Selects which group's scan request source will control the EMUX interface (set of control select
1746:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * By passing \b group it would configure that group's scan request source to control the EMUX sele
1747:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \b emuxif.
1748:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1749:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1750:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None
1751:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1752:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
1753:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
1754:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1755:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1756:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1757:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1758:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1759:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return uint32_t Complete global result register value GLOBRES
1760:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1761:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1762:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Retrieves the complete result from the global result register associated with the \a global_ptr.
1763:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the result register GLOBRES for the validity of the data. If the validity is assured, data is fi
1764:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the global result register, cached locally next and subsequently returned to the caller.
1765:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1766:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @note You can cast the return to a varible of type XMC_VADC_GLOBAL_DETAILED_RESULT_t to easily a
1767:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1768:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1769:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetResult()
1770:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1771:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GLOBAL_GetDetailedResult(XMC_VADC_GLOBAL_t *const global_ptr)
1772:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
1773:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetDetailedResult:Wrong Module Pointer", (global_ptr == VADC))
1774:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1775:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  return(global_ptr->GLOBRES);
1776:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
1777:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1778:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1779:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1780:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1781:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1782:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return XMC_VADC_RESULT_SIZE_t 16 bit result register value.<BR>
1783:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *         Range[0x0 - 0X0FFF]
1784:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1785:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1786:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Retrieves the conversion result from the global result register associated with the \a global_pt
1787:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * lightweight version of XMC_VADC_GLOBAL_GetDetailedResult(). The behavior is exactly the same, ju
1788:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * only the 16 bit numeric result returned back to the application instead of the complete GLOBRES 
1789:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1790:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1791:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetDetailedResult()
1792:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1793:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GLOBAL_GetResult(XMC_VADC_GLOBAL_t *const global_pt
1794:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
1795:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetResult:Wrong Module Pointer", (global_ptr == VADC))
1796:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1797:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_RESULT_SIZE_t)global_ptr->GLOBRES);
1798:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
1799:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1800:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1801:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1802:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1803:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param compare_val Compare value which the result of a conversion will be compared against.
1804:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *         <BR>Range[0x0 - 0X0FFF]
1805:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1806:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
1807:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1808:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1809:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Set compare value in the global result register for fast compare mode.\n\n The result of a conve
1810:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * be compared to the compare value entered as part of \a compare_val. The prerequisite is that the
1811:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * with this global register must select an ICLASS which has the conversion mode configured as fast
1812:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_GLOBAL_GetCompareResult() after this API to
1813:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1814:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1815:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None
1816:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1817:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
1818:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1819:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1820:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1821:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1822:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return compare high or low. Refer @ref XMC_VADC_FAST_COMPARE_t enum
1823:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1824:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
1825:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1826:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1827:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Determines the result of fast compare operation.\n\n This API returns the result of fast compare
1828:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the valid flag in the global result register GLOBRES is set.
1829:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1830:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1831:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None
1832:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1833:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr);
1834:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1835:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1836:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1837:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr         Constant pointer to the VADC module
1838:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param event_type   Desired event that must be manually asserted
1839:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1840:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
1841:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1842:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1843:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Manually asserts an event that can lead to an interrupt.\n\n This API manually asserts the reque
1844:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * (Background request source event or a global result event) by setting the GLOBEVFLAG register wi
1845:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \a event_type.
1846:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1847:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1848:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None
1849:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1850:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1851:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_TriggerEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32
1852:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
1853:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Module Pointer", (global_ptr == VADC))
1854:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Global Event", 
1855:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1856:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1857:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = event_type;
1858:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
1859:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1860:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1861:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1862:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1863:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param event_type Event that must be acknowledged
1864:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1865:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1866:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
1867:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1868:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1869:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Acknowledges an event that has been asserted manually or automatically.\n\n This API acknowledge
1870:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * by clearing GLOBEFLAG sticky flag.
1871:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1872:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1873:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None
1874:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1875:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClearEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t
1876:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
1877:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Module Pointer", (global_ptr == VADC))
1878:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Global Event", 
1879:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1880:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1881:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = ((uint32_t)(event_type << (uint32_t)16));
1882:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
1883:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1884:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1885:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1886:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1887:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global result event is connected. Refer @ref XMC_VADC
1888:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1889:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
1890:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1891:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1892:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  Binds the global result event to one of the 4 shared service requests.\n\n This API binds the g
1893:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  to one of the 4 module wide shared service requests .Sets GLOBEVNP register with the correspond
1894:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1895:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1896:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode()
1897:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1898:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
1899:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1900:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1901:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1902:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1903:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global request source event is connected. Refer @ref 
1904:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1905:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
1906:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1907:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1908:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Binds the background request source event to one of the 4 shared service requests.\n\n This API 
1909:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * request source event to one of the 4 module wide shared service requests. Sets GLOBEVNP register
1910:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * corresponding \a sr line.
1911:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1912:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1913:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SetResultEventInterruptNode()
1914:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1915:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
1916:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1917:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1918:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1919:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1920:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param  config Struct consisting of various SHS related configurations.
1921:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1922:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
1923:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1924:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1925:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Configure the basic SHS parameters.<BR>\n
1926:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration, the analog reference selection and
1927:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the calibration order for the Sample and Hold unit.
1928:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1929:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1930:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None.
1931:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1932:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONF
1933:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1934:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
1935:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1936:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param aref    Analog reference used for conversions. Refer @ref XMC_VADC_GLOBAL_SHS_AREF_t enum
1937:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1938:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
1939:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1940:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1941:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Selection of the reference voltage that is required for conversions (VREF).
1942:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
1943:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1944:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None.
1945:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
1946:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetAnalogReference(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1947:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                             const XMC_VADC_GLOBAL_SHS_AREF_t aref)
1948:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  {
1949:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1950:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1951:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1952:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG |=  (shs_ptr->SHSCFG & (uint32_t)~SHS_SHSCFG_AREF_Msk) | (uint32_t)aref | SHS_SHS
1953:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  }
1954:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1955:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1956:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  /**
1957:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1958:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   * @param  config Struct consisting of various step configurations.
1959:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   *
1960:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   * @return None
1961:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   *
1962:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1963:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   * Configures the stepper sequence for the converter.<BR>\n
1964:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   * Stepper of the SHS can be configured to take up a specific sequence of groups for conversion.
1965:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   * The stepper sequence is configured using this API.
1966:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   *
1967:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1968:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   * None.
1969:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   */
1970:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetStepperSequence(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1971:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                              const XMC_VADC_GLOBAL_SHS_STEP_CONFIG_
1972:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  {
1973:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1974:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1975:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong config pointer",
1976:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****              (config == (XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t*)NULL))
1977:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1978:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   shs_ptr->STEPCFG = (uint32_t) config->stepcfg;
1979:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  }
1980:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
1981:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1982:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  /**
1983:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1984:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   *
1985:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   * @return bool returns true if the analog converter is operable
1986:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   *              returns false if the analog converter is powered down
1987:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   *
1988:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1989:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   * Returns the converter status.<BR>\n
1990:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   * Returns the ANRDY bit field of the SHSCFG register.
1991:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   *
1992:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1993:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   * None.
1994:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   */
1995:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE bool XMC_VADC_GLOBAL_SHS_IsConverterReady(XMC_VADC_GLOBAL_SHS_t *const shs_ptr)
1996:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  {
1997:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_IsConverterReady:Wrong SHS Pointer",(shs_ptr == (XMC_VADC_GLOBAL_
1998:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
1999:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   return((bool)((shs_ptr->SHSCFG >> (uint32_t)SHS_SHSCFG_ANRDY_Pos) & (uint32_t)0x1));
2000:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  }
2001:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2002:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
2003:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2004:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2005:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
2006:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2007:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2008:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2009:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2010:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
2011:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
2012:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * this mode the ADC module will convert the input depending on the value stored in the SST bit of 
2013:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API would configure the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
2014:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2015:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2016:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None.
2017:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2018:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP_
2019:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2020:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2021:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2022:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be disabled.<BR>Range: [0x
2023:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2024:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2025:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2026:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2027:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
2028:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from accelerated mode to compatible mode of conversion is neede
2029:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API would clear the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
2030:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2031:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2032:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None.
2033:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2034:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP
2035:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2036:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2037:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2038:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
2039:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param sst_value Value of short sample time that needs to be configured.<BR>
2040:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                  Range: [0x0 to 0x3F]
2041:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2042:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2043:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2044:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2045:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Configures the Accelerated timing mode sample time.<BR>\n
2046:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
2047:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Accelerated mode the ADC module will convert the input depending on the value stored in the SST 
2048:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  SHS0_TIMCFGx. This API would configure the shot sample time either in SHS0_TIMCFG0.SST or SHS0_
2049:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2050:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2051:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None.
2052:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2053:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2054:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                             XMC_VADC_GROUP_INDEX_t group_num,
2055:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                             uint8_t sst_value);
2056:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2057:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
2058:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2059:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2060:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param  divs_value The clock divider value that is possible
2061:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                    <BR>Range:[0x0 to 0xF]
2062:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2063:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2064:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2065:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Configure Sample and hold clock divider value.<BR>\n
2066:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration. This determines the frequency of conversio
2067:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * of the Sample and hold converter.
2068:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2069:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2070:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None.
2071:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2072:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetClockDivider(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, uint
2073:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
2074:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong SHS Pointer",
2075:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2076:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong divide factor selected",
2077:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****              (divs_value < (uint32_t)0x10))
2078:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2079:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG =  (shs_ptr->SHSCFG & (~(uint32_t)SHS_SHSCFG_DIVS_Msk)) | (uint32_t)SHS_SHSCFG_SC
2080:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG |=  ((uint32_t)divs_value << SHS_SHSCFG_DIVS_Pos) | (uint32_t)SHS_SHSCFG_SCWC_Msk
2081:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
2082:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2083:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2084:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2085:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param  gain_value gain value possible
2086:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                    Range:[0x0 to 0x3]
2087:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2088:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num The channel number for which the gain has to be configured
2089:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2090:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2091:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2092:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Configure the gain value for SHS.<BR>\n
2093:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * API would set the gain factor for a selected channel.
2094:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2095:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2096:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None.
2097:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2098:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2099:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                        uint8_t gain_value,
2100:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                        XMC_VADC_GROUP_INDEX_t group_num,
2101:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                        uint8_t ch_num);
2102:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2103:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
2104:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2105:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2106:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param  max_calibration_time calibration time
2107:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                              Range:[0x0 to 0x3F]
2108:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2109:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2110:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2111:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Configure the Maximum calibration timing.<BR>\n
2112:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * API would initialize the Maximum time after which the calibration should occur. If no adc conver
2113:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * occur during this duration then the calibration would run irrespective of conversions. The max t
2114:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * converter can go without a calibration is set in this API.
2115:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2116:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2117:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None.
2118:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2119:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetMaxCalTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2120:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                        uint32_t max_calibration_time)
2121:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
2122:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetMaxCalTime:Wrong SHS Pointer",
2123:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2124:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2125:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALMAX_Msk);
2126:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR |=  ((uint32_t)max_calibration_time << SHS_CALCTR_CALMAX_Pos);
2127:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
2128:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2129:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2130:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2131:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2132:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2133:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2134:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2135:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2136:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Enable the Gain and offset calibration.<BR>\n
2137:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Enable the gain and offset calibration for all the Sample and hold units.
2138:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2139:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2140:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations()<BR>.
2141:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2142:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2143:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                          XMC_VADC_GROUP_INDEX_t group_num);
2144:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2145:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2146:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2147:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2148:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2149:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2150:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2151:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Disable the Gain and offset calibration.<BR>\n
2152:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Disable the gain and offset calibration for all the Sample and hold units.
2153:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2154:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2155:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2156:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2157:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2158:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                           XMC_VADC_GROUP_INDEX_t group_num);
2159:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2160:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2161:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2162:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2163:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2164:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2165:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2166:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2167:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Read the calibration value for the selected gain level.<BR>\n
2168:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would return the offset calibration val
2169:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * selected gain level. This is applicable for all the channels in the group that use the particula
2170:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2171:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2172:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue()<BR>.
2173:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2174:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2175:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
2176:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level);
2177:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2178:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2179:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2180:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2181:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2182:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param  offset_calibration_value The offset calibration value to be set.
2183:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2184:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2185:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2186:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Set the calibration value for the selected gain level.<BR>\n
2187:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would set the offset value of the selec
2188:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2189:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2190:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue()<BR>.
2191:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2192:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2193:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
2194:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
2195:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                    uint8_t offset_calibration_value);
2196:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
2197:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2198:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2199:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2200:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2201:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2202:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num Channel number for which the configurations applies
2203:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2204:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2205:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2206:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Configures the delta sigma loop of the SHS.<BR>\n
2207:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * There are 2 Delta-Sigma loops that can be configured. This API would configure the loop (loop_se
2208:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * with the appropriate group_num and channel_num.
2209:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP bit fields.
2210:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2211:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2212:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop()<BR>.
2213:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2214:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2215:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                            XMC_VADC_GROUP_INDEX_t group_num,
2216:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
2217:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                            uint8_t ch_num);
2218:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2219:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2220:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2221:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2222:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2223:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2224:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2225:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Enable the selected Delta-Sigma loop.<BR>\n
2226:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2227:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2228:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2229:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2230:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2231:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2232:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2233:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                               XMC_VADC_SHS_LOOP_CH_t loop_select)
2234:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
2235:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong SHS Pointer",
2236:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2237:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2238:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2239:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2240:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP |= (uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select;
2241:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
2242:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2243:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2244:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2245:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2246:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2247:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2248:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2249:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Disable the selected delta sigma loop.<BR>\n
2250:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2251:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2252:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2253:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2254:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2255:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2256:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr
2257:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                                XMC_VADC_SHS_LOOP_CH_t loop_select)
2258:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
2259:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong SHS Pointer",
2260:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2261:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2262:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2263:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2264:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP &= ~((uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select);
2265:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2266:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
2267:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2268:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
2269:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
2270:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2271:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2272:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the VADC group.
2273:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to the initialization data structure
2274:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2275:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2276:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2277:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2278:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC group module with the associated configuration structure pointed by \a conf
2279:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * initializes the group specified as part of the \a group_ptr. It initializes group conversion cla
2280:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * configuration , boundary configuration by setting GxICLASS,GxARBCFG,GxBOUND, registers. It also
2281:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * configures the EMUX control register if applicable. Refer related API's to change the configurat
2282:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  program.
2283:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2284:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2285:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_InputClassInit()<BR>
2286:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetPowerMode()<BR>
2287:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetBoundaries()<BR>
2288:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ExternalMuxControlInit()<BR>
2289:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2290:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_Init(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config);
2291:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2292:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2293:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2294:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group.
2295:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param config  group related conversion class parameter structure
2296:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param conv_type Use direct channels or EMUX channels. Refer @ref XMC_VADC_GROUP_CONV_t enum
2297:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
2298:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                Range[0x0, 0x1]
2299:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2300:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2301:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2302:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2303:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc group resource associated with \a config structure. It 
2304:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
2305:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the G_ICLASS register specified by \a set_num with the required settings.
2306:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2307:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2308:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2309:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_Init()
2310:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2311:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2312:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
2313:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num);
2314:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2315:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2316:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2317:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC Group which must be set as a slave
2318:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param master_grp The master group number<BR>
2319:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2320:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param slave_group The slave group number<BR>
2321:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2322:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2323:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2324:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2325:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2326:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a slave group.\n\n Conversion of identically numbered channels across
2327:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2328:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is the
2329:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * master group while Groups-0 and 3 are the slave groups. It uses the SYNCCTR register for the con
2330:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2331:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2332:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_SetSyncMaster()<BR>
2333:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR>
2334:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_EnableChannelSyncRequest()<BR>
2335:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2336:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2337:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
2338:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2339:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2340:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2341:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC Group.
2342:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param power_mode  Desired power mode
2343:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2344:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2345:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2346:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2347:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Configures the power mode of a VADC group.\n\n For a VADC group to actually convert an analog si
2348:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * converter must be turned on.
2349:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2350:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2351:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None
2352:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2353:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
2354:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2355:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2356:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2357:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2358:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2359:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2360:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2361:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2362:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a master group.<BR>\n
2363:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Conversion of identically numbered channels across groups can be
2364:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2365:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is therefore the mast
2366:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Groups-0 and 3 are the slave groups.
2367:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2368:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2369:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None
2370:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2371:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr);
2372:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2373:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2374:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2375:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2376:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2377:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range: [0x0 to 0x3]
2378:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2379:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2380:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2381:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Configures the ready signal for master group.<BR>\n
2382:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API would read the \b slave_group number and determine which EVAL configuration to apply fo
2383:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * slave set. Checks the readiness of slaves in synchronized conversions. Conversion of identically
2384:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * across groups can be synchronized. For example, when the trigger to convert CH-1 of Group-2 is r
2385:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * possible to simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this ex
2386:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * therefore the master group while Groups-0 and 3 are the slave groups. Before the master can requ
2387:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * for synchronized conversion, it has the option of checking the readiness of the slaves.
2388:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2389:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2390:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()
2391:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2392:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2393:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2394:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2395:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2396:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the master VADC Group
2397:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2398:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2399:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2400:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2401:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Clears the ready signal for master group.<BR>\n
2402:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Ignores the readiness of slaves in synchronized conversions.This API would read the \b slave_gro
2403:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * determine which EVAL configuration to apply for the given master slave set. Then clears the conf
2404:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API is called when the master should issue the conversion request without waiting for the s
2405:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * assert a ready signal. The ready signal is asserted by the slave group(s) when the conversion is
2406:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * in these channels.
2407:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2408:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2409:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()<BR>
2410:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2411:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2412:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2413:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2414:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2415:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group waiting for ready signal
2416:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param eval_waiting_group  The VADC Group which expects a ready signal to start it's conversion.
2417:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param eval_origin_group  The VADC Group from which the eval_waiting_group will expect a ready s
2418:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2419:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2420:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2421:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Sets the ready signal in the eval_waiting_group .<BR>\n
2422:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion all the slaves participating need to configure the ready signal.
2423:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A slave group will also need to configure the ready signals coming from the other slave groups.
2424:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the Sync.slave's EVAL Bits (GxSYNCTR.EVALy).
2425:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2426:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2427:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2428:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2429:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlaveReadySignal(XMC_VADC_GROUP_t *const group_ptr,
2430:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                             uint32_t eval_waiting_group,
2431:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                             uint32_t eval_origin_group);
2432:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2433:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2434:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2435:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group
2436:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
2437:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *         uint32_t EVAL bits for the group
2438:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2439:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2440:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Get the Eval bits of the group.<BR>\n
2441:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion the master's ready signal configuration must be copied onto the slav
2442:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would return the Sync EVAL Bits (GxSYNCTR.EVALy) which can be used to set in 
2443:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2444:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2445:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2446:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2447:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetSyncReadySignal(XMC_VADC_GROUP_t *const group_ptr)
2448:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
2449:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   uint32_t eval_mask;
2450:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetSyncReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
2451:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2452:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
2453:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk | VADC_G_SYNCTR_EVALR2_Msk | VADC_G_SYNCTR_EVALR3_Msk;
2454:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #else
2455:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk;
2456:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
2457:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   return( group_ptr->SYNCTR & eval_mask);
2458:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
2459:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2460:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2461:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group
2462:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param eval_mask  mask to configure the eval bits
2463:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   Use XMC_VADC_SYNCTR_EVAL_t to create the mask.
2464:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2465:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2466:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2467:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Set the Eval bits of the group.<BR>\n
2468:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion the master's ready signal configuration must be copied onto the slav
2469:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the Sync EVAL Bits (GxSYNCTR.EVALy).
2470:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2471:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2472:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2473:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2474:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_SetSyncReadySignal(XMC_VADC_GROUP_t *const group_ptr, uint32_t 
2475:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
2476:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   uint32_t eval_mask;
2477:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
2478:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2479:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
2480:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk | VADC_G_SYNCTR_EVALR2_Msk | VADC_G_SYNCTR_EVALR3_Msk;
2481:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #else
2482:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk;
2483:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
2484:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->SYNCTR &= ~(eval_mask);
2485:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->SYNCTR |= mask;
2486:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
2487:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2488:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2489:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2490:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the master VADC Group
2491:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  Channel whose conversion triggers conversion in slave groups
2492:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2493:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2494:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2495:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Sets up a channel for synchronized conversion.\n\n Conversion of identically numbered channels a
2496:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * can be synchronized. For example, when the trigger to
2497:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * convert CH-1 of Group-2 is received, it is possible to simultaneously request conversion of CH-1
2498:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Group-3. Group-2 in this example is therefore the master group while Groups-0 and 3 are the slav
2499:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Before the master can request its slaves for synchronized conversion, it has the option of check
2500:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * of the slaves.
2501:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2502:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2503:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None
2504:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2505:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
2506:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2507:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2508:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2509:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2510:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     Channel whose conversion triggers conversion in slave groups
2511:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2512:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2513:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2514:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Disable the synchronization request for the particular channel specified as ch_num. To enable th
2515:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * call the API @ref XMC_VADC_GROUP_EnableChannelSyncRequest().
2516:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2517:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2518:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None
2519:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2520:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
2521:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2522:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2523:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2524:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2525:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2526:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return retuns IDLE if converter is free else returns busy. Refer @ref XMC_VADC_GROUP_STATE_t en
2527:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2528:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2529:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Checks the live status of the analog to digital converter. The converter can either idle doing n
2530:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * sampling + converting.
2531:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2532:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2533:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None
2534:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2535:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr);
2536:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2537:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2538:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2539:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group whose global boundary registers are to be pr
2540:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>
2541:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2542:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>
2543:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2544:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2545:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2546:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2547:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2548:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
2549:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They defines a range against which the result of a conversion can be compar
2550:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
2551:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
2552:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * G_BOUND1 who will derive their values from this palette.
2553:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2554:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2555:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None
2556:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2557:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2558:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, 
2559:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary0, 
2560:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary1);
2561:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2562:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2563:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2564:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
2565:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value Select the boundary value.
2566:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
2567:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
2568:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2569:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2570:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Programs the boundary with \a boundary_value for result comparison.\n\n This defines a range aga
2571:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
2572:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
2573:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2574:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2575:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None.
2576:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2577:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
2578:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
2579:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                           const uint16_t boundary_value); 
2580:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2581:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2582:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2583:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param sr_num   The service request number (0 through 3)
2584:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param type     IRQ type (Kernel specific interrupt vs Module wide shared interrupt )
2585:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2586:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2587:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2588:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Activates a Service Request line(manually trigger).<BR>\n
2589:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * VADC provides few SR lines for each group and a few more which is shared across all the groups.
2590:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * These SR lines can be connected to an NVIC node which in-turn would generate an interrupt.
2591:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API would manually trigger the given SR line. Could be used for evaluation and testing purp
2592:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2593:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2594:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None
2595:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2596:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr, 
2597:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                           const uint32_t sr_num, 
2598:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_IRQ_t type);
2599:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2600:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2601:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2602:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group
2603:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param emux_cfg   EMUX configuration structure
2604:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2605:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2606:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2607:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Configures group EMUX parameters associated with the \a emux_cfg configuration structure.\n\n An
2608:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * interface allows additional channels to be connected to a VADC group. The conversion properties
2609:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * of such channels can be different from the standard channels which are directly connected to the
2610:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API configures conversion properties of channels connected via EMUX interface.
2611:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2612:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2613:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None
2614:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2615:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
2616:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                            const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
2617:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
2618:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   uint32_t   emux_config;
2619:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2620:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
2621:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2622:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_P
2623:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 615              	 .loc 2 2623 0
 616 0050 00F01F06 	 and r6,r0,#31
 617 0054 2078     	 ldrb r0,[r4]
2622:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 618              	 .loc 2 2622 0
 619 0056 00F00700 	 and r0,r0,#7
 620 005a 40EA0640 	 orr r0,r0,r6,lsl#16
 621              	.LVL68:
2624:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2625:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  = emux_config;
 622              	 .loc 2 2625 0
 623 005e C5F8F001 	 str r0,[r5,#496]
 624              	.LVL69:
2626:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
2627:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
2628:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
2629:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2630:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
2631:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_P
2632:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
2633:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 625              	 .loc 2 2633 0
 626 0062 D5F8F021 	 ldr r2,[r5,#496]
 627 0066 42F00042 	 orr r2,r2,#-2147483648
 628 006a 42EA0772 	 orr r2,r2,r7,lsl#28
 629 006e 42EA8363 	 orr r3,r2,r3,lsl#26
 630 0072 43EA4173 	 orr r3,r3,r1,lsl#29
 631 0076 C5F8F031 	 str r3,[r5,#496]
 632 007a F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 633              	.LBE29:
 634              	.LBE28:
 635              	 .cfi_endproc
 636              	.LFE268:
 638              	 .section .text.XMC_VADC_GROUP_SetPowerMode,"ax",%progbits
 639              	 .align 2
 640              	 .global XMC_VADC_GROUP_SetPowerMode
 641              	 .thumb
 642              	 .thumb_func
 644              	XMC_VADC_GROUP_SetPowerMode:
 645              	.LFB270:
 534:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 535:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 536:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API which sets the power mode of analog converter of a VADC group */
 537:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
 538:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 646              	 .loc 1 538 0
 647              	 .cfi_startproc
 648              	 
 649              	 
 650              	 
 651              	.LVL70:
 539:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t arbcfg;
 540:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 541:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
 542:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMOD
 543:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 544:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   arbcfg = group_ptr->ARBCFG;
 652              	 .loc 1 544 0
 653 0000 D0F88030 	 ldr r3,[r0,#128]
 654              	.LVL71:
 545:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 546:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 655              	 .loc 1 546 0
 656 0004 23F00303 	 bic r3,r3,#3
 657              	.LVL72:
 547:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   arbcfg |= (uint32_t)power_mode;
 658              	 .loc 1 547 0
 659 0008 1943     	 orrs r1,r1,r3
 660              	.LVL73:
 548:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 549:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->ARBCFG = arbcfg;
 661              	 .loc 1 549 0
 662 000a C0F88010 	 str r1,[r0,#128]
 663 000e 7047     	 bx lr
 664              	 .cfi_endproc
 665              	.LFE270:
 667              	 .section .text.XMC_VADC_GROUP_SetSyncSlave,"ax",%progbits
 668              	 .align 2
 669              	 .global XMC_VADC_GROUP_SetSyncSlave
 670              	 .thumb
 671              	 .thumb_func
 673              	XMC_VADC_GROUP_SetSyncSlave:
 674              	.LFB271:
 550:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 551:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 552:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API which programs a group as a slave group during sync conversions */
 553:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
 554:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 675              	 .loc 1 554 0
 676              	 .cfi_startproc
 677              	 
 678              	 
 679              	 
 680              	.LVL74:
 555:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t synctr;
 556:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )
 557:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   #endif
 558:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlave:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
 559:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
 560:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )
 561:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 562:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Determine the coding of SYNCTR */
 563:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (slave_grp > master_grp)
 681              	 .loc 1 563 0
 682 0000 8A42     	 cmp r2,r1
 564:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 565:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     master_grp = master_grp + 1U;
 683              	 .loc 1 565 0
 684 0002 88BF     	 it hi
 685 0004 0131     	 addhi r1,r1,#1
 686              	.LVL75:
 566:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 567:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   #endif
 568:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
 569:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Program SYNCTR */
 570:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   synctr = group_ptr->SYNCTR;
 687              	 .loc 1 570 0
 688 0006 D0F8C030 	 ldr r3,[r0,#192]
 689              	.LVL76:
 571:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 690              	 .loc 1 571 0
 691 000a 23F00303 	 bic r3,r3,#3
 692              	.LVL77:
 572:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   synctr   |= master_grp;
 693              	 .loc 1 572 0
 694 000e 1943     	 orrs r1,r1,r3
 695              	.LVL78:
 573:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 696              	 .loc 1 573 0
 697 0010 C0F8C010 	 str r1,[r0,#192]
 698 0014 7047     	 bx lr
 699              	 .cfi_endproc
 700              	.LFE271:
 702 0016 00BF     	 .section .text.XMC_VADC_GROUP_SetSyncMaster,"ax",%progbits
 703              	 .align 2
 704              	 .global XMC_VADC_GROUP_SetSyncMaster
 705              	 .thumb
 706              	 .thumb_func
 708              	XMC_VADC_GROUP_SetSyncMaster:
 709              	.LFB272:
 574:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 575:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 576:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API which programs a group as a master group during sync conversions */
 577:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr)
 578:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 710              	 .loc 1 578 0
 711              	 .cfi_startproc
 712              	 
 713              	 
 714              	 
 715              	.LVL79:
 579:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t synctr;
 580:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 581:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncMaster:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
 582:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 583:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   synctr = group_ptr->SYNCTR;
 716              	 .loc 1 583 0
 717 0000 D0F8C030 	 ldr r3,[r0,#192]
 718              	.LVL80:
 584:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 719              	 .loc 1 584 0
 720 0004 23F00303 	 bic r3,r3,#3
 721              	.LVL81:
 585:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 722              	 .loc 1 585 0
 723 0008 C0F8C030 	 str r3,[r0,#192]
 724 000c 7047     	 bx lr
 725              	 .cfi_endproc
 726              	.LFE272:
 728 000e 00BF     	 .section .text.XMC_VADC_GROUP_CheckSlaveReadiness,"ax",%progbits
 729              	 .align 2
 730              	 .global XMC_VADC_GROUP_CheckSlaveReadiness
 731              	 .thumb
 732              	 .thumb_func
 734              	XMC_VADC_GROUP_CheckSlaveReadiness:
 735              	.LFB273:
 586:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 587:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 588:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to enable checking of readiness of slaves before a synchronous conversion request is issued 
 589:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
 590:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 736              	 .loc 1 590 0
 737              	 .cfi_startproc
 738              	 
 739              	 
 740              	 
 741              	.LVL82:
 591:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t i,master_grp_num;
 592:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
 593:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Slave group", (slave_group <= (XMC_VADC_MAXI
 594:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 595:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   master_grp_num =0;
 596:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 597:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 598:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     if(g_xmc_vadc_group_array[i] == group_ptr)
 742              	 .loc 1 598 0
 743 0000 0D4B     	 ldr r3,.L53
 744 0002 9842     	 cmp r0,r3
 745 0004 05D0     	 beq .L51
 746              	.LVL83:
 747 0006 03F58063 	 add r3,r3,#1024
 748 000a 9842     	 cmp r0,r3
 749 000c 07D0     	 beq .L52
 750 000e 0023     	 movs r3,#0
 751 0010 00E0     	 b .L48
 752              	.LVL84:
 753              	.L51:
 596:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 754              	 .loc 1 596 0
 755 0012 0123     	 movs r3,#1
 756              	.LVL85:
 757              	.L48:
 758 0014 094A     	 ldr r2,.L53+4
 759 0016 9042     	 cmp r0,r2
 760 0018 08BF     	 it eq
 761 001a 0323     	 moveq r3,#3
 762              	.LVL86:
 763 001c 00E0     	 b .L49
 764              	.LVL87:
 765              	.L52:
 766 001e 0223     	 movs r3,#2
 767              	.LVL88:
 768              	.L49:
 599:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     {
 600:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       master_grp_num = i;
 601:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     }
 602:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 603:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 604:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 605:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if(slave_group < master_grp_num)
 769              	 .loc 1 605 0 discriminator 2
 770 0020 8B42     	 cmp r3,r1
 606:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 607:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     slave_group++;
 771              	 .loc 1 607 0 discriminator 2
 772 0022 88BF     	 it hi
 773 0024 0131     	 addhi r1,r1,#1
 774              	.LVL89:
 608:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 609:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->SYNCTR |= (1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
 775              	 .loc 1 609 0 discriminator 2
 776 0026 D0F8C020 	 ldr r2,[r0,#192]
 777 002a 0331     	 adds r1,r1,#3
 778              	.LVL90:
 779 002c 0123     	 movs r3,#1
 780              	.LVL91:
 781 002e 8B40     	 lsls r3,r3,r1
 782 0030 1343     	 orrs r3,r3,r2
 783 0032 C0F8C030 	 str r3,[r0,#192]
 784 0036 7047     	 bx lr
 785              	.L54:
 786              	 .align 2
 787              	.L53:
 788 0038 00480040 	 .word 1073760256
 789 003c 00500040 	 .word 1073762304
 790              	 .cfi_endproc
 791              	.LFE273:
 793              	 .section .text.XMC_VADC_GROUP_IgnoreSlaveReadiness,"ax",%progbits
 794              	 .align 2
 795              	 .global XMC_VADC_GROUP_IgnoreSlaveReadiness
 796              	 .thumb
 797              	 .thumb_func
 799              	XMC_VADC_GROUP_IgnoreSlaveReadiness:
 800              	.LFB274:
 610:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 611:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 612:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to disable checking of readiness of slaves during synchronous conversions */
 613:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
 614:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 801              	 .loc 1 614 0
 802              	 .cfi_startproc
 803              	 
 804              	 
 805              	 
 806              	.LVL92:
 615:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t i,master_grp_num;
 616:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IgnoreSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
 617:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IgnoreSlaveReadiness:Wrong Slave group", (slave_group <= (XMC_VADC_MAX
 618:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 619:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   master_grp_num =0;
 620:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 621:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 622:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 	  if(g_xmc_vadc_group_array[i] == group_ptr)
 807              	 .loc 1 622 0
 808 0000 0E4B     	 ldr r3,.L61
 809 0002 9842     	 cmp r0,r3
 810 0004 05D0     	 beq .L59
 811              	.LVL93:
 812 0006 03F58063 	 add r3,r3,#1024
 813 000a 9842     	 cmp r0,r3
 814 000c 07D0     	 beq .L60
 815 000e 0023     	 movs r3,#0
 816 0010 00E0     	 b .L56
 817              	.LVL94:
 818              	.L59:
 620:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 819              	 .loc 1 620 0
 820 0012 0123     	 movs r3,#1
 821              	.LVL95:
 822              	.L56:
 823 0014 0A4A     	 ldr r2,.L61+4
 824 0016 9042     	 cmp r0,r2
 825 0018 08BF     	 it eq
 826 001a 0323     	 moveq r3,#3
 827              	.LVL96:
 828 001c 00E0     	 b .L57
 829              	.LVL97:
 830              	.L60:
 831 001e 0223     	 movs r3,#2
 832              	.LVL98:
 833              	.L57:
 623:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 	  {
 624:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 	    master_grp_num = i;
 625:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 	  }
 626:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 627:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 628:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if(slave_group < master_grp_num)
 834              	 .loc 1 628 0 discriminator 2
 835 0020 8B42     	 cmp r3,r1
 629:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 630:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 	  slave_group++;
 836              	 .loc 1 630 0 discriminator 2
 837 0022 88BF     	 it hi
 838 0024 0131     	 addhi r1,r1,#1
 839              	.LVL99:
 631:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 632:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->SYNCTR &= ~(1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
 840              	 .loc 1 632 0 discriminator 2
 841 0026 D0F8C020 	 ldr r2,[r0,#192]
 842 002a 0331     	 adds r1,r1,#3
 843              	.LVL100:
 844 002c 0123     	 movs r3,#1
 845              	.LVL101:
 846 002e 8B40     	 lsls r3,r3,r1
 847 0030 22EA0303 	 bic r3,r2,r3
 848 0034 C0F8C030 	 str r3,[r0,#192]
 849 0038 7047     	 bx lr
 850              	.L62:
 851 003a 00BF     	 .align 2
 852              	.L61:
 853 003c 00480040 	 .word 1073760256
 854 0040 00500040 	 .word 1073762304
 855              	 .cfi_endproc
 856              	.LFE274:
 858              	 .section .text.XMC_VADC_GROUP_SetSyncSlaveReadySignal,"ax",%progbits
 859              	 .align 2
 860              	 .global XMC_VADC_GROUP_SetSyncSlaveReadySignal
 861              	 .thumb
 862              	 .thumb_func
 864              	XMC_VADC_GROUP_SetSyncSlaveReadySignal:
 865              	.LFB275:
 633:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 634:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 635:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to configure EVAL bit in the slave groups*/
 636:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncSlaveReadySignal(XMC_VADC_GROUP_t *const group_ptr,
 637:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                             uint32_t eval_waiting_group,
 638:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                             uint32_t eval_origin_group)
 639:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 866              	 .loc 1 639 0
 867              	 .cfi_startproc
 868              	 
 869              	 
 870              	 
 871              	.LVL102:
 640:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlaveReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
 641:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlaveReadySignal:Wrong Group numbers", (eval_waiting_group != e
 642:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 643:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if(eval_origin_group < eval_waiting_group)
 872              	 .loc 1 643 0
 873 0000 8A42     	 cmp r2,r1
 644:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 645:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 	  eval_origin_group++;
 874              	 .loc 1 645 0
 875 0002 38BF     	 it cc
 876 0004 0132     	 addcc r2,r2,#1
 877              	.LVL103:
 646:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 647:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->SYNCTR |= (1U << (eval_origin_group + XMC_VADC_SYNCTR_START_LOCATION));
 878              	 .loc 1 647 0
 879 0006 D0F8C010 	 ldr r1,[r0,#192]
 880              	.LVL104:
 881 000a 0332     	 adds r2,r2,#3
 882              	.LVL105:
 883 000c 0123     	 movs r3,#1
 884 000e 9340     	 lsls r3,r3,r2
 885 0010 0B43     	 orrs r3,r3,r1
 886 0012 C0F8C030 	 str r3,[r0,#192]
 887 0016 7047     	 bx lr
 888              	 .cfi_endproc
 889              	.LFE275:
 891              	 .section .text.XMC_VADC_GROUP_EnableChannelSyncRequest,"ax",%progbits
 892              	 .align 2
 893              	 .global XMC_VADC_GROUP_EnableChannelSyncRequest
 894              	 .thumb
 895              	 .thumb_func
 897              	XMC_VADC_GROUP_EnableChannelSyncRequest:
 898              	.LFB276:
 648:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 649:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 650:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 651:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to enable the synchronous conversion feature - Applicable only to kernel configured as maste
 652:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
 653:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 899              	 .loc 1 653 0
 900              	 .cfi_startproc
 901              	 
 902              	 
 903              	 
 904              	.LVL106:
 654:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t synctr;
 655:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 656:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
 657:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Channel Number",
 658:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
 659:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 660:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   synctr  = group_ptr->SYNCTR;
 905              	 .loc 1 660 0
 906 0000 D0F8C030 	 ldr r3,[r0,#192]
 907              	.LVL107:
 661:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 662:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (!(synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk))
 908              	 .loc 1 662 0
 909 0004 13F0030F 	 tst r3,#3
 910 0008 07D1     	 bne .L65
 911 000a 00EB8100 	 add r0,r0,r1,lsl#2
 912              	.LVL108:
 663:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 664:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     group_ptr->CHCTR[ch_num] |= (uint32_t)((uint32_t)1 << VADC_G_CHCTR_SYNC_Pos);
 913              	 .loc 1 664 0
 914 000e D0F80032 	 ldr r3,[r0,#512]
 915              	.LVL109:
 916 0012 43F48063 	 orr r3,r3,#1024
 917 0016 C0F80032 	 str r3,[r0,#512]
 918              	.L65:
 919 001a 7047     	 bx lr
 920              	 .cfi_endproc
 921              	.LFE276:
 923              	 .section .text.XMC_VADC_GROUP_DisableChannelSyncRequest,"ax",%progbits
 924              	 .align 2
 925              	 .global XMC_VADC_GROUP_DisableChannelSyncRequest
 926              	 .thumb
 927              	 .thumb_func
 929              	XMC_VADC_GROUP_DisableChannelSyncRequest:
 930              	.LFB277:
 665:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 666:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 667:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 668:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to disable synchronous conversion feature */
 669:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
 670:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 931              	 .loc 1 670 0
 932              	 .cfi_startproc
 933              	 
 934              	 
 935              	 
 936              	.LVL110:
 671:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t    synctr;
 672:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 673:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
 674:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Channel Number",
 675:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
 676:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 677:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   synctr  = group_ptr->SYNCTR;
 937              	 .loc 1 677 0
 938 0000 D0F8C030 	 ldr r3,[r0,#192]
 939              	.LVL111:
 678:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 679:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk)
 940              	 .loc 1 679 0
 941 0004 13F0030F 	 tst r3,#3
 942 0008 07D0     	 beq .L67
 943 000a 00EB8100 	 add r0,r0,r1,lsl#2
 944              	.LVL112:
 680:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 681:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_SYNC_Msk);
 945              	 .loc 1 681 0
 946 000e D0F80032 	 ldr r3,[r0,#512]
 947              	.LVL113:
 948 0012 23F48063 	 bic r3,r3,#1024
 949 0016 C0F80032 	 str r3,[r0,#512]
 950              	.L67:
 951 001a 7047     	 bx lr
 952              	 .cfi_endproc
 953              	.LFE277:
 955              	 .section .text.XMC_VADC_GROUP_IsConverterBusy,"ax",%progbits
 956              	 .align 2
 957              	 .global XMC_VADC_GROUP_IsConverterBusy
 958              	 .thumb
 959              	 .thumb_func
 961              	XMC_VADC_GROUP_IsConverterBusy:
 962              	.LFB278:
 682:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 683:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 684:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 685:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to retrieve the converter state - Idle vs Busy */ 
 686:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr)
 687:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 963              	 .loc 1 687 0
 964              	 .cfi_startproc
 965              	 
 966              	 
 967              	 
 968              	.LVL114:
 688:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t      arbcfg;
 689:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 690:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsConverterBusy:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
 691:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 692:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   arbcfg  = group_ptr->ARBCFG;
 969              	 .loc 1 692 0
 970 0000 D0F88000 	 ldr r0,[r0,#128]
 971              	.LVL115:
 693:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   arbcfg &= (uint32_t)VADC_G_ARBCFG_BUSY_Msk;
 694:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   arbcfg = arbcfg >> VADC_G_ARBCFG_BUSY_Pos;
 695:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 696:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   return( (XMC_VADC_GROUP_STATE_t)arbcfg);
 697:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 972              	 .loc 1 697 0
 973 0004 C0F38070 	 ubfx r0,r0,#30,#1
 974              	.LVL116:
 975 0008 7047     	 bx lr
 976              	 .cfi_endproc
 977              	.LFE278:
 979 000a 00BF     	 .section .text.XMC_VADC_GROUP_SetBoundaries,"ax",%progbits
 980              	 .align 2
 981              	 .global XMC_VADC_GROUP_SetBoundaries
 982              	 .thumb
 983              	 .thumb_func
 985              	XMC_VADC_GROUP_SetBoundaries:
 986              	.LFB279:
 698:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 699:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to set boundaries for conversion results */
 700:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, const uint32_t boundary0, cons
 701:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 987              	 .loc 1 701 0
 988              	 .cfi_startproc
 989              	 
 990              	 
 991              	 
 992              	.LVL117:
 702:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t bound;
 703:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 704:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetBoundaries:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
 705:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 706:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Program the Boundary registers */
 707:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   bound  = group_ptr->BOUND;
 993              	 .loc 1 707 0
 994 0000 D0F8B830 	 ldr r3,[r0,#184]
 995              	.LVL118:
 708:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 709:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 996              	 .loc 1 709 0
 997 0004 03F0F023 	 and r3,r3,#-268374016
 998              	.LVL119:
 999 0008 41EA0242 	 orr r2,r1,r2,lsl#16
 1000              	.LVL120:
 710:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary0 << VADC_G_BOUND_BOUNDARY0_Pos);
 711:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary1 << VADC_G_BOUND_BOUNDARY1_Pos);
 1001              	 .loc 1 711 0
 1002 000c 1343     	 orrs r3,r3,r2
 1003              	.LVL121:
 712:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->BOUND = bound;
 1004              	 .loc 1 712 0
 1005 000e C0F8B830 	 str r3,[r0,#184]
 1006 0012 7047     	 bx lr
 1007              	 .cfi_endproc
 1008              	.LFE279:
 1010              	 .section .text.XMC_VADC_GROUP_SetIndividualBoundary,"ax",%progbits
 1011              	 .align 2
 1012              	 .global XMC_VADC_GROUP_SetIndividualBoundary
 1013              	 .thumb
 1014              	 .thumb_func
 1016              	XMC_VADC_GROUP_SetIndividualBoundary:
 1017              	.LFB280:
 713:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 714:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 715:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to set an individual boundary for conversion results */
 716:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
 717:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
 718:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                           const uint16_t boundary_value)
 719:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 1018              	 .loc 1 719 0
 1019              	 .cfi_startproc
 1020              	 
 1021              	 
 1022              	 
 1023              	.LVL122:
 720:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 721:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t bound;
 722:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 723:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
 724:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Boundary Selection",
 725:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                ((XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection) ||
 726:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                 (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)))
 727:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 728:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Program the Boundary registers */
 729:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   bound  = group_ptr->BOUND;
 1024              	 .loc 1 729 0
 1025 0000 D0F8B830 	 ldr r3,[r0,#184]
 1026              	.LVL123:
 730:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection)
 1027              	 .loc 1 730 0
 1028 0004 39B9     	 cbnz r1,.L72
 731:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 732:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 1029              	 .loc 1 732 0
 1030 0006 23F47F63 	 bic r3,r3,#4080
 1031              	.LVL124:
 1032 000a 23F00F03 	 bic r3,r3,#15
 1033              	.LVL125:
 733:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY0_Pos);
 1034              	 .loc 1 733 0
 1035 000e 1343     	 orrs r3,r3,r2
 1036              	.LVL126:
 734:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 735:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)
 736:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 737:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 738:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY1_Pos);
 739:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 740:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
 741:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 742:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     /* For MISRA*/
 743:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 744:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->BOUND = bound;
 1037              	 .loc 1 744 0
 1038 0010 C0F8B830 	 str r3,[r0,#184]
 1039 0014 7047     	 bx lr
 1040              	.L72:
 719:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 1041              	 .loc 1 719 0
 1042 0016 10B4     	 push {r4}
 1043              	.LCFI7:
 1044              	 .cfi_def_cfa_offset 4
 1045              	 .cfi_offset 4,-4
 735:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 1046              	 .loc 1 735 0
 1047 0018 0129     	 cmp r1,#1
 1048 001a 05D1     	 bne .L73
 737:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY1_Pos);
 1049              	 .loc 1 737 0
 1050 001c 23F07F63 	 bic r3,r3,#267386880
 1051              	.LVL127:
 1052 0020 23F47023 	 bic r3,r3,#983040
 1053              	.LVL128:
 738:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 1054              	 .loc 1 738 0
 1055 0024 43EA0243 	 orr r3,r3,r2,lsl#16
 1056              	.LVL129:
 1057              	.L73:
 1058              	 .loc 1 744 0
 1059 0028 C0F8B830 	 str r3,[r0,#184]
 745:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 746:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 1060              	 .loc 1 746 0
 1061 002c 5DF8044B 	 ldr r4,[sp],#4
 1062              	.LCFI8:
 1063              	 .cfi_restore 4
 1064              	 .cfi_def_cfa_offset 0
 1065 0030 7047     	 bx lr
 1066              	 .cfi_endproc
 1067              	.LFE280:
 1069 0032 00BF     	 .section .text.XMC_VADC_GROUP_TriggerServiceRequest,"ax",%progbits
 1070              	 .align 2
 1071              	 .global XMC_VADC_GROUP_TriggerServiceRequest
 1072              	 .thumb
 1073              	 .thumb_func
 1075              	XMC_VADC_GROUP_TriggerServiceRequest:
 1076              	.LFB281:
 747:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 748:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* Manually assert service request (Interrupt) to NVIC */
 749:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr,
 750:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                           const uint32_t sr_num,
 751:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                           const XMC_VADC_GROUP_IRQ_t type)
 752:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 1077              	 .loc 1 752 0
 1078              	 .cfi_startproc
 1079              	 
 1080              	 
 1081              	 
 1082              	.LVL130:
 753:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t sract;
 754:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 755:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
 756:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR number", (sr_num <= XMC_VADC_SR_SHARED_
 757:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR type", ((type)<= XMC_VADC_GROUP_IRQ_SHA
 758:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 759:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   sract = group_ptr->SRACT;
 1083              	 .loc 1 759 0
 1084 0000 D0F8C831 	 ldr r3,[r0,#456]
 1085              	.LVL131:
 760:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 761:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (XMC_VADC_GROUP_IRQ_KERNEL == type)
 1086              	 .loc 1 761 0
 1087 0004 1AB9     	 cbnz r2,.L76
 762:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 763:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     sract |= (uint32_t)((uint32_t)1 << sr_num);
 1088              	 .loc 1 763 0
 1089 0006 0122     	 movs r2,#1
 1090              	.LVL132:
 1091 0008 8A40     	 lsls r2,r2,r1
 1092 000a 1343     	 orrs r3,r3,r2
 1093              	.LVL133:
 1094 000c 03E0     	 b .L77
 1095              	.LVL134:
 1096              	.L76:
 764:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 765:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
 766:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 767:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     sract |= (uint32_t)((uint32_t)1 << (sr_num + (uint32_t)8));
 1097              	 .loc 1 767 0
 1098 000e 0831     	 adds r1,r1,#8
 1099              	.LVL135:
 1100 0010 0122     	 movs r2,#1
 1101              	.LVL136:
 1102 0012 8A40     	 lsls r2,r2,r1
 1103 0014 1343     	 orrs r3,r3,r2
 1104              	.LVL137:
 1105              	.L77:
 768:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 769:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 770:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->SRACT = sract;
 1106              	 .loc 1 770 0
 1107 0016 C0F8C831 	 str r3,[r0,#456]
 1108 001a 7047     	 bx lr
 1109              	 .cfi_endproc
 1110              	.LFE281:
 1112              	 .section .text.XMC_VADC_GROUP_ScanInit,"ax",%progbits
 1113              	 .align 2
 1114              	 .global XMC_VADC_GROUP_ScanInit
 1115              	 .thumb
 1116              	 .thumb_func
 1118              	XMC_VADC_GROUP_ScanInit:
 1119              	.LFB282:
 771:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 772:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 773:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
 774:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 775:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to set the SR line for the Boundary flag node pointer*/
 776:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
 777:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                                   const uint8_t boundary_flag_num,
 778:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                                   const XMC_VADC_BOUNDARY_NODE_t sr
 779:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 780:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t flag_pos;
 781:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetBoundaryEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GRO
 782:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 783:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Program the GxBFLNP */
 784:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   flag_pos = (uint32_t)boundary_flag_num << (uint32_t)2;
 785:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->BFLNP &= ~((uint32_t)VADC_G_BFLNP_BFL0NP_Msk << flag_pos);
 786:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->BFLNP |= (uint32_t)sr << flag_pos;
 787:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 788:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 789:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
 790:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 791:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
 792:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 793:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 794:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 795:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to Initialize the Sample and hold features*/
 796:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONFI
 797:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 798:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(voi
 799:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong Index number",(config == (XMC_VADC_GLOBAL_SHS_CONFIG_t
 800:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 801:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Initialize the SHS Configuration register*/
 802:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   shs_ptr->SHSCFG = (uint32_t)((uint32_t)config->shscfg | (uint32_t)SHS_SHSCFG_SCWC_Msk);
 803:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 804:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 805:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Select the Calibration order*/
 806:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALORD_Msk);
 807:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   shs_ptr->CALCTR |=  (uint32_t) ((uint32_t)config->calibration_order << SHS_CALCTR_CALORD_Pos);
 808:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
 809:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 810:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 811:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 812:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to enable the accelerated mode of conversion */
 813:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROUP
 814:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 815:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong SHS Pointer",
 816:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 817:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC_
 818:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 819:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Set the converted to Accelerated mode from compatible mode*/
 820:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 821:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 822:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
 823:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 824:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 825:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 826:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)SHS_TIMCFG1_AT_Msk;
 827:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 828:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
 829:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 830:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     /* for MISRA*/
 831:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 832:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 833:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 834:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to disable the accelerated mode of conversion */
 835:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROU
 836:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 837:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:Wrong SHS Pointer",
 838:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 839:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC
 840:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 841:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Set the converted to Accelerated mode from compatible mode*/
 842:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 843:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 844:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     shs_ptr->TIMCFG0 &= ~(uint32_t)SHS_TIMCFG0_AT_Msk;
 845:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 846:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 847:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 848:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     shs_ptr->TIMCFG1 &= ~(uint32_t)SHS_TIMCFG1_AT_Msk;
 849:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 850:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
 851:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 852:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     /* for MISRA*/
 853:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 854:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 855:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 856:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to set the Short sample time of the Sample and hold module*/
 857:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 858:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                             XMC_VADC_GROUP_INDEX_t group_num,
 859:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                             uint8_t sst_value)
 860:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 861:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong SHS Pointer",
 862:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 863:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong Index number",(group_num <= XMC_VADC_GRO
 864:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong SST value",(sst_value < 64U))
 865:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 866:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Set the short sample time for the Accelerated mode of operation*/
 867:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 868:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 869:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     shs_ptr->TIMCFG0 &= ~((uint32_t)SHS_TIMCFG0_SST_Msk);
 870:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     shs_ptr->TIMCFG0 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG0_SST_Pos );
 871:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 872:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 873:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 874:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     shs_ptr->TIMCFG1 &= ~((uint32_t)SHS_TIMCFG1_SST_Msk);
 875:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG1_SST_Pos );
 876:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 877:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
 878:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 879:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* for MISRA*/
 880:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 881:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 882:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
 883:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 884:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to set the gain factor of the Sample and hold module*/
 885:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 886:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                        uint8_t gain_value,
 887:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                        XMC_VADC_GROUP_INDEX_t group_num,
 888:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                        uint8_t ch_num)
 889:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 890:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t ch_mask;
 891:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 892:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetGainFactor:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SH
 893:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetGainFactor:Wrong Index number",(group_num <= XMC_VADC_GROUP_IN
 894:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 895:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /*Calculate location of channel bit-field*/
 896:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   ch_mask = ((uint32_t)ch_num << (uint32_t)2);
 897:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 898:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 899:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     shs_ptr->GNCTR00 &= ~((uint32_t)SHS_GNCTR00_GAIN0_Msk << ch_mask) ;
 900:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     shs_ptr->GNCTR00 |=  ((uint32_t)gain_value << ch_mask);
 901:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 902:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 903:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 904:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     shs_ptr->GNCTR10 &= ~((uint32_t)SHS_GNCTR10_GAIN0_Msk << ch_mask);
 905:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     shs_ptr->GNCTR10 |=  ((uint32_t)gain_value << ch_mask);
 906:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 907:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
 908:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 909:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     /* for MISRA*/
 910:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 911:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 912:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 913:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 914:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to enable the gain and offset calibration of the Sample and hold module*/
 915:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 916:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                          XMC_VADC_GROUP_INDEX_t group_num)
 917:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 918:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:Wrong SHS Pointer",
 919:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 920:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:Wrong group selected",
 921:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              (group_num <= (uint32_t)XMC_VADC_GROUP_INDEX_1))
 922:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 923:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Enable gain and offset calibration*/
 924:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 925:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 926:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     shs_ptr->CALOC0 &= ~((uint32_t)SHS_CALOC0_DISCAL_Msk);
 927:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 928:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 929:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 930:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     shs_ptr->CALOC1 &= ~((uint32_t)SHS_CALOC1_DISCAL_Msk);
 931:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 932:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
 933:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 934:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     /* for MISRA */
 935:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 936:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 937:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 938:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to enable the gain and offset calibration of the Sample and hold module*/
 939:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 940:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                           XMC_VADC_GROUP_INDEX_t group_num)
 941:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 942:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:Wrong SHS Pointer",
 943:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 944:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:Wrong group selected",
 945:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****             (group_num <= (uint32_t)XMC_VADC_GROUP_INDEX_1))
 946:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 947:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 948:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 949:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     shs_ptr->CALOC0 |= (uint32_t)SHS_CALOC0_DISCAL_Msk;
 950:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 951:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 952:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 953:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     shs_ptr->CALOC1 |= (uint32_t)SHS_CALOC1_DISCAL_Msk;
 954:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 955:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
 956:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 957:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     /* for MISRA */
 958:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 959:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 960:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 961:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to get the offset calibration value of the Sample and hold module*/
 962:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 963:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
 964:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level)
 965:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 966:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t calibration_value;
 967:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong SHS Pointer",
 968:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 969:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong Group number selected",
 970:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
 971:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong gain level selected",
 972:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_0)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_1)||
 973:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_2)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_3))
 974:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 975:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   calibration_value = 0U;
 976:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 977:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 978:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     calibration_value = (shs_ptr->CALOC0 >> (uint32_t)gain_level) & (uint32_t)SHS_CALOC0_CALOFFVAL0
 979:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 980:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 981:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 982:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     calibration_value = (shs_ptr->CALOC1 >> (uint32_t)gain_level) & (uint32_t)SHS_CALOC1_CALOFFVAL0
 983:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 984:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
 985:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 986:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     /* for MISRA */
 987:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 988:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   return ((uint8_t)calibration_value);
 989:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 990:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 991:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to set the offset calibration value of the Sample and hold module*/
 992:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 993:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
 994:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
 995:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                    uint8_t offset_calibration_value)
 996:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 997:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong SHS Pointer",
 998:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 999:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong Group number selected",
1000:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
1001:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong gain level selected",
1002:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_0)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_1)||
1003:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_2)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_3))
1004:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1005:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
1006:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1007:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     shs_ptr->CALOC0 = (shs_ptr->CALOC0  & ~((uint32_t)SHS_CALOC0_CALOFFVAL0_Msk << (uint32_t)gain_l
1008:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                       (uint32_t)SHS_CALOC0_OFFWC_Msk;
1009:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     shs_ptr->CALOC0 |=  ((uint32_t)offset_calibration_value << (uint32_t)gain_level) | (uint32_t)SH
1010:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1011:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
1012:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1013:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     shs_ptr->CALOC1 = (shs_ptr->CALOC1 & ~((uint32_t)SHS_CALOC1_CALOFFVAL0_Msk << (uint32_t)gain_le
1014:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                       (uint32_t)SHS_CALOC1_OFFWC_Msk;
1015:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     shs_ptr->CALOC1 |=  ((uint32_t)offset_calibration_value << (uint32_t)gain_level) | (uint32_t)SH
1016:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1017:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
1018:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1019:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     /* for MISRA */
1020:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1021:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1022:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
1023:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1024:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to set the values of sigma delta loop of the Sample and hold module*/
1025:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1026:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                            XMC_VADC_GROUP_INDEX_t group_num,
1027:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
1028:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                            uint8_t ch_num)
1029:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
1030:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong SHS Pointer",
1031:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1032:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Group number selected",
1033:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
1034:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Delta sigma loop selected",
1035:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
1036:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Channel Number",
1037:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1038:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1039:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   shs_ptr->LOOP &= ~(((uint32_t)SHS_LOOP_LPCH0_Msk | (uint32_t)SHS_LOOP_LPSH0_Msk | (uint32_t)SHS_L
1040:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                      << (uint32_t)loop_select);
1041:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   shs_ptr->LOOP |= ((uint32_t)ch_num | ((uint32_t)group_num << (uint32_t)SHS_LOOP_LPSH0_Pos)) << (u
1042:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1043:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1044:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1045:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
1046:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1047:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)   
1048:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to initialize the group scan hardware of a kernel */
1049:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
1050:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 1120              	 .loc 1 1050 0
 1121              	 .cfi_startproc
 1122              	 
 1123              	 
 1124              	 
 1125              	.LVL138:
 1126 0000 10B4     	 push {r4}
 1127              	.LCFI9:
 1128              	 .cfi_def_cfa_offset 4
 1129              	 .cfi_offset 4,-4
 1130              	.LVL139:
 1131              	.LBB30:
 1132              	.LBB31:
2634:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
2635:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2636:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
2637:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2638:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2639:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2640:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param boundary_flag_num The Boundary flag for which the interrupt node needs to be configured.
2641:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                          Range: [0x0 to 0x3]
2642:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param node    Service Request node Id
2643:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
2644:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
2645:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2646:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2647:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Connects the boundary event to the SR line of VADC or to a common boundary flag.<BR>\n
2648:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a boundary event. Hence to get a interrupt o
2649:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
2650:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * field GxBFLNP.BFLxNP.
2651:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2652:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2653:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  None.
2654:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2655:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
2656:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                   const uint8_t boundary_flag_num,
2657:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                   const XMC_VADC_BOUNDARY_NODE_t node);
2658:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
2659:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2660:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2661:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2662:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
2663:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    uint32_t The complete GxALIAS register
2664:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2665:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2666:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Returns the ALIAS values.\n The ALIAS value that is configured for Channel-0 and channel-1 are r
2667:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2668:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2669:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  None.
2670:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2671:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetAlias(XMC_VADC_GROUP_t *const group_ptr)
2672:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
2673:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetAliasWrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
2674:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   return (group_ptr->ALIAS);
2675:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
2676:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2677:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2678:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2679:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param conv_class  conversion property to be extracted
2680:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
2681:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_GROUP_CLASS_t The complete GxICLASSy register
2682:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2683:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2684:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Returns the input class configuration values.\n
2685:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This returns the sampling time configuration and resolution configured in the appropriate group 
2686:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \b conv_class. A call to this API would return the register GxICLASSy.
2687:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2688:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2689:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  None.
2690:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2691:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_GROUP_CLASS_t XMC_VADC_GROUP_GetInputClass(XMC_VADC_GROUP_t *const group_p
2692:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                                     const XMC_VADC_CHANNEL_CONV_t c
2693:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
2694:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CLASS_t input_value;
2695:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
2696:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong conv_class selected", 
2697:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****              (XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLA
2698:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2699:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   input_value.g_iclass0 = (uint32_t) 0xFFFFFFFF;
2700:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   if ((XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLASS1 == 
2701:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   {
2702:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****     input_value.g_iclass0 = group_ptr->ICLASS[(uint32_t)conv_class];
2703:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   }
2704:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2705:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   return (input_value);
2706:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
2707:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
2708:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2709:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)
2710:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2711:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
2712:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to Scan configuration
2713:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return None
2714:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2715:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2716:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC SCAN functional block.<BR>\n
2717:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * The GROUP SCAN request source functional block converts channels sequentially starting with the 
2718:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * channel to the lowest. Channels must register themselves as being part of the the scan sequence.
2719:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_ScanEnableA
2720:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
2721:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_ScanDisableArbi
2722:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxASCTRL, GxASMR needed scan request s
2723:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2724:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2725:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR> XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2726:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanSelectGating()<BR>
2727:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2728:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
2729:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2730:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2731:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2732:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
2733:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
2734:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2735:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2736:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the scan request source.<BR>\n
2737:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2738:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2739:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. Thus this must be enabled if any conversion need to take place.
2740:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2741:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2742:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2743:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2744:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2745:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2746:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
2747:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2748:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN1_Msk;
2749:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
2750:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2751:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2752:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2753:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
2754:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
2755:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2756:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2757:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the scan request source.<BR>\n
2758:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2759:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2760:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * to the scan slot.A call to this API will lead to all conversions request by scan to be blocked.
2761:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2762:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2763:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2764:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR>
2765:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2766:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2767:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
2768:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
2769:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN1_Msk);
 1133              	 .loc 2 2769 0
 1134 0002 D0F88430 	 ldr r3,[r0,#132]
 1135 0006 23F00073 	 bic r3,r3,#33554432
 1136 000a C0F88430 	 str r3,[r0,#132]
 1137              	.LBE31:
 1138              	.LBE30:
1051:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t      reg;
1052:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1053:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1054:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1055:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* All configurations have to be performed with the arbitration slot disabled */
1056:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
1057:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1058:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Read in the existing contents of arbitration priority register */
1059:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   reg = group_ptr->ARBPR;
 1139              	 .loc 1 1059 0
 1140 000e D0F88430 	 ldr r3,[r0,#132]
 1141              	.LVL140:
1060:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1061:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Program the priority of the request source */
1062:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   reg &= ~(uint32_t)VADC_G_ARBPR_PRIO1_Msk;
 1142              	 .loc 1 1062 0
 1143 0012 23F03003 	 bic r3,r3,#48
 1144              	.LVL141:
1063:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO1_Pos);
 1145              	 .loc 1 1063 0
 1146 0016 0A78     	 ldrb r2,[r1]
 1147 0018 C2F38104 	 ubfx r4,r2,#2,#2
 1148 001c 43EA0413 	 orr r3,r3,r4,lsl#4
 1149              	.LVL142:
1064:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1065:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Program the start mode */
1066:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 1150              	 .loc 1 1066 0
 1151 0020 12F0030F 	 tst r2,#3
1067:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1068:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     reg |= (uint32_t)(VADC_G_ARBPR_CSM1_Msk);
 1152              	 .loc 1 1068 0
 1153 0024 18BF     	 it ne
 1154 0026 43F08003 	 orrne r3,r3,#128
 1155              	.LVL143:
1069:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1070:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1071:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->ARBPR = reg;
 1156              	 .loc 1 1071 0
 1157 002a C0F88430 	 str r3,[r0,#132]
1072:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1073:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->ASCTRL = (uint32_t)(config->asctrl |(VADC_G_ASCTRL_XTWC_Msk) |(VADC_G_ASCTRL_GTWC_Msk)
 1158              	 .loc 1 1073 0
 1159 002e 4B68     	 ldr r3,[r1,#4]
 1160              	.LVL144:
 1161 0030 43F08023 	 orr r3,r3,#-2147450880
 1162 0034 43F40003 	 orr r3,r3,#8388608
 1163 0038 C0F82031 	 str r3,[r0,#288]
 1164              	.LVL145:
1074:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                  (VADC_G_ASCTRL_TMWC_Msk));
1075:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1076:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->ASMR  = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VA
 1165              	 .loc 1 1076 0
 1166 003c 8B68     	 ldr r3,[r1,#8]
 1167 003e 43F00103 	 orr r3,r3,#1
 1168 0042 C0F82431 	 str r3,[r0,#292]
1077:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1078:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 1169              	 .loc 1 1078 0
 1170 0046 0B78     	 ldrb r3,[r1]
 1171 0048 03F00303 	 and r3,r3,#3
 1172 004c 022B     	 cmp r3,#2
 1173 004e 05D1     	 bne .L80
1079:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1080:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_RPTDIS_Msk;
 1174              	 .loc 1 1080 0
 1175 0050 D0F82431 	 ldr r3,[r0,#292]
 1176 0054 43F48033 	 orr r3,r3,#65536
 1177 0058 C0F82431 	 str r3,[r0,#292]
 1178              	.L80:
 1179              	.LVL146:
 1180              	.LBB32:
 1181              	.LBB33:
2748:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
 1182              	 .loc 2 2748 0
 1183 005c D0F88430 	 ldr r3,[r0,#132]
 1184 0060 43F00073 	 orr r3,r3,#33554432
 1185 0064 C0F88430 	 str r3,[r0,#132]
 1186              	.LBE33:
 1187              	.LBE32:
1081:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1082:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1083:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Enable arbitration slot now */
1084:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_VADC_GROUP_ScanEnableArbitrationSlot(group_ptr);
1085:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1086:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 1188              	 .loc 1 1086 0
 1189 0068 5DF8044B 	 ldr r4,[sp],#4
 1190              	.LCFI10:
 1191              	 .cfi_restore 4
 1192              	 .cfi_def_cfa_offset 0
 1193 006c 7047     	 bx lr
 1194              	 .cfi_endproc
 1195              	.LFE282:
 1197 006e 00BF     	 .section .text.XMC_VADC_GROUP_ScanSelectTrigger,"ax",%progbits
 1198              	 .align 2
 1199              	 .global XMC_VADC_GROUP_ScanSelectTrigger
 1200              	 .thumb
 1201              	 .thumb_func
 1203              	XMC_VADC_GROUP_ScanSelectTrigger:
 1204              	.LFB283:
1087:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1088:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger input for Group Scan request source */
1089:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
1090:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 1205              	 .loc 1 1090 0
 1206              	 .cfi_startproc
 1207              	 
 1208              	 
 1209              	 
 1210              	.LVL147:
1091:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t scanctrl;
1092:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1093:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1094:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Trigger Port", ((trigger_input)< XMC_VADC_NUM_
1095:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1096:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 1211              	 .loc 1 1096 0
 1212 0000 D0F82031 	 ldr r3,[r0,#288]
 1213              	.LVL148:
1097:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
1098:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTSEL_Msk);
 1214              	 .loc 1 1098 0
 1215 0004 23F47063 	 bic r3,r3,#3840
 1216              	.LVL149:
 1217 0008 43F40043 	 orr r3,r3,#32768
 1218              	.LVL150:
1099:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_input << VADC_G_ASCTRL_XTSEL_Pos);
 1219              	 .loc 1 1099 0
 1220 000c 43EA0121 	 orr r1,r3,r1,lsl#8
 1221              	.LVL151:
1100:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 1222              	 .loc 1 1100 0
 1223 0010 C0F82011 	 str r1,[r0,#288]
 1224 0014 7047     	 bx lr
 1225              	 .cfi_endproc
 1226              	.LFE283:
 1228 0016 00BF     	 .section .text.XMC_VADC_GROUP_ScanSelectTriggerEdge,"ax",%progbits
 1229              	 .align 2
 1230              	 .global XMC_VADC_GROUP_ScanSelectTriggerEdge
 1231              	 .thumb
 1232              	 .thumb_func
 1234              	XMC_VADC_GROUP_ScanSelectTriggerEdge:
 1235              	.LFB284:
1101:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1102:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1103:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* Select a trigger edge*/
1104:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
1105:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 1236              	 .loc 1 1105 0
 1237              	 .cfi_startproc
 1238              	 
 1239              	 
 1240              	 
 1241              	.LVL152:
1106:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t scanctrl;
1107:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1108:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
1109:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Trigger Port", ((trigger_edge)<= XMC_VADC_
1110:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1111:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 1242              	 .loc 1 1111 0
 1243 0000 D0F82031 	 ldr r3,[r0,#288]
 1244              	.LVL153:
1112:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
1113:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTMODE_Msk);
 1245              	 .loc 1 1113 0
 1246 0004 23F4C043 	 bic r3,r3,#24576
 1247              	.LVL154:
 1248 0008 43F40043 	 orr r3,r3,#32768
 1249              	.LVL155:
1114:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_G_ASCTRL_XTMODE_Pos);
 1250              	 .loc 1 1114 0
 1251 000c 43EA4131 	 orr r1,r3,r1,lsl#13
 1252              	.LVL156:
1115:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 1253              	 .loc 1 1115 0
 1254 0010 C0F82011 	 str r1,[r0,#288]
 1255 0014 7047     	 bx lr
 1256              	 .cfi_endproc
 1257              	.LFE284:
 1259 0016 00BF     	 .section .text.XMC_VADC_GROUP_ScanSelectGating,"ax",%progbits
 1260              	 .align 2
 1261              	 .global XMC_VADC_GROUP_ScanSelectGating
 1262              	 .thumb
 1263              	 .thumb_func
 1265              	XMC_VADC_GROUP_ScanSelectGating:
 1266              	.LFB285:
1116:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1117:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1118:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger gating input for Group Scan request source */
1119:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
1120:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 1267              	 .loc 1 1120 0
 1268              	 .cfi_startproc
 1269              	 
 1270              	 
 1271              	 
 1272              	.LVL157:
1121:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t scanctrl;
1122:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1123:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
1124:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Gating Port", ((gating_input)< XMC_VADC_NUM_POR
1125:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1126:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 1273              	 .loc 1 1126 0
 1274 0000 D0F82031 	 ldr r3,[r0,#288]
 1275              	.LVL158:
1127:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   scanctrl     |= (uint32_t)VADC_G_ASCTRL_GTWC_Msk;
1128:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_GTSEL_Msk);
 1276              	 .loc 1 1128 0
 1277 0004 23F47023 	 bic r3,r3,#983040
 1278              	.LVL159:
 1279 0008 43F40003 	 orr r3,r3,#8388608
 1280              	.LVL160:
1129:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)gating_input << VADC_G_ASCTRL_GTSEL_Pos);
 1281              	 .loc 1 1129 0
 1282 000c 43EA0141 	 orr r1,r3,r1,lsl#16
 1283              	.LVL161:
1130:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 1284              	 .loc 1 1130 0
 1285 0010 C0F82011 	 str r1,[r0,#288]
 1286 0014 7047     	 bx lr
 1287              	 .cfi_endproc
 1288              	.LFE285:
 1290 0016 00BF     	 .section .text.XMC_VADC_GROUP_ScanSequenceAbort,"ax",%progbits
 1291              	 .align 2
 1292              	 .global XMC_VADC_GROUP_ScanSequenceAbort
 1293              	 .thumb
 1294              	 .thumb_func
 1296              	XMC_VADC_GROUP_ScanSequenceAbort:
 1297              	.LFB286:
1131:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1132:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1133:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to stop an ongoing conversion of a sequence */
1134:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr)
1135:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 1298              	 .loc 1 1135 0
 1299              	 .cfi_startproc
 1300              	 
 1301              	 
 1302              	 
 1303              	.LVL162:
1136:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t asctrl;
1137:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   bool arbitration_status;
1138:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1139:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSequenceAbort:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1140:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1141:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* To disable trigger and gating before abort*/
1142:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   asctrl = group_ptr->ASCTRL;
 1304              	 .loc 1 1142 0
 1305 0000 D0F82031 	 ldr r3,[r0,#288]
 1306              	.LVL163:
1143:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1144:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->ASCTRL =(0U | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
 1307              	 .loc 1 1144 0
 1308 0004 124A     	 ldr r2,.L86
 1309 0006 C0F82021 	 str r2,[r0,#288]
1145:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
1146:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1147:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* To disable Arbitration before abort*/
1148:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN1_Pos) & 1U);
 1310              	 .loc 1 1148 0
 1311 000a D0F88420 	 ldr r2,[r0,#132]
 1312              	.LVL164:
 1313              	.LBB34:
 1314              	.LBB35:
 1315              	 .loc 2 2769 0
 1316 000e D0F88410 	 ldr r1,[r0,#132]
 1317 0012 21F00071 	 bic r1,r1,#33554432
 1318 0016 C0F88410 	 str r1,[r0,#132]
 1319              	.LBE35:
 1320              	.LBE34:
1149:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
1150:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1151:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENGT_Msk);
 1321              	 .loc 1 1151 0
 1322 001a D0F82411 	 ldr r1,[r0,#292]
 1323 001e 21F00301 	 bic r1,r1,#3
 1324 0022 C0F82411 	 str r1,[r0,#292]
1152:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_CLRPND_Msk;
 1325              	 .loc 1 1152 0
 1326 0026 D0F82411 	 ldr r1,[r0,#292]
 1327 002a 41F48071 	 orr r1,r1,#256
 1328 002e C0F82411 	 str r1,[r0,#292]
1153:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1154:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     /* Enable the arbitration slot 1*/
1155:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN1_Pos);
 1329              	 .loc 1 1155 0
 1330 0032 D0F88410 	 ldr r1,[r0,#132]
1148:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 1331              	 .loc 1 1148 0
 1332 0036 C2F34062 	 ubfx r2,r2,#25,#1
 1333              	.LVL165:
 1334              	 .loc 1 1155 0
 1335 003a 41EA4262 	 orr r2,r1,r2,lsl#25
 1336 003e C0F88420 	 str r2,[r0,#132]
1156:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1157:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Enable any disabled gating*/
1158:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->ASCTRL =(asctrl | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
1159:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
 1337              	 .loc 1 1159 0
 1338 0042 43F08023 	 orr r3,r3,#-2147450880
 1339              	.LVL166:
 1340 0046 43F40003 	 orr r3,r3,#8388608
1158:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
 1341              	 .loc 1 1158 0
 1342 004a C0F82031 	 str r3,[r0,#288]
 1343 004e 7047     	 bx lr
 1344              	.L87:
 1345              	 .align 2
 1346              	.L86:
 1347 0050 00808080 	 .word -2139062272
 1348              	 .cfi_endproc
 1349              	.LFE286:
 1351              	 .section .text.XMC_VADC_GROUP_ScanGetNumChannelsPending,"ax",%progbits
 1352              	 .align 2
 1353              	 .global XMC_VADC_GROUP_ScanGetNumChannelsPending
 1354              	 .thumb
 1355              	 .thumb_func
 1357              	XMC_VADC_GROUP_ScanGetNumChannelsPending:
 1358              	.LFB287:
1160:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1161:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1162:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to find out number of channels awaiting conversion */
1163:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr)
1164:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 1359              	 .loc 1 1164 0
 1360              	 .cfi_startproc
 1361              	 
 1362              	 
 1363              	 
 1364              	.LVL167:
1165:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t reg;
1166:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t i;
1167:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t count;
1168:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1169:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanGetNumChannelsPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1170:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1171:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1172:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   count = 0U;
1173:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1174:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (group_ptr->ASPND)
 1365              	 .loc 1 1174 0
 1366 0000 D0F82C31 	 ldr r3,[r0,#300]
 1367 0004 5BB1     	 cbz r3,.L92
1175:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1176:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     reg = group_ptr->ASPND;
 1368              	 .loc 1 1176 0
 1369 0006 D0F82C21 	 ldr r2,[r0,#300]
 1370              	.LVL168:
 1371 000a 0823     	 movs r3,#8
1172:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 1372              	 .loc 1 1172 0
 1373 000c 0020     	 movs r0,#0
 1374              	.LVL169:
 1375              	.L91:
1177:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1178:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     for(i=0U;i<XMC_VADC_NUM_CHANNELS_PER_GROUP;i++)
1179:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     {
1180:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       if (reg & 1U)
 1376              	 .loc 1 1180 0
 1377 000e 12F0010F 	 tst r2,#1
1181:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       {
1182:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****         count++;
 1378              	 .loc 1 1182 0
 1379 0012 18BF     	 it ne
 1380 0014 0130     	 addne r0,r0,#1
 1381              	.LVL170:
1183:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       }
1184:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       reg = (uint32_t)(reg >> (uint32_t)1);
 1382              	 .loc 1 1184 0
 1383 0016 5208     	 lsrs r2,r2,#1
 1384              	.LVL171:
1178:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     {
 1385              	 .loc 1 1178 0
 1386 0018 013B     	 subs r3,r3,#1
 1387              	.LVL172:
 1388 001a F8D1     	 bne .L91
 1389 001c 7047     	 bx lr
 1390              	.LVL173:
 1391              	.L92:
1172:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 1392              	 .loc 1 1172 0
 1393 001e 0020     	 movs r0,#0
 1394              	.LVL174:
1185:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     }
1186:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1187:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1188:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   return count;
1189:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 1395              	 .loc 1 1189 0
 1396 0020 7047     	 bx lr
 1397              	 .cfi_endproc
 1398              	.LFE287:
 1400 0022 00BF     	 .section .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode,"ax",%progbits
 1401              	 .align 2
 1402              	 .global XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
 1403              	 .thumb
 1404              	 .thumb_func
 1406              	XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:
 1407              	.LFB288:
1190:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1191:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to select a service request line (NVIC Node) for request source event */
1192:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
1193:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 1408              	 .loc 1 1193 0
 1409              	 .cfi_startproc
 1410              	 
 1411              	 
 1412              	 
 1413              	.LVL175:
1194:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t sevnp;
1195:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   sevnp = group_ptr->SEVNP;
 1414              	 .loc 1 1195 0
 1415 0000 D0F8C031 	 ldr r3,[r0,#448]
 1416              	.LVL176:
1196:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1197:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_G
1198:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_
1199:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1200:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV1NP_Msk);
 1417              	 .loc 1 1200 0
 1418 0004 23F0F003 	 bic r3,r3,#240
 1419              	.LVL177:
1201:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV1NP_Pos);
 1420              	 .loc 1 1201 0
 1421 0008 43EA0111 	 orr r1,r3,r1,lsl#4
 1422              	.LVL178:
1202:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1203:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->SEVNP = sevnp;
 1423              	 .loc 1 1203 0
 1424 000c C0F8C011 	 str r1,[r0,#448]
 1425 0010 7047     	 bx lr
 1426              	 .cfi_endproc
 1427              	.LFE288:
 1429 0012 00BF     	 .section .text.XMC_VADC_GROUP_ScanRemoveChannel,"ax",%progbits
 1430              	 .align 2
 1431              	 .global XMC_VADC_GROUP_ScanRemoveChannel
 1432              	 .thumb
 1433              	 .thumb_func
 1435              	XMC_VADC_GROUP_ScanRemoveChannel:
 1436              	.LFB289:
1204:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1205:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1206:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* Removes the selected channel from conversion*/
1207:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
1208:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 1437              	 .loc 1 1208 0
 1438              	 .cfi_startproc
 1439              	 
 1440              	 
 1441              	 
 1442              	.LVL179:
1209:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t assel;
1210:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1211:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1212:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong channel number", ((channel_num)< XMC_VADC_NUM_
1213:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1214:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   assel = group_ptr->ASSEL; 
 1443              	 .loc 1 1214 0
 1444 0000 D0F82831 	 ldr r3,[r0,#296]
 1445              	.LVL180:
1215:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   assel &= (~( 1 << channel_num));
 1446              	 .loc 1 1215 0
 1447 0004 0122     	 movs r2,#1
 1448 0006 8A40     	 lsls r2,r2,r1
 1449 0008 23EA0203 	 bic r3,r3,r2
 1450              	.LVL181:
1216:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->ASSEL  = assel;
 1451              	 .loc 1 1216 0
 1452 000c C0F82831 	 str r3,[r0,#296]
 1453 0010 7047     	 bx lr
 1454              	 .cfi_endproc
 1455              	.LFE289:
 1457 0012 00BF     	 .section .text.XMC_VADC_GLOBAL_BackgroundInit,"ax",%progbits
 1458              	 .align 2
 1459              	 .global XMC_VADC_GLOBAL_BackgroundInit
 1460              	 .thumb
 1461              	 .thumb_func
 1463              	XMC_VADC_GLOBAL_BackgroundInit:
 1464              	.LFB290:
1217:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1218:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
1219:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1220:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to initialize background scan request source hardware */
1221:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
1222:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 1465              	 .loc 1 1222 0
 1466              	 .cfi_startproc
 1467              	 
 1468              	 
 1469              	 
 1470              	.LVL182:
 1471 0000 F0B4     	 push {r4,r5,r6,r7}
 1472              	.LCFI11:
 1473              	 .cfi_def_cfa_offset 16
 1474              	 .cfi_offset 4,-16
 1475              	 .cfi_offset 5,-12
 1476              	 .cfi_offset 6,-8
 1477              	 .cfi_offset 7,-4
 1478              	.LVL183:
 1479              	.LBB36:
 1480              	.LBB37:
2770:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
2771:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2772:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2773:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2774:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
2775:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
2776:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2777:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2778:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Returns the arbitration status of the scan request source.<BR>\n
2779:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2780:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2781:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. A call to this API would return the status of the arbitration slot of scan.
2782:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
2783:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2784:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2785:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR
2786:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2787:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr)
2788:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
2789:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GROU
2790:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2791:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN1_Msk) >> VADC_G_ARBPR_ASEN1_Pos);
2792:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
2793:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2794:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2795:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2796:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param trigger_input  Choice of the input earmarked as a trigger line
2797:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
2798:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
2799:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2800:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2801:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for scan request source.<BR>\n
2802:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2803:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
2804:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2805:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
2806:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTSEL.
2807:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2808:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2809:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectGating()<BR> XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
2810:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2811:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
2812:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2813:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2814:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2815:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2816:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Trigger edge selection
2817:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
2818:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
2819:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2820:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2821:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Selects the trigger edge for scan request source.<BR>\n
2822:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2823:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible trigger edges. This is
2824:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2825:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTMODE.
2826:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2827:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2828:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2829:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2830:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
2831:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2832:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2833:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2834:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param gating_input  Module input signal meant to be selected as gating input
2835:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
2836:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
2837:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2838:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2839:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for scan request source.<BR>\n
2840:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
2841:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the scan request source o
2842:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxASMR.ENGT has to be config
2843:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxAS
2844:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2845:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2846:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2847:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2848:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
2849:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2850:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2851:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2852:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the scan request source
2853:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
2854:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
2855:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2856:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2857:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of scan request source.<BR>\n
2858:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
2859:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
2860:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
2861:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2862:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2863:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectGating();
2864:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2865:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_G
2866:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
2867:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2868:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE
2869:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2870:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
2871:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= (uint32_t) (~((uint32_t)VADC_G_ASMR_ENGT_Msk));
2872:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
2873:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)((uint32_t)mode_sel << VADC_G_ASMR_ENGT_Pos);
2874:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
2875:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2876:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2877:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2878:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
2879:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
2880:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2881:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2882:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
2883:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2884:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2885:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2886:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2887:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * sequence. Every request source event will cause a load event to occur. A call to this API would 
2888:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2889:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2890:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2891:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableContinuousMode()<BR>
2892:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2893:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2894:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
2895:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2896:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_SCAN_Msk;
2897:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
2898:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2899:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2900:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2901:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
2902:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
2903:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2904:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2905:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
2906:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2907:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2908:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2909:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2910:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this feature the Autoscan mode of operations is disabled. A call to this A
2911:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2912:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2913:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2914:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableContinuousMode()<BR>
2915:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2916:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2917:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
2918:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2919:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_SCAN_Msk);
2920:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
2921:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2922:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2923:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2924:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
2925:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
2926:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2927:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2928:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
2929:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
2930:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the s
2931:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxASMR.LD
2932:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2933:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2934:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  None.
2935:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2936:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
2937:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
2938:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
2939:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_LDEV_Msk;
2940:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
2941:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2942:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2943:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2944:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
2945:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
2946:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2947:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2948:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing scan sequence conversion.<BR>\n
2949:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
2950:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
2951:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
2952:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxASMR, GxASCTRL, GxARBPR to achieve the sequen
2953:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2954:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2955:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  None.
2956:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2957:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr);
2958:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2959:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2960:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2961:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel meant to be added to scan sequence
2962:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
2963:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
2964:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
2965:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2966:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2967:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the scan sequence.<BR>\n
2968:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the scan request source. This will be added to
2969:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
2970:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2971:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2972:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2973:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddMultipleChannels()<BR>
2974:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
2975:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddChannelToSequence(XMC_VADC_GROUP_t *const group_ptr, con
2976:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
2977:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("VADC_GSCAN_AddSingleChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
2978:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddChannelToSequence:Wrong Channel Number", 
2979:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
2980:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL |= (uint32_t)((uint32_t)1 << ch_num);
2981:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
2982:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
2983:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
2984:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2985:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
2986:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
2987:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
2988:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the selected channels
2989:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
2990:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
2991:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
2992:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2993:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2994:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
2995:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
2996:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
2997:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2998:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
2999:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3000:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddChannelToSequence()<BR>
3001:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3002:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddMultipleChannels(XMC_VADC_GROUP_t *const group_ptr, cons
3003:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3004:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddMultipleChannels:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
3005:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL = ch_mask;
3006:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3007:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3008:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3009:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3010:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
3011:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3012:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3013:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
3014:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3015:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3016:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending for conversion.<BR>\n
3017:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
3018:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3019:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
3020:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (GxASPND).
3021:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3022:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3023:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanGetNumChannelsPending()<BR>
3024:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3025:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsChannelPending(XMC_VADC_GROUP_t *const group_ptr, const u
3026:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3027:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3028:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
3029:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_C
3030:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3031:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   return( (bool)((uint32_t)(group_ptr->ASPND >> ch_num) & 1U));
3032:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3033:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3034:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3035:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param  group_ptr     Constant pointer to the VADC group
3036:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return  <BR>
3037:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
3038:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to 0x8]
3039:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3040:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3041:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Returns the total number of pending channels.<BR>\n
3042:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
3043:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3044:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
3045:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (GxASPND).
3046:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3047:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3048:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanIsChannelPending()<BR>
3049:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3050:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr);
3051:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3052:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3053:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3054:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3055:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3056:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3057:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3058:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
3059:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for scan. This will trigger a interrupt if the
3060:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
3061:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
3062:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3063:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3064:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None.
3065:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3066:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
3067:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3068:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
3069:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFLAG    |= (uint32_t)VADC_G_SEFLAG_SEV1_Msk;
3070:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3071:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3072:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3073:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3074:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3075:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3076:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3077:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3078:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the scan conversion complete request source event.<BR>\n
3079:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3080:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
3081:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3082:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3083:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanTriggerReqSrcEvent()<BR>
3084:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3085:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanClearReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
3086:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3087:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanClearReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
3088:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFCLR |= (uint32_t)VADC_G_SEFCLR_SEV1_Msk;
3089:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3090:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3091:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3092:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3093:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3094:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3095:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3096:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3097:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3098:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3099:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the scan request source event. Will return a true
3100:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for scan. A call to this API would access the register bit field GxSEF
3101:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3102:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3103:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  None.
3104:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3105:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanGetReqSrcEventStatus(XMC_VADC_GROUP_t *const group_ptr)
3106:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3107:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GSCAN_GetRSEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
3108:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   return( (bool)(group_ptr->SEFLAG & (uint32_t)VADC_G_SEFLAG_SEV1_Msk));
3109:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3110:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3111:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3112:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
3113:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param sr    Service Request Id
3114:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3115:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3116:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3117:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3118:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Connects the scan request source event to the SR line of VADC.<BR>\n
3119:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a scan request source event. Hence to get a 
3120:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
3121:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * field GxSEVNP.SEV1NP .
3122:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3123:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3124:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  None.
3125:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3126:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
3127:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3128:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3129:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3130:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3131:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3132:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3133:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3134:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for scan request source.<BR>\n
3135:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * By using this API, the trigger signal will be activated for the scan request source. The trigger
3136:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the ASCTRL register. The Selection of a input will be done by
3137:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectTrigger(). A call to this API would configure the register bit field Gx
3138:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3139:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3140:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanDisableExternalTrigger()<BR>
3141:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3142:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
3143:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3144:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
3145:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3146:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_ENTR_Msk;
3147:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3148:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3149:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3150:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3151:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3152:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3153:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3154:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3155:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for scan request source.<BR>
3156:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the scan request source.
3157:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the scan request source. If any configuration were
3158:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in GxASCTRL, it will be not be effected by this API.
3159:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENTR.
3160:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3161:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3162:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
3163:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3164:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
3165:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3166:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3167:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3168:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENTR_Msk);
3169:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3170:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3171:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3172:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3173:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param channel_num   channel number to be removed from the scan sequence.
3174:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3175:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3176:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3177:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3178:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Removes a channel from the scan sequence.<BR>
3179:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * By using this API the it is possible to remove a single channel from the conversion sequence.
3180:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * The remaining channels will continue however they are.
3181:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register GxASSEL.
3182:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3183:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3184:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  None.
3185:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3186:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
3187:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3188:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3189:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3190:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3191:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3192:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3193:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3194:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Enables the scan request source event .<BR>
3195:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be activated for the scan request source.
3196:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3197:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENSI.
3198:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3199:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3200:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableEvent(),<BR> XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()<BR>
3201:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3202:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableEvent(XMC_VADC_GROUP_t *const group_ptr)
3203:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3204:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
3205:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3206:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= ((uint32_t)VADC_G_ASMR_ENSI_Msk);
3207:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3208:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3209:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3210:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3211:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3212:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3213:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3214:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3215:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Disables the scan request source event .<BR>
3216:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be deactivated for the scan request source.
3217:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3218:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENSI.
3219:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3220:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3221:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableEvent(),<BR> XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()<BR>
3222:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3223:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableEvent(XMC_VADC_GROUP_t *const group_ptr)
3224:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3225:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
3226:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3227:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENSI_Msk);
3228:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3229:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
3230:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3231:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3232:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Pointer to the VADC module
3233:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3234:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3235:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3236:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Initializes the Background scan functional block.<BR>\n
3237:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * The BACKGROUND SCAN request source functional block converts channels of all VADC groups that ha
3238:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * been assigned as a priority channel (priority channels can be converted only by queue and scan).
3239:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * request source converts the unprioritized channels. Unprioritized channels however can also be u
3240:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * and scan. But a channel which is prioritized can not be used with background request source.
3241:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3242:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3243:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR> XMC_VADC_GROUP_BackgroundDisableArbitratio
3244:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundSelectGating()<BR>
3245:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3246:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
3247:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3248:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
3249:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3250:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group which may receive a
3251:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                  conversion request from background request source
3252:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3253:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3254:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3255:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3256:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3257:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the Background request source.<BR>\n
3258:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3259:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3260:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot. Thus this must be enabled if any conversion need to take place.
3261:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2.
3262:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3263:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3264:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
3265:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3266:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_p
3267:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3268:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_
3269:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
3270:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3271:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3272:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3273:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group which may receive a conversion request
3274:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                     from background request source
3275:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3276:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3277:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3278:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3279:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the Background request source.<BR>\n
3280:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3281:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3282:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot.A call to this API will lead to all conversions request by Backgrou
3283:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2
3284:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3285:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3286:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
3287:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3288:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_
3289:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3290:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK
3291:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 1481              	 .loc 2 3291 0
 1482 0002 394A     	 ldr r2,.L103
 1483 0004 D2F88430 	 ldr r3,[r2,#132]
 1484 0008 23F08063 	 bic r3,r3,#67108864
 1485 000c C2F88430 	 str r3,[r2,#132]
 1486              	.LVL184:
 1487 0010 02F58062 	 add r2,r2,#1024
 1488 0014 D2F88430 	 ldr r3,[r2,#132]
 1489 0018 23F08063 	 bic r3,r3,#67108864
 1490 001c C2F88430 	 str r3,[r2,#132]
 1491              	.LVL185:
 1492 0020 02F58062 	 add r2,r2,#1024
 1493 0024 D2F88430 	 ldr r3,[r2,#132]
 1494 0028 23F08063 	 bic r3,r3,#67108864
 1495 002c C2F88430 	 str r3,[r2,#132]
 1496              	.LVL186:
 1497 0030 02F58062 	 add r2,r2,#1024
 1498 0034 D2F88430 	 ldr r3,[r2,#132]
 1499 0038 23F08063 	 bic r3,r3,#67108864
 1500 003c C2F88430 	 str r3,[r2,#132]
 1501              	.LVL187:
 1502              	.LBE37:
 1503              	.LBE36:
1223:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1224:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint8_t i;
1225:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t reg;
1226:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t conv_start_mask;
1227:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   #endif
1228:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1229:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))
1230:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1231:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1232:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
1233:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1234:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
1235:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1236:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1237:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   conv_start_mask = (uint32_t) 0;
1238:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 1504              	 .loc 1 1238 0
 1505 0040 0B78     	 ldrb r3,[r1]
 1506 0042 03F00303 	 and r3,r3,#3
1239:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1240:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 1507              	 .loc 1 1240 0
 1508 0046 002B     	 cmp r3,#0
 1509 0048 0CBF     	 ite eq
 1510 004a 0027     	 moveq r7,#0
 1511 004c 4FF40067 	 movne r7,#2048
 1512              	.LVL188:
 1513 0050 264C     	 ldr r4,.L103+4
 1514 0052 04F11006 	 add r6,r4,#16
 1515              	.LVL189:
 1516              	.L98:
1241:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1242:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1243:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
1244:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1245:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     reg = g_xmc_vadc_group_array[i]->ARBPR;
 1517              	 .loc 1 1245 0 discriminator 3
 1518 0056 54F8045B 	 ldr r5,[r4],#4
 1519 005a D5F88430 	 ldr r3,[r5,#132]
 1520              	.LVL190:
1246:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1247:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 1521              	 .loc 1 1247 0 discriminator 3
 1522 005e 23F44072 	 bic r2,r3,#768
 1523              	.LVL191:
1248:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1249:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     /* Program the priority of the request source */
1250:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 1524              	 .loc 1 1250 0 discriminator 3
 1525 0062 0B78     	 ldrb r3,[r1]
 1526 0064 C3F38103 	 ubfx r3,r3,#2,#2
 1527 0068 42EA0323 	 orr r3,r2,r3,lsl#8
 1528              	.LVL192:
1251:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1252:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     /* Program the start mode */
1253:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     reg |= conv_start_mask;
 1529              	 .loc 1 1253 0 discriminator 3
 1530 006c 3B43     	 orrs r3,r3,r7
 1531              	.LVL193:
1254:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1255:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     g_xmc_vadc_group_array[i]->ARBPR = reg;
 1532              	 .loc 1 1255 0 discriminator 3
 1533 006e C5F88430 	 str r3,[r5,#132]
1243:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 1534              	 .loc 1 1243 0 discriminator 3
 1535 0072 B442     	 cmp r4,r6
 1536 0074 EFD1     	 bne .L98
1256:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1257:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1258:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   #endif
1259:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1260:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* program BRSCTRL register */
1261:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VAD
 1537              	 .loc 1 1261 0
 1538 0076 4B68     	 ldr r3,[r1,#4]
 1539              	.LVL194:
 1540 0078 43F40003 	 orr r3,r3,#8388608
 1541 007c 43F40043 	 orr r3,r3,#32768
 1542 0080 C0F80032 	 str r3,[r0,#512]
 1543              	.LVL195:
1262:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1263:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* program BRSMR register */
1264:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << V
 1544              	 .loc 1 1264 0
 1545 0084 8B68     	 ldr r3,[r1,#8]
 1546 0086 43F00103 	 orr r3,r3,#1
 1547 008a C0F80432 	 str r3,[r0,#516]
1265:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1266:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1267:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 1548              	 .loc 1 1267 0
 1549 008e 0B78     	 ldrb r3,[r1]
 1550 0090 03F00303 	 and r3,r3,#3
 1551 0094 022B     	 cmp r3,#2
 1552 0096 05D1     	 bne .L99
1268:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1269:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 1553              	 .loc 1 1269 0
 1554 0098 D0F80432 	 ldr r3,[r0,#516]
 1555 009c 43F48033 	 orr r3,r3,#65536
 1556 00a0 C0F80432 	 str r3,[r0,#516]
 1557              	.L99:
 1558              	.LVL196:
 1559              	.LBB38:
 1560              	.LBB39:
3269:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
 1561              	 .loc 2 3269 0
 1562 00a4 104A     	 ldr r2,.L103
 1563 00a6 D2F88430 	 ldr r3,[r2,#132]
 1564 00aa 43F08063 	 orr r3,r3,#67108864
 1565 00ae C2F88430 	 str r3,[r2,#132]
 1566              	.LVL197:
 1567 00b2 02F58062 	 add r2,r2,#1024
 1568 00b6 D2F88430 	 ldr r3,[r2,#132]
 1569 00ba 43F08063 	 orr r3,r3,#67108864
 1570 00be C2F88430 	 str r3,[r2,#132]
 1571              	.LVL198:
 1572 00c2 02F58062 	 add r2,r2,#1024
 1573 00c6 D2F88430 	 ldr r3,[r2,#132]
 1574 00ca 43F08063 	 orr r3,r3,#67108864
 1575 00ce C2F88430 	 str r3,[r2,#132]
 1576              	.LVL199:
 1577 00d2 02F58062 	 add r2,r2,#1024
 1578 00d6 D2F88430 	 ldr r3,[r2,#132]
 1579 00da 43F08063 	 orr r3,r3,#67108864
 1580 00de C2F88430 	 str r3,[r2,#132]
 1581              	.LVL200:
 1582              	.LBE39:
 1583              	.LBE38:
1270:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1271:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
1272:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1273:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1274:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
1275:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1276:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
1277:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1278:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   #endif
1279:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1280:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 1584              	 .loc 1 1280 0
 1585 00e2 F0BC     	 pop {r4,r5,r6,r7}
 1586              	.LCFI12:
 1587              	 .cfi_restore 7
 1588              	 .cfi_restore 6
 1589              	 .cfi_restore 5
 1590              	 .cfi_restore 4
 1591              	 .cfi_def_cfa_offset 0
 1592              	.LVL201:
 1593 00e4 7047     	 bx lr
 1594              	.L104:
 1595 00e6 00BF     	 .align 2
 1596              	.L103:
 1597 00e8 00440040 	 .word 1073759232
 1598 00ec 00000000 	 .word .LANCHOR0
 1599              	 .cfi_endproc
 1600              	.LFE290:
 1602              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger,"ax",%progbits
 1603              	 .align 2
 1604              	 .global XMC_VADC_GLOBAL_BackgroundSelectTrigger
 1605              	 .thumb
 1606              	 .thumb_func
 1608              	XMC_VADC_GLOBAL_BackgroundSelectTrigger:
 1609              	.LFB291:
1281:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1282:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger for background scan request source */
1283:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
1284:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 1610              	 .loc 1 1284 0
 1611              	 .cfi_startproc
 1612              	 
 1613              	 
 1614              	 
 1615              	.LVL202:
1285:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t scanctrl;
1286:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1287:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("VADC_BCKGND_SelectTriggerInput:Wrong Module Pointer", (global_ptr == VADC))
1288:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTrigger:Wrong Trigger Port", ((input_num)< XMC_VADC_N
1289:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1290:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1291:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   scanctrl       = global_ptr->BRSCTRL;
 1616              	 .loc 1 1291 0
 1617 0000 D0F80032 	 ldr r3,[r0,#512]
 1618              	.LVL203:
1292:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_XTWC_Msk;
1293:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   scanctrl      &= ~((uint32_t)VADC_BRSCTRL_XTSEL_Msk);
 1619              	 .loc 1 1293 0
 1620 0004 23F47063 	 bic r3,r3,#3840
 1621              	.LVL204:
 1622 0008 43F40043 	 orr r3,r3,#32768
 1623              	.LVL205:
1294:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_XTSEL_Pos);
 1624              	 .loc 1 1294 0
 1625 000c 43EA0121 	 orr r1,r3,r1,lsl#8
 1626              	.LVL206:
1295:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 1627              	 .loc 1 1295 0
 1628 0010 C0F80012 	 str r1,[r0,#512]
 1629 0014 7047     	 bx lr
 1630              	 .cfi_endproc
 1631              	.LFE291:
 1633 0016 00BF     	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge,"ax",%progbits
 1634              	 .align 2
 1635              	 .global XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
 1636              	 .thumb
 1637              	 .thumb_func
 1639              	XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:
 1640              	.LFB292:
1296:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1297:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1298:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* Select a trigger edge*/
1299:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr,
1300:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                  const XMC_VADC_TRIGGER_EDGE_t trigger_edge)
1301:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 1641              	 .loc 1 1301 0
 1642              	 .cfi_startproc
 1643              	 
 1644              	 
 1645              	 
 1646              	.LVL207:
1302:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t scanctrl;
1303:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1304:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Global Pointer", (global_ptr == VAD
1305:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Trigger Port",
1306:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****             ((trigger_edge)<= XMC_VADC_TRIGGER_EDGE_ANY))
1307:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1308:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   scanctrl      = global_ptr->BRSCTRL;
 1647              	 .loc 1 1308 0
 1648 0000 D0F80032 	 ldr r3,[r0,#512]
 1649              	.LVL208:
1309:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_BRSCTRL_XTWC_Msk;
1310:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_BRSCTRL_XTMODE_Msk);
 1650              	 .loc 1 1310 0
 1651 0004 23F4C043 	 bic r3,r3,#24576
 1652              	.LVL209:
 1653 0008 43F40043 	 orr r3,r3,#32768
 1654              	.LVL210:
1311:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_BRSCTRL_XTMODE_Pos);
 1655              	 .loc 1 1311 0
 1656 000c 43EA4131 	 orr r1,r3,r1,lsl#13
 1657              	.LVL211:
1312:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 1658              	 .loc 1 1312 0
 1659 0010 C0F80012 	 str r1,[r0,#512]
 1660 0014 7047     	 bx lr
 1661              	 .cfi_endproc
 1662              	.LFE292:
 1664 0016 00BF     	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectGating,"ax",%progbits
 1665              	 .align 2
 1666              	 .global XMC_VADC_GLOBAL_BackgroundSelectGating
 1667              	 .thumb
 1668              	 .thumb_func
 1670              	XMC_VADC_GLOBAL_BackgroundSelectGating:
 1671              	.LFB293:
1313:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1314:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1315:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1316:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger gate for background scan request source */
1317:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
1318:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 1672              	 .loc 1 1318 0
 1673              	 .cfi_startproc
 1674              	 
 1675              	 
 1676              	 
 1677              	.LVL212:
1319:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t scanctrl;
1320:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1321:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Module Pointer", (global_ptr == VADC))
1322:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Gating Port", ((input_num)< XMC_VADC_NUM
1323:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1324:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   scanctrl       = global_ptr->BRSCTRL;
 1678              	 .loc 1 1324 0
 1679 0000 D0F80032 	 ldr r3,[r0,#512]
 1680              	.LVL213:
1325:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_GTWC_Msk;
1326:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   scanctrl      &= ~((uint32_t)VADC_BRSCTRL_GTSEL_Msk);
 1681              	 .loc 1 1326 0
 1682 0004 23F47023 	 bic r3,r3,#983040
 1683              	.LVL214:
 1684 0008 43F40003 	 orr r3,r3,#8388608
 1685              	.LVL215:
1327:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_GTSEL_Pos);
 1686              	 .loc 1 1327 0
 1687 000c 43EA0141 	 orr r1,r3,r1,lsl#16
 1688              	.LVL216:
1328:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 1689              	 .loc 1 1328 0
 1690 0010 C0F80012 	 str r1,[r0,#512]
 1691 0014 7047     	 bx lr
 1692              	 .cfi_endproc
 1693              	.LFE293:
 1695 0016 00BF     	 .section .text.XMC_VADC_GLOBAL_BackgroundAbortSequence,"ax",%progbits
 1696              	 .align 2
 1697              	 .global XMC_VADC_GLOBAL_BackgroundAbortSequence
 1698              	 .thumb
 1699              	 .thumb_func
 1701              	XMC_VADC_GLOBAL_BackgroundAbortSequence:
 1702              	.LFB294:
1329:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1330:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1331:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to abort ongoing conversion of a sequence */
1332:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr)
1333:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 1703              	 .loc 1 1333 0
 1704              	 .cfi_startproc
 1705              	 
 1706              	 
 1707              	 
 1708              	.LVL217:
 1709 0000 F0B4     	 push {r4,r5,r6,r7}
 1710              	.LCFI13:
 1711              	 .cfi_def_cfa_offset 16
 1712              	 .cfi_offset 4,-16
 1713              	 .cfi_offset 5,-12
 1714              	 .cfi_offset 6,-8
 1715              	 .cfi_offset 7,-4
 1716 0002 82B0     	 sub sp,sp,#8
 1717              	.LCFI14:
 1718              	 .cfi_def_cfa_offset 24
1334:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t brsctrl;
1335:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1336:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t i;
1337:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint8_t grp_asen2_flag[XMC_VADC_MAXIMUM_NUM_GROUPS];
1338:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
1339:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAbortSequence:Wrong Module Pointer", (global_ptr == VADC))
1340:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1341:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* To disable trigger and gating before abort*/
1342:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   brsctrl = global_ptr->BRSCTRL;
 1719              	 .loc 1 1342 0
 1720 0004 D0F80062 	 ldr r6,[r0,#512]
 1721              	.LVL218:
1343:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1344:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->BRSCTRL =(0U | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 1722              	 .loc 1 1344 0
 1723 0008 1B4B     	 ldr r3,.L115
 1724 000a C0F80032 	 str r3,[r0,#512]
 1725              	.LVL219:
 1726 000e 1B49     	 ldr r1,.L115+4
 1727 0010 01AC     	 add r4,sp,#4
 1728 0012 01F11007 	 add r7,r1,#16
 1729 0016 2546     	 mov r5,r4
 1730              	.LVL220:
 1731              	.L109:
1345:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1346:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Disable Background Request source */
1347:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1348:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1349:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
1350:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1351:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     grp_asen2_flag[i] = (uint8_t)(g_xmc_vadc_group_array[i]->ARBPR >> VADC_G_ARBPR_ASEN2_Pos);
 1732              	 .loc 1 1351 0 discriminator 3
 1733 0018 51F8043B 	 ldr r3,[r1],#4
 1734 001c D3F88420 	 ldr r2,[r3,#132]
 1735 0020 920E     	 lsrs r2,r2,#26
 1736 0022 05F8012B 	 strb r2,[r5],#1
 1737              	.LVL221:
 1738              	.LBB40:
 1739              	.LBB41:
 1740              	 .loc 2 3291 0 discriminator 3
 1741 0026 D3F88420 	 ldr r2,[r3,#132]
 1742 002a 22F08062 	 bic r2,r2,#67108864
 1743 002e C3F88420 	 str r2,[r3,#132]
 1744              	.LVL222:
 1745              	.LBE41:
 1746              	.LBE40:
1349:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 1747              	 .loc 1 1349 0 discriminator 3
 1748 0032 B942     	 cmp r1,r7
 1749 0034 F0D1     	 bne .L109
1352:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
1353:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1354:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
1355:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1356:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Abort the ongoing sequence */
1357:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_CLRPND_Msk;
 1750              	 .loc 1 1357 0
 1751 0036 D0F80432 	 ldr r3,[r0,#516]
 1752              	.LVL223:
 1753 003a 43F48073 	 orr r3,r3,#256
 1754 003e C0F80432 	 str r3,[r0,#516]
 1755              	.LVL224:
1358:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1359:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1360:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Enable Background Request source */
1361:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 1756              	 .loc 1 1361 0
 1757 0042 0023     	 movs r3,#0
1362:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1363:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     if ((uint8_t)1 == grp_asen2_flag[i])
1364:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     {
1365:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t*)g_xmc_vadc_group_array[i]);
 1758              	 .loc 1 1365 0
 1759 0044 0D4D     	 ldr r5,.L115+4
 1760              	.LVL225:
 1761              	.L111:
1363:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     {
 1762              	 .loc 1 1363 0
 1763 0046 14F8012B 	 ldrb r2,[r4],#1
 1764 004a 012A     	 cmp r2,#1
 1765 004c 07D1     	 bne .L110
 1766              	 .loc 1 1365 0
 1767 004e 55F82310 	 ldr r1,[r5,r3,lsl#2]
 1768              	.LVL226:
 1769              	.LBB42:
 1770              	.LBB43:
3269:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
 1771              	 .loc 2 3269 0
 1772 0052 D1F88420 	 ldr r2,[r1,#132]
 1773 0056 42F08062 	 orr r2,r2,#67108864
 1774 005a C1F88420 	 str r2,[r1,#132]
 1775              	.LVL227:
 1776              	.L110:
 1777              	.LBE43:
 1778              	.LBE42:
1361:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 1779              	 .loc 1 1361 0 discriminator 2
 1780 005e 0133     	 adds r3,r3,#1
 1781              	.LVL228:
 1782 0060 042B     	 cmp r3,#4
 1783 0062 F0D1     	 bne .L111
1366:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     }
1367:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1368:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
1369:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1370:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Re-enable any disabled trigger and gating*/
1371:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   global_ptr->BRSCTRL =(brsctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk
 1784              	 .loc 1 1371 0
 1785 0064 46F40003 	 orr r3,r6,#8388608
 1786              	.LVL229:
 1787 0068 43F40043 	 orr r3,r3,#32768
 1788 006c C0F80032 	 str r3,[r0,#512]
1372:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 1789              	 .loc 1 1372 0
 1790 0070 02B0     	 add sp,sp,#8
 1791              	.LCFI15:
 1792              	 .cfi_def_cfa_offset 16
 1793              	 
 1794 0072 F0BC     	 pop {r4,r5,r6,r7}
 1795              	.LCFI16:
 1796              	 .cfi_restore 7
 1797              	 .cfi_restore 6
 1798              	 .cfi_restore 5
 1799              	 .cfi_restore 4
 1800              	 .cfi_def_cfa_offset 0
 1801              	.LVL230:
 1802 0074 7047     	 bx lr
 1803              	.L116:
 1804 0076 00BF     	 .align 2
 1805              	.L115:
 1806 0078 00808000 	 .word 8421376
 1807 007c 00000000 	 .word .LANCHOR0
 1808              	 .cfi_endproc
 1809              	.LFE294:
 1811              	 .section .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending,"ax",%progbits
 1812              	 .align 2
 1813              	 .global XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
 1814              	 .thumb
 1815              	 .thumb_func
 1817              	XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:
 1818              	.LFB295:
1373:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1374:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to determine how many channels are awaiting conversion */
1375:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr)
1376:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 1819              	 .loc 1 1376 0
 1820              	 .cfi_startproc
 1821              	 
 1822              	 
 1823              	 
 1824              	.LVL231:
 1825 0000 30B4     	 push {r4,r5}
 1826              	.LCFI17:
 1827              	 .cfi_def_cfa_offset 8
 1828              	 .cfi_offset 4,-8
 1829              	 .cfi_offset 5,-4
 1830              	.LVL232:
1377:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t reg;
1378:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t i;
1379:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t j;
1380:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t count;
1381:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1382:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:Wrong Module Pointer", (global_ptr ==
1383:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1384:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   count = 0U;
 1831              	 .loc 1 1384 0
 1832 0002 0021     	 movs r1,#0
1385:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1386:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Loop through all groups and find out who is awaiting conversion */
1387:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   for(i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 1833              	 .loc 1 1387 0
 1834 0004 0C46     	 mov r4,r1
1388:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1389:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     if (global_ptr->BRSSEL[i])
1390:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     {
1391:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       reg = global_ptr->BRSPND[i];
 1835              	 .loc 1 1391 0
 1836 0006 0825     	 movs r5,#8
 1837              	.LVL233:
 1838              	.L121:
 1839 0008 00EB8403 	 add r3,r0,r4,lsl#2
1389:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     {
 1840              	 .loc 1 1389 0
 1841 000c D3F88021 	 ldr r2,[r3,#384]
 1842 0010 4AB1     	 cbz r2,.L118
 1843              	 .loc 1 1391 0
 1844 0012 D3F8C021 	 ldr r2,[r3,#448]
 1845              	.LVL234:
 1846 0016 2B46     	 mov r3,r5
 1847              	.LVL235:
 1848              	.L120:
1392:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1393:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       for(j=0U;j<XMC_VADC_NUM_CHANNELS_PER_GROUP;j++)
1394:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       {
1395:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****         if (reg & 1U)
 1849              	 .loc 1 1395 0
 1850 0018 12F0010F 	 tst r2,#1
1396:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****         {
1397:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****           count++;
 1851              	 .loc 1 1397 0
 1852 001c 18BF     	 it ne
 1853 001e 0131     	 addne r1,r1,#1
 1854              	.LVL236:
1398:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****         }
1399:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1400:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****         reg = reg >> 1U;
 1855              	 .loc 1 1400 0
 1856 0020 5208     	 lsrs r2,r2,#1
 1857              	.LVL237:
1393:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       {
 1858              	 .loc 1 1393 0
 1859 0022 013B     	 subs r3,r3,#1
 1860              	.LVL238:
 1861 0024 F8D1     	 bne .L120
 1862              	.LVL239:
 1863              	.L118:
1387:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 1864              	 .loc 1 1387 0 discriminator 2
 1865 0026 0134     	 adds r4,r4,#1
 1866              	.LVL240:
 1867 0028 042C     	 cmp r4,#4
 1868 002a EDD1     	 bne .L121
1401:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       }
1402:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     }
1403:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1404:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1405:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   return count;
1406:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 1869              	 .loc 1 1406 0
 1870 002c 0846     	 mov r0,r1
 1871              	.LVL241:
 1872 002e 30BC     	 pop {r4,r5}
 1873              	.LCFI18:
 1874              	 .cfi_restore 5
 1875              	 .cfi_restore 4
 1876              	 .cfi_def_cfa_offset 0
 1877              	.LVL242:
 1878 0030 7047     	 bx lr
 1879              	 .cfi_endproc
 1880              	.LFE295:
 1882 0032 00BF     	 .section .text.XMC_VADC_GROUP_QueueInit,"ax",%progbits
 1883              	 .align 2
 1884              	 .global XMC_VADC_GROUP_QueueInit
 1885              	 .thumb
 1886              	 .thumb_func
 1888              	XMC_VADC_GROUP_QueueInit:
 1889              	.LFB296:
1407:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1408:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)  
1409:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to initialize queue request source */
1410:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
1411:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 1890              	 .loc 1 1411 0
 1891              	 .cfi_startproc
 1892              	 
 1893              	 
 1894              	 
 1895              	.LVL243:
 1896 0000 10B4     	 push {r4}
 1897              	.LCFI19:
 1898              	 .cfi_def_cfa_offset 4
 1899              	 .cfi_offset 4,-4
 1900              	.LVL244:
 1901              	.LBB44:
 1902              	.LBB45:
3292:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3293:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #endif
3294:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3295:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3296:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3297:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3298:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_TRIGGER_INPUT_SELECT_t
3299:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3300:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3301:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3302:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3303:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for Background request source.<BR>\n
3304:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3305:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3306:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3307:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3308:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTSEL.
3309:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3310:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3311:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3312:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3313:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
3314:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3315:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3316:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3317:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3318:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Select the trigger edge
3319:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3320:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3321:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3322:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3323:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Select Trigger edge for Background request source.<BR>\n
3324:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3325:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible values for the trigger 
3326:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3327:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTMODE.
3328:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3329:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3330:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3331:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3332:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
3333:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3334:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3335:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3336:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Module input signal meant to be selected as gating input
3337:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_GATE_INPUT_SELECT_t
3338:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3339:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3340:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3341:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3342:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for Background request source.<BR>\n
3343:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3344:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the Background request so
3345:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxBRSMR.ENGT has to be confi
3346:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field BRSC
3347:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3348:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3349:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR>
3350:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3351:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
3352:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3353:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3354:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3355:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the background scan request source
3356:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3357:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3358:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3359:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3360:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of background request source.<BR>\n
3361:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3362:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3363:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3364:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENGT.
3365:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3366:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3367:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectGating();
3368:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3369:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundSetGatingMode(XMC_VADC_GLOBAL_t *const global_ptr,
3370:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                             XMC_VADC_GATEMODE_t mode_sel)
3371:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3372:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong Module Pointer", (global_ptr == VADC))
3373:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_G
3374:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3375:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3376:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= (uint32_t)(~((uint32_t)VADC_BRSMR_ENGT_Msk));
3377:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   /* Configure the new gating mode*/
3378:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)((uint32_t)mode_sel << VADC_BRSMR_ENGT_Pos);
3379:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3380:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3381:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3382:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3383:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3384:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3385:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3386:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3387:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3388:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
3389:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3390:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * request is needed. Using autoscan (continuous conversion)feature it is possible to start the con
3391:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * once and allow the sequence to repeat without any further triggers. Once all channels belonging 
3392:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * request source have been converted, a request source completion event is generated. Generation o
3393:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * can restart the Background configure sequence. Every request source event will cause a load even
3394:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would access the register bit field BRSMR.SCAN.
3395:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3396:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3397:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableContinuousMode()<BR>
3398:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3399:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableContinuousMode(XMC_VADC_GLOBAL_t *const global
3400:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3401:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableContinuousMode:Wrong Module Pointer", (global_ptr == 
3402:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_SCAN_Msk;
3403:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3404:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3405:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3406:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3407:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3408:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3409:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3410:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3411:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
3412:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3413:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
3414:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a Background req
3415:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
3416:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this API the Autoscan mode of operations is disabled. A call to this API w
3417:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * register bit field BRSMR.SCAN.
3418:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3419:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3420:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableContinuousMode()<BR>
3421:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3422:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableContinuousMode(XMC_VADC_GLOBAL_t *const globa
3423:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3424:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableContinuousMode:Wrong Module Pointer", (global_ptr ==
3425:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_SCAN_Msk);
3426:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3427:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3428:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3429:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3430:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3431:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3432:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3433:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3434:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
3435:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3436:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the b
3437:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * has already been filled up with entries. A call to this API would set the register bit field BRS
3438:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3439:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3440:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  None.
3441:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3442:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_pt
3443:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3444:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VAD
3445:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
3446:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3447:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3448:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3449:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3450:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3451:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3452:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3453:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3454:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing background scan conversion(sequence).<BR>\n
3455:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
3456:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
3457:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
3458:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers BRSMR, BRSCTRL, GxARBPR(if group is available) 
3459:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * current scan sequence.
3460:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3461:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3462:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  None.
3463:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3464:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr);
3465:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3466:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3467:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3468:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3469:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   Request source
3470:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3471:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3472:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3473:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3474:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3475:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3476:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the background scan sequence.<BR>\n
3477:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3478:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3479:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3480:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3481:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3482:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
3483:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3484:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global
3485:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                                     const uint32_t grp_num,
3486:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                                     const uint32_t ch_num)
3487:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3488:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3489:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_V
3490:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3491:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3492:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3493:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
3494:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3495:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3496:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3497:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3498:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3499:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3500:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3501:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3502:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3503:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3504:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3505:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3506:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3507:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3508:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
3509:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3510:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3511:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3512:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3513:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3514:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3515:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3516:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndAddMultipleChannels(XMC_VADC_GLOBAL_t *const global_ptr
3517:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3518:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t ch_mask)
3519:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3520:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3521:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3522:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= ch_mask;
3523:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3524:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3525:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3526:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3527:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3528:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   Request source
3529:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3530:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3531:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3532:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3533:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3534:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3535:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Removes a channel to the background scan sequence.<BR>\n
3536:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3537:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3538:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3539:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3540:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3541:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3542:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3543:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundRemoveChannelFromSequence(XMC_VADC_GLOBAL_t *const g
3544:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                                          const uint32_t grp_num,
3545:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                                          const uint32_t ch_num)
3546:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3547:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3548:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_V
3549:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3550:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3551:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3552:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] &= (uint32_t)~((uint32_t)1 << ch_num);
3553:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3554:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3555:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3556:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3557:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3558:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3559:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3560:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3561:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3562:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3563:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3564:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3565:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3566:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3567:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Removes multiple channels to the scan sequence.<BR>\n
3568:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3569:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3570:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3571:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3572:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3573:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3574:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3575:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndRemoveMultipleChannels(XMC_VADC_GLOBAL_t *const global_
3576:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                                    const uint32_t grp_num,
3577:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                                    const uint32_t ch_mask)
3578:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3579:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3580:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3581:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] &= (uint32_t)~ch_mask;
3582:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3583:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3584:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3585:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3586:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3587:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
3588:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3589:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3590:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
3591:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3592:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3593:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending.<BR>\n
3594:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
3595:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3596:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
3597:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (BRSPND[\b grp_num]).
3598:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3599:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3600:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending()<BR>
3601:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3602:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundIsChannelPending(XMC_VADC_GLOBAL_t *const global_ptr
3603:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3604:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t ch_num)
3605:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3606:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Module Pointer", (global_ptr == VADC
3607:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Group Number",   ((grp_num) < XMC_VA
3608:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Channel Number",
3609:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3610:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3611:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   return( (bool)(global_ptr->BRSPND[grp_num] & (uint32_t)((uint32_t)1 << ch_num)));
3612:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3613:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3614:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3615:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3616:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   * @return  <BR>
3617:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
3618:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to (0x8*number of groups)]
3619:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3620:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3621:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Returns the number of pending channels.<BR>\n
3622:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
3623:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3624:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
3625:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (BRSPND[\b grp_num]).
3626:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3627:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3628:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundIsChannelPending()<BR>
3629:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3630:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr);
3631:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3632:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3633:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3634:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3635:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3636:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3637:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3638:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
3639:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for background scan. This will trigger a interrupt if
3640:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
3641:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB.
3642:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3643:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3644:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * None.
3645:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3646:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent(XMC_VADC_GLOBAL_t *const global_p
3647:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3648:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent:Wrong Module Pointer", (global_ptr == VA
3649:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk;
3650:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3651:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3652:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3653:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3654:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3655:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3656:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3657:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3658:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the background scan conversion complete request source event.<BR>\n
3659:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3660:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB
3661:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3662:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3663:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent()<BR>
3664:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3665:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent(XMC_VADC_GLOBAL_t *const global_ptr
3666:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3667:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent:Wrong Module Pointer", (global_ptr == VADC
3668:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLBCLR_Msk;
3669:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3670:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3671:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3672:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3673:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3674:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3675:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3676:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3677:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3678:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3679:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the background scan request source event. Will return a true
3680:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for background scan. A call to this API would configure the register
3681:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * bit field GLOBEFLAG.SEVGLB.
3682:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3683:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3684:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  None.
3685:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3686:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus(XMC_VADC_GLOBAL_t *const global
3687:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3688:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus:Wrong Module Pointer", (global_ptr == 
3689:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   return((bool)(global_ptr->GLOBEFLAG & (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk));
3690:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3691:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3692:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3693:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3694:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3695:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3696:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3697:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3698:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for background scan request source.<BR>\n
3699:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be activated for the scan request source. The trigger signal 
3700:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the BRSCTRL register. The Selection of a input will be done by
3701:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectTrigger(). A call to this API would configure the register bit f
3702:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3703:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3704:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(
3705:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3706:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger(XMC_VADC_GLOBAL_t *const globa
3707:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3708:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger:Wrong Module Pointer", (global_ptr ==
3709:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3710:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_ENTR_Msk;
3711:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3712:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3713:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3714:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3715:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3716:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3717:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3718:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3719:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for background scan request source.<BR>
3720:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the background scan request source.
3721:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the background scan request source. If any configu
3722:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in BRSCTRL will be not be effected. A call to this API would configu
3723:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * bit field BRSMR.ENTR.
3724:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3725:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><br>
3726:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<BR>
3727:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3728:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(XMC_VADC_GLOBAL_t *const glob
3729:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3730:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger:Wrong Module Pointer", (global_ptr =
3731:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3732:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENTR_Msk);
3733:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3734:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3735:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3736:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3737:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3738:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3739:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3740:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3741:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Enables the background scan request source event .<BR>
3742:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be activated for the background scan request sou
3743:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3744:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENSI.
3745:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3746:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3747:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableEvent(),<BR> XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptN
3748:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3749:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableEvent(XMC_VADC_GLOBAL_t *const global_ptr)
3750:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3751:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableEvent:Wrong Module Pointer", (global_ptr == VADC))
3752:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3753:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= ((uint32_t)VADC_BRSMR_ENSI_Msk);
3754:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3755:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3756:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3757:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr     Pointer to the VADC module
3758:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3759:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3760:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3761:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3762:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Disables the background scan request source event .<BR>
3763:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be deactivated for the background scan request s
3764:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3765:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENSI.
3766:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3767:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3768:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableEvent(),<BR> XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNo
3769:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3770:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableEvent(XMC_VADC_GLOBAL_t *const global_ptr)
3771:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3772:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableEvent:Wrong Module Pointer", (global_ptr == VADC))
3773:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3774:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENSI_Msk);
3775:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3776:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3777:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)
3778:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3779:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
3780:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3781:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3782:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3783:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3784:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3785:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Initializes VADC QUEUE functional block.<BR>\n
3786:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * The QUEUE request source functional block converts channels stored in a queue. The first channel
3787:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * queue is converted first. A channel once converted, can be placed back into the queue if desired
3788:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_QueueEnable
3789:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
3790:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_QueueDisableArb
3791:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxQCTRL0, GxQMR0 to configure the queu
3792:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * source.
3793:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3794:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3795:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR> XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR
3796:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR> XMC_VADC_GROUP_QueueSelectGating()<BR>
3797:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3798:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
3799:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3800:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3801:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3802:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3803:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3804:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3805:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3806:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the queue request source.<BR>\n
3807:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3808:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3809:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. Thus this must be enabled if any conversion need to take place.
3810:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3811:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3812:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3813:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
3814:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3815:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3816:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3817:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3818:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
3819:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3820:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3821:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3822:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3823:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3824:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3825:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3826:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3827:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the queue request source.<BR>\n
3828:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3829:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3830:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * to the queue slot.A call to this API will lead to all conversions request by queue to be blocked
3831:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3832:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3833:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3834:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
3835:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3836:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3837:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3838:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
3839:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
 1903              	 .loc 2 3839 0
 1904 0002 D0F88430 	 ldr r3,[r0,#132]
 1905 0006 23F08073 	 bic r3,r3,#16777216
 1906 000a C0F88430 	 str r3,[r0,#132]
 1907              	.LBE45:
 1908              	.LBE44:
1412:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t          reg;
1413:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1414:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1415:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1416:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Disable arbitration slot of the queue request source */
1417:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
1418:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1419:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   reg = group_ptr->ARBPR;
 1909              	 .loc 1 1419 0
 1910 000e D0F88430 	 ldr r3,[r0,#132]
 1911              	.LVL245:
1420:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1421:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Request Source priority */
1422:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
 1912              	 .loc 1 1422 0
 1913 0012 23F00303 	 bic r3,r3,#3
 1914              	.LVL246:
1423:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
 1915              	 .loc 1 1423 0
 1916 0016 0A78     	 ldrb r2,[r1]
 1917 0018 C2F38104 	 ubfx r4,r2,#2,#2
 1918 001c 2343     	 orrs r3,r3,r4
 1919              	.LVL247:
1424:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1425:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Conversion Start mode */
1426:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 1920              	 .loc 1 1426 0
 1921 001e 12F0030F 	 tst r2,#3
1427:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1428:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
 1922              	 .loc 1 1428 0
 1923 0022 18BF     	 it ne
 1924 0024 43F00803 	 orrne r3,r3,#8
 1925              	.LVL248:
1429:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1430:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1431:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->ARBPR = reg;
 1926              	 .loc 1 1431 0
 1927 0028 C0F88430 	 str r3,[r0,#132]
1432:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1433:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1434:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->QCTRL0 = (uint32_t)((config->qctrl0)|(uint32_t)(VADC_G_QCTRL0_XTWC_Msk)|
 1928              	 .loc 1 1434 0
 1929 002c 4B68     	 ldr r3,[r1,#4]
 1930              	.LVL249:
 1931 002e 43F08023 	 orr r3,r3,#-2147450880
 1932 0032 43F40003 	 orr r3,r3,#8388608
 1933 0036 C0F80031 	 str r3,[r0,#256]
 1934              	.LVL250:
1435:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                     (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
1436:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                     (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));
1437:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1438:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Gating mode */
1439:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VA
 1935              	 .loc 1 1439 0
 1936 003a 8B68     	 ldr r3,[r1,#8]
 1937 003c 43F00103 	 orr r3,r3,#1
 1938 0040 C0F80431 	 str r3,[r0,#260]
1440:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1441:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode) )
 1939              	 .loc 1 1441 0
 1940 0044 0B78     	 ldrb r3,[r1]
 1941 0046 03F00303 	 and r3,r3,#3
 1942 004a 022B     	 cmp r3,#2
 1943 004c 05D1     	 bne .L127
1442:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1443:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
 1944              	 .loc 1 1443 0
 1945 004e D0F80431 	 ldr r3,[r0,#260]
 1946 0052 43F48033 	 orr r3,r3,#65536
 1947 0056 C0F80431 	 str r3,[r0,#260]
 1948              	.L127:
 1949              	.LVL251:
 1950              	.LBB46:
 1951              	.LBB47:
3818:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
 1952              	 .loc 2 3818 0
 1953 005a D0F88430 	 ldr r3,[r0,#132]
 1954 005e 43F08073 	 orr r3,r3,#16777216
 1955 0062 C0F88430 	 str r3,[r0,#132]
 1956              	.LBE47:
 1957              	.LBE46:
1444:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1445:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Enable arbitration slot for the queue request source */
1446:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);
1447:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1448:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 1958              	 .loc 1 1448 0
 1959 0066 5DF8044B 	 ldr r4,[sp],#4
 1960              	.LCFI20:
 1961              	 .cfi_restore 4
 1962              	 .cfi_def_cfa_offset 0
 1963 006a 7047     	 bx lr
 1964              	 .cfi_endproc
 1965              	.LFE296:
 1967              	 .section .text.XMC_VADC_GROUP_QueueSelectTrigger,"ax",%progbits
 1968              	 .align 2
 1969              	 .global XMC_VADC_GROUP_QueueSelectTrigger
 1970              	 .thumb
 1971              	 .thumb_func
 1973              	XMC_VADC_GROUP_QueueSelectTrigger:
 1974              	.LFB297:
1449:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1450:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to select one of the 16 possible triggers as a conversion trigger for queue request source *
1451:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr,
1452:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num)
1453:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 1975              	 .loc 1 1453 0
 1976              	 .cfi_startproc
 1977              	 
 1978              	 
 1979              	 
 1980              	.LVL252:
1454:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t    qctrl;
1455:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1456:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1457:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Trigger Port", ((input_num)< XMC_VADC_NUM_POR
1458:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1459:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1460:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Now select the conversion trigger */
1461:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 1981              	 .loc 1 1461 0
 1982 0000 D0F80031 	 ldr r3,[r0,#256]
 1983              	.LVL253:
1462:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   qctrl  |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
1463:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTSEL_Msk);
 1984              	 .loc 1 1463 0
 1985 0004 23F47063 	 bic r3,r3,#3840
 1986              	.LVL254:
 1987 0008 43F40043 	 orr r3,r3,#32768
 1988              	.LVL255:
1464:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_XTSEL_Pos);
 1989              	 .loc 1 1464 0
 1990 000c 43EA0121 	 orr r1,r3,r1,lsl#8
 1991              	.LVL256:
1465:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 1992              	 .loc 1 1465 0
 1993 0010 C0F80011 	 str r1,[r0,#256]
 1994 0014 7047     	 bx lr
 1995              	 .cfi_endproc
 1996              	.LFE297:
 1998 0016 00BF     	 .section .text.XMC_VADC_GROUP_QueueSelectTriggerEdge,"ax",%progbits
 1999              	 .align 2
 2000              	 .global XMC_VADC_GROUP_QueueSelectTriggerEdge
 2001              	 .thumb
 2002              	 .thumb_func
 2004              	XMC_VADC_GROUP_QueueSelectTriggerEdge:
 2005              	.LFB298:
1466:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1467:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1468:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* Select a trigger edge*/
1469:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
1470:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 2006              	 .loc 1 1470 0
 2007              	 .cfi_startproc
 2008              	 
 2009              	 
 2010              	 
 2011              	.LVL257:
1471:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t qctrl;
1472:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1473:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
1474:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Gating Port", ((trigger_edge)<= XMC_VADC_
1475:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1476:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Now select the gating input */
1477:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 2012              	 .loc 1 1477 0
 2013 0000 D0F80031 	 ldr r3,[r0,#256]
 2014              	.LVL258:
1478:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
1479:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTMODE_Msk);
 2015              	 .loc 1 1479 0
 2016 0004 23F4C043 	 bic r3,r3,#24576
 2017              	.LVL259:
 2018 0008 43F40043 	 orr r3,r3,#32768
 2019              	.LVL260:
1480:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)trigger_edge << VADC_G_QCTRL0_XTMODE_Pos);
 2020              	 .loc 1 1480 0
 2021 000c 43EA4131 	 orr r1,r3,r1,lsl#13
 2022              	.LVL261:
1481:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 2023              	 .loc 1 1481 0
 2024 0010 C0F80011 	 str r1,[r0,#256]
 2025 0014 7047     	 bx lr
 2026              	 .cfi_endproc
 2027              	.LFE298:
 2029 0016 00BF     	 .section .text.XMC_VADC_GROUP_QueueSelectGating,"ax",%progbits
 2030              	 .align 2
 2031              	 .global XMC_VADC_GROUP_QueueSelectGating
 2032              	 .thumb
 2033              	 .thumb_func
 2035              	XMC_VADC_GROUP_QueueSelectGating:
 2036              	.LFB299:
1482:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1483:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1484:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to select one of the 16 possible trigger gates as a trigger gating signal for queue request 
1485:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
1486:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 2037              	 .loc 1 1486 0
 2038              	 .cfi_startproc
 2039              	 
 2040              	 
 2041              	 
 2042              	.LVL262:
1487:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t qctrl;
1488:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1489:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1490:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Gating Port", ((input_num)< XMC_VADC_NUM_PORTS
1491:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1492:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Now select the gating input */
1493:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 2043              	 .loc 1 1493 0
 2044 0000 D0F80031 	 ldr r3,[r0,#256]
 2045              	.LVL263:
1494:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_GTWC_Msk;
1495:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_GTSEL_Msk);
 2046              	 .loc 1 1495 0
 2047 0004 23F47023 	 bic r3,r3,#983040
 2048              	.LVL264:
 2049 0008 43F40003 	 orr r3,r3,#8388608
 2050              	.LVL265:
1496:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_GTSEL_Pos);
 2051              	 .loc 1 1496 0
 2052 000c 43EA0141 	 orr r1,r3,r1,lsl#16
 2053              	.LVL266:
1497:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 2054              	 .loc 1 1497 0
 2055 0010 C0F80011 	 str r1,[r0,#256]
 2056 0014 7047     	 bx lr
 2057              	 .cfi_endproc
 2058              	.LFE299:
 2060 0016 00BF     	 .section .text.XMC_VADC_GROUP_QueueGetLength,"ax",%progbits
 2061              	 .align 2
 2062              	 .global XMC_VADC_GROUP_QueueGetLength
 2063              	 .thumb
 2064              	 .thumb_func
 2066              	XMC_VADC_GROUP_QueueGetLength:
 2067              	.LFB300:
1498:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1499:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1500:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to determine the number of channels in the queue (length includes the valid channel in the B
1501:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr)
1502:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 2068              	 .loc 1 1502 0
 2069              	 .cfi_startproc
 2070              	 
 2071              	 
 2072              	 
 2073              	.LVL267:
1503:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t        qsr;
1504:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t        qbur0;
1505:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t        length;
1506:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1507:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetLength:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_pt
1508:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1509:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   qsr = group_ptr->QSR0;
 2074              	 .loc 1 1509 0
 2075 0000 D0F80831 	 ldr r3,[r0,#264]
 2076              	.LVL268:
1510:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   qbur0 = group_ptr->QBUR0;
 2077              	 .loc 1 1510 0
 2078 0004 D0F81021 	 ldr r2,[r0,#272]
 2079              	.LVL269:
1511:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1512:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (qsr & (uint32_t)VADC_G_QSR0_EMPTY_Msk)
 2080              	 .loc 1 1512 0
 2081 0008 13F0200F 	 tst r3,#32
1513:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1514:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     length = 0U;
1515:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1516:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
1517:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1518:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     length = (qsr & (uint32_t)VADC_G_QSR0_FILL_Msk) + 1U;
 2082              	 .loc 1 1518 0
 2083 000c 06BF     	 itte eq
 2084 000e 03F00F00 	 andeq r0,r3,#15
 2085              	.LVL270:
 2086 0012 0130     	 addeq r0,r0,#1
 2087              	.LVL271:
1514:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 2088              	 .loc 1 1514 0
 2089 0014 0020     	 movne r0,#0
 2090              	.LVL272:
1519:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1520:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1521:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (qbur0 & (uint32_t)VADC_G_QBUR0_V_Msk )
 2091              	 .loc 1 1521 0
 2092 0016 12F4807F 	 tst r2,#256
1522:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1523:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     length++;
 2093              	 .loc 1 1523 0
 2094 001a 18BF     	 it ne
 2095 001c 0130     	 addne r0,r0,#1
 2096              	.LVL273:
1524:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1525:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1526:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   return length;
1527:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 2097              	 .loc 1 1527 0
 2098 001e 7047     	 bx lr
 2099              	 .cfi_endproc
 2100              	.LFE300:
 2102              	 .section .text.XMC_VADC_GROUP_QueueAbortSequence,"ax",%progbits
 2103              	 .align 2
 2104              	 .global XMC_VADC_GROUP_QueueAbortSequence
 2105              	 .thumb
 2106              	 .thumb_func
 2108              	XMC_VADC_GROUP_QueueAbortSequence:
 2109              	.LFB301:
1528:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1529:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to abort ongoing conversion of a channel sequence */
1530:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr)
1531:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 2110              	 .loc 1 1531 0
 2111              	 .cfi_startproc
 2112              	 
 2113              	 
 2114              	 
 2115              	.LVL274:
1532:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t qctrl0;
1533:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   bool arbitration_status;
1534:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1535:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueAbortSequence:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1536:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1537:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Disable any gating if present*/
1538:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   qctrl0 = group_ptr->QCTRL0;
 2116              	 .loc 1 1538 0
 2117 0000 D0F80021 	 ldr r2,[r0,#256]
 2118              	.LVL275:
1539:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1540:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->QCTRL0 =(0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 2119              	 .loc 1 1540 0
 2120 0004 124B     	 ldr r3,.L139
 2121 0006 C0F80031 	 str r3,[r0,#256]
1541:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_M
1542:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1543:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Disable the Arbitration 0 in the group before abort*/
1544:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 2122              	 .loc 1 1544 0
 2123 000a D0F88430 	 ldr r3,[r0,#132]
 2124 000e C3F30061 	 ubfx r1,r3,#24,#1
 2125              	.LVL276:
 2126              	.LBB48:
 2127              	.LBB49:
 2128              	 .loc 2 3839 0
 2129 0012 D0F88430 	 ldr r3,[r0,#132]
 2130 0016 23F08073 	 bic r3,r3,#16777216
 2131 001a C0F88430 	 str r3,[r0,#132]
 2132              	.LVL277:
 2133              	.LBE49:
 2134              	.LBE48:
 2135              	.LBB50:
 2136              	.LBB51:
3840:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3841:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3842:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3843:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3844:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3845:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3846:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
3847:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3848:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3849:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Returns the arbitration status of the queue request source.<BR>\n
3850:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * If the queue request source must have its conversion request considered by the arbiter, it must 
3851:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3852:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. A call to this API would return the status of the arbitration slot of queue.
3853:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
3854:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3855:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3856:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<
3857:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3858:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr
3859:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3860:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GRO
3861:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3862:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN0_Msk) >> VADC_G_ARBPR_ASEN0_Pos);
3863:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3864:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3865:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3866:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3867:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3868:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3869:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3870:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3871:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3872:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for queue request source.<BR>\n
3873:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3874:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3875:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3876:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3877:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTSEL.
3878:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3879:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3880:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3881:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3882:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, 
3883:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num);
3884:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3885:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3886:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3887:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Choice of the trigger edge
3888:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3889:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3890:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3891:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3892:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal edge for queue request source.<BR>\n
3893:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3894:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 trigger edges. This is
3895:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3896:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3897:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTMODE.
3898:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3899:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3900:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3901:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3902:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
3903:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3904:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3905:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3906:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as the gating line
3907:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3908:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3909:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3910:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3911:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for queue request source.<BR>\n
3912:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3913:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the queue request source 
3914:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxQMR0.ENGT has to be config
3915:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxQC
3916:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3917:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3918:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR>
3919:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3920:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
3921:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3922:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3923:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3924:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the queue request source
3925:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3926:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3927:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3928:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3929:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of queue request source.<BR>\n
3930:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3931:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3932:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3933:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQMR0.ENGT.
3934:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3935:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3936:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_QueueSelectGating();
3937:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3938:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_
3939:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3940:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
3941:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMOD
3942:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3943:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3944:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
3945:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
3946:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
3947:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3948:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3949:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3950:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3951:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3952:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3953:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
3954:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3955:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3956:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>
3957:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3958:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the queue unit to generate a conversion request to the analog converter. It is assumed that the 
3959:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxQMR0.TR
3960:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3961:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Note:</b><br>
3962:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * The conversion of queue entry will start immediately after the entry has been loaded into GxQINR
3963:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This happens only if the queue entry has been loaded into the register without the need for the 
3964:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * If a H/W Trigger is selected while loading the entry, the conversion will occur in one of the 2 
3965:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * <ul>
3966:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * <li> The H/W generates a trigger needed for the queue request source.
3967:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * <li> The Conversion is triggered manually by calling this API.
3968:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * </ul>
3969:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3970:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3971:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3972:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3973:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
3974:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
3975:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
3976:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_TREV_Pos);
3977:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
3978:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3979:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3980:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3981:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
3982:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    uint32_t returns the total number of channels.
3983:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *             <BR>Range: [0x0 to 0x8]
3984:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3985:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3986:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Returns the number of channels present in the queue.<BR>\n
3987:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API will return the queue buffer size. This buffer will be consisting of valid queue entrie
3988:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * will be converted when a trigger event occurs. All the entries that are loaded onto the GxQINR0 
3989:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * be added to the queue buffer. Hence if an application needs to get the number of valid queue ent
3990:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * this API would provide the interface. A call to this API would access the registers GxQBUR0, GxQ
3991:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * to determine the queue length.
3992:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
3993:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3994:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3995:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
3996:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr);
3997:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
3998:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
3999:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4000:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
4001:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
4002:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
4003:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4004:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing conversion by flushing the queue.<BR>\n
4005:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API will flush the queue buffer. Ongoing conversion of the Queue request source will
4006:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
4007:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxQCTRL0, GxQMR0, GxARBPR in order to abort
4008:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * the queue sequence.
4009:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
4010:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4011:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueFlushEntries() <BR>
4012:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
4013:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr);
4014:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
4015:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** /**
4016:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4017:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * @return
4018:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *    None
4019:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
4020:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4021:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * Flushing the queue Entry.<BR>\n
4022:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * This API will flush one entry in the queue buffer. Ongoing conversion of the Queue request sourc
4023:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
4024:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers  GxQMR0. This is a Blocking API, i.e will only 
4025:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * all the entries are removed from the queue.
4026:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *
4027:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4028:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueAbortSequence(0<BR>
4029:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****  */
4030:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueFlushEntries(XMC_VADC_GROUP_t *const group_ptr)
4031:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** {
4032:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   /* Initiate flushing of the queue */
4033:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_FLUSH_Msk;
 2137              	 .loc 2 4033 0
 2138 001e D0F80431 	 ldr r3,[r0,#260]
 2139 0022 43F48063 	 orr r3,r3,#1024
 2140 0026 C0F80431 	 str r3,[r0,#260]
 2141              	.L137:
4034:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** 
4035:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h ****   while( !((group_ptr->QSR0)& (uint32_t)VADC_G_QSR0_EMPTY_Msk))
 2142              	 .loc 2 4035 0
 2143 002a D0F80831 	 ldr r3,[r0,#264]
 2144 002e 13F0200F 	 tst r3,#32
 2145 0032 FAD0     	 beq .L137
 2146              	.LBE51:
 2147              	.LBE50:
1545:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
1546:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****    
1547:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Flush the Entries from queue*/
1548:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_VADC_GROUP_QueueFlushEntries(group_ptr);
1549:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1550:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Enable the arbitration slot 0*/
1551:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 2148              	 .loc 1 1551 0
 2149 0034 D0F88430 	 ldr r3,[r0,#132]
 2150 0038 43EA0163 	 orr r3,r3,r1,lsl#24
 2151 003c C0F88430 	 str r3,[r0,#132]
1552:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1553:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Enable any disabled gating*/
1554:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
1555:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 2152              	 .loc 1 1555 0
 2153 0040 42F08023 	 orr r3,r2,#-2147450880
 2154 0044 43F40003 	 orr r3,r3,#8388608
1554:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 2155              	 .loc 1 1554 0
 2156 0048 C0F80031 	 str r3,[r0,#256]
 2157 004c 7047     	 bx lr
 2158              	.L140:
 2159 004e 00BF     	 .align 2
 2160              	.L139:
 2161 0050 00808080 	 .word -2139062272
 2162              	 .cfi_endproc
 2163              	.LFE301:
 2165              	 .section .text.XMC_VADC_GROUP_QueueRemoveChannel,"ax",%progbits
 2166              	 .align 2
 2167              	 .global XMC_VADC_GROUP_QueueRemoveChannel
 2168              	 .thumb
 2169              	 .thumb_func
 2171              	XMC_VADC_GROUP_QueueRemoveChannel:
 2172              	.LFB302:
1556:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1557:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1558:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to abort conversion of the channel queued up next */
1559:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_QueueRemoveChannel(XMC_VADC_GROUP_t *const group_ptr)
1560:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 2173              	 .loc 1 1560 0
 2174              	 .cfi_startproc
 2175              	 
 2176              	 
 2177              	.LVL278:
 2178 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 2179              	.LCFI21:
 2180              	 .cfi_def_cfa_offset 24
 2181              	 .cfi_offset 3,-24
 2182              	 .cfi_offset 4,-20
 2183              	 .cfi_offset 5,-16
 2184              	 .cfi_offset 6,-12
 2185              	 .cfi_offset 7,-8
 2186              	 .cfi_offset 14,-4
 2187 0002 0446     	 mov r4,r0
1561:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t length_before_abort;
1562:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t length_after_abort;
1563:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t qctrl0;
1564:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   bool arbitration_status;
1565:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1566:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1567:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1568:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Disable any gating if present*/
1569:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   qctrl0= group_ptr->QCTRL0;
 2188              	 .loc 1 1569 0
 2189 0004 D0F80051 	 ldr r5,[r0,#256]
 2190              	.LVL279:
1570:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1571:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->QCTRL0 =(0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 2191              	 .loc 1 1571 0
 2192 0008 164B     	 ldr r3,.L147
 2193 000a C0F80031 	 str r3,[r0,#256]
1572:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_M
1573:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1574:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Disable the Arbitration 0 in the group before abort*/
1575:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 2194              	 .loc 1 1575 0
 2195 000e D0F88430 	 ldr r3,[r0,#132]
 2196 0012 C3F30067 	 ubfx r7,r3,#24,#1
 2197              	.LVL280:
 2198              	.LBB52:
 2199              	.LBB53:
3839:C:/Files/Projects/Git/XMCLib/inc\xmc_vadc.h **** }
 2200              	 .loc 2 3839 0
 2201 0016 D0F88430 	 ldr r3,[r0,#132]
 2202 001a 23F08073 	 bic r3,r3,#16777216
 2203 001e C0F88430 	 str r3,[r0,#132]
 2204              	.LBE53:
 2205              	.LBE52:
1576:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
1577:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1578:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   length_before_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 2206              	 .loc 1 1578 0
 2207 0022 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 2208              	.LVL281:
1579:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1580:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (length_before_abort)
 2209              	 .loc 1 1580 0
 2210 0026 80B1     	 cbz r0,.L142
 2211 0028 0646     	 mov r6,r0
1581:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1582:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     /* Remove the first entry of the queue */
1583:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_CLRV_Msk;
 2212              	 .loc 1 1583 0
 2213 002a D4F80431 	 ldr r3,[r4,#260]
 2214 002e 43F48073 	 orr r3,r3,#256
 2215 0032 C4F80431 	 str r3,[r4,#260]
1584:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1585:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 2216              	 .loc 1 1585 0
 2217 0036 2046     	 mov r0,r4
 2218              	.LVL282:
 2219 0038 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 2220              	.LVL283:
1586:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1587:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     /* Loop until a reduction in queue length is assessed */
1588:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     while(length_after_abort == length_before_abort)
 2221              	 .loc 1 1588 0
 2222 003c 8642     	 cmp r6,r0
 2223 003e 04D1     	 bne .L142
 2224              	.L144:
 2225              	.LVL284:
1589:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     {
1590:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 2226              	 .loc 1 1590 0
 2227 0040 2046     	 mov r0,r4
 2228 0042 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 2229              	.LVL285:
1588:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     {
 2230              	 .loc 1 1588 0
 2231 0046 8642     	 cmp r6,r0
 2232 0048 FAD0     	 beq .L144
 2233              	.LVL286:
 2234              	.L142:
1591:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     }
1592:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1593:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Enable the arbitration slot 0*/
1594:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 2235              	 .loc 1 1594 0
 2236 004a D4F88430 	 ldr r3,[r4,#132]
 2237 004e 43EA0763 	 orr r3,r3,r7,lsl#24
 2238 0052 C4F88430 	 str r3,[r4,#132]
1595:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1596:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Enable any disabled gating*/
1597:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
1598:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 2239              	 .loc 1 1598 0
 2240 0056 45F08023 	 orr r3,r5,#-2147450880
 2241 005a 43F40003 	 orr r3,r3,#8388608
1597:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 2242              	 .loc 1 1597 0
 2243 005e C4F80031 	 str r3,[r4,#256]
 2244 0062 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 2245              	.LVL287:
 2246              	.L148:
 2247              	 .align 2
 2248              	.L147:
 2249 0064 00808080 	 .word -2139062272
 2250              	 .cfi_endproc
 2251              	.LFE302:
 2253              	 .section .text.XMC_VADC_GROUP_QueueGetNextChannel,"ax",%progbits
 2254              	 .align 2
 2255              	 .global XMC_VADC_GROUP_QueueGetNextChannel
 2256              	 .thumb
 2257              	 .thumb_func
 2259              	XMC_VADC_GROUP_QueueGetNextChannel:
 2260              	.LFB303:
1599:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1600:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1601:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* Get details of channel meant to be converted right after the ongoing conversion */
1602:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** int32_t XMC_VADC_GROUP_QueueGetNextChannel(XMC_VADC_GROUP_t *const group_ptr)
1603:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 2261              	 .loc 1 1603 0
 2262              	 .cfi_startproc
 2263              	 
 2264              	 
 2265              	 
 2266              	.LVL288:
1604:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   int32_t ch_num;
1605:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1606:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetNextChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
1607:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1608:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /*
1609:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****    * Check if there is something in the backup stage. If not, read queue-0
1610:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****    * entry.
1611:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****    */
1612:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if ( (group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 2267              	 .loc 1 1612 0
 2268 0000 D0F81031 	 ldr r3,[r0,#272]
 2269 0004 13F4807F 	 tst r3,#256
 2270 0008 04D0     	 beq .L150
1613:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1614:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 2271              	 .loc 1 1614 0
 2272 000a D0F81001 	 ldr r0,[r0,#272]
 2273              	.LVL289:
 2274 000e 00F01F00 	 and r0,r0,#31
 2275              	.LVL290:
 2276 0012 7047     	 bx lr
 2277              	.LVL291:
 2278              	.L150:
1615:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1616:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else if ( (group_ptr->Q0R0) & (uint32_t)VADC_G_Q0R0_V_Msk)
 2279              	 .loc 1 1616 0
 2280 0014 D0F80C31 	 ldr r3,[r0,#268]
 2281 0018 13F4807F 	 tst r3,#256
1617:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1618:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->Q0R0 & (uint32_t)VADC_G_Q0R0_REQCHNR_Msk);
 2282              	 .loc 1 1618 0
 2283 001c 1ABF     	 itte ne
 2284 001e D0F80C01 	 ldrne r0,[r0,#268]
 2285              	.LVL292:
 2286 0022 00F01F00 	 andne r0,r0,#31
 2287              	.LVL293:
1619:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1620:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
1621:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1622:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     /* Nothing is pending */
1623:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     ch_num = -1;
 2288              	 .loc 1 1623 0
 2289 0026 4FF0FF30 	 moveq r0,#-1
 2290              	.LVL294:
1624:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1625:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1626:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   return ch_num;
1627:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 2291              	 .loc 1 1627 0
 2292 002a 7047     	 bx lr
 2293              	 .cfi_endproc
 2294              	.LFE303:
 2296              	 .section .text.XMC_VADC_GROUP_QueueGetInterruptedChannel,"ax",%progbits
 2297              	 .align 2
 2298              	 .global XMC_VADC_GROUP_QueueGetInterruptedChannel
 2299              	 .thumb
 2300              	 .thumb_func
 2302              	XMC_VADC_GROUP_QueueGetInterruptedChannel:
 2303              	.LFB304:
1628:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1629:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* Get the channel number of the channel whose conversion had been interrupted */
1630:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** int32_t XMC_VADC_GROUP_QueueGetInterruptedChannel(XMC_VADC_GROUP_t *const group_ptr)
1631:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 2304              	 .loc 1 1631 0
 2305              	 .cfi_startproc
 2306              	 
 2307              	 
 2308              	 
 2309              	.LVL295:
1632:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   int32_t ch_num;
1633:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1634:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetInterruptedChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
1635:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1636:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if ((group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 2310              	 .loc 1 1636 0
 2311 0000 D0F81031 	 ldr r3,[r0,#272]
 2312 0004 13F4807F 	 tst r3,#256
1637:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1638:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 2313              	 .loc 1 1638 0
 2314 0008 1ABF     	 itte ne
 2315 000a D0F81001 	 ldrne r0,[r0,#272]
 2316              	.LVL296:
 2317 000e 00F01F00 	 andne r0,r0,#31
 2318              	.LVL297:
1639:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1640:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
1641:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1642:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     /* No such channel */
1643:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     ch_num = -1;
 2319              	 .loc 1 1643 0
 2320 0012 4FF0FF30 	 moveq r0,#-1
 2321              	.LVL298:
1644:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1645:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1646:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   return ch_num;
1647:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 2322              	 .loc 1 1647 0
 2323 0016 7047     	 bx lr
 2324              	 .cfi_endproc
 2325              	.LFE304:
 2327              	 .section .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode,"ax",%progbits
 2328              	 .align 2
 2329              	 .global XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
 2330              	 .thumb
 2331              	 .thumb_func
 2333              	XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:
 2334              	.LFB305:
1648:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1649:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* Select a Service Request line for the request source event */
1650:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_V
1651:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 2335              	 .loc 1 1651 0
 2336              	 .cfi_startproc
 2337              	 
 2338              	 
 2339              	 
 2340              	.LVL299:
1652:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t sevnp;
1653:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1654:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_
1655:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC
1656:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1657:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   sevnp = group_ptr->SEVNP;
 2341              	 .loc 1 1657 0
 2342 0000 D0F8C031 	 ldr r3,[r0,#448]
 2343              	.LVL300:
1658:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1659:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV0NP_Msk);
 2344              	 .loc 1 1659 0
 2345 0004 23F00F03 	 bic r3,r3,#15
 2346              	.LVL301:
1660:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV0NP_Pos);
 2347              	 .loc 1 1660 0
 2348 0008 1943     	 orrs r1,r1,r3
 2349              	.LVL302:
1661:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1662:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->SEVNP = sevnp;
 2350              	 .loc 1 1662 0
 2351 000a C0F8C011 	 str r1,[r0,#448]
 2352 000e 7047     	 bx lr
 2353              	 .cfi_endproc
 2354              	.LFE305:
 2356              	 .section .text.XMC_VADC_GROUP_ChannelInit,"ax",%progbits
 2357              	 .align 2
 2358              	 .global XMC_VADC_GROUP_ChannelInit
 2359              	 .thumb
 2360              	 .thumb_func
 2362              	XMC_VADC_GROUP_ChannelInit:
 2363              	.LFB306:
1663:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1664:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1665:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
1666:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1667:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1668:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to initialize a channel unit */
1669:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
1670:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                         const XMC_VADC_CHANNEL_CONFIG_t *config)
1671:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 2364              	 .loc 1 1671 0
 2365              	 .cfi_startproc
 2366              	 
 2367              	 
 2368              	 
 2369              	.LVL303:
 2370 0000 30B4     	 push {r4,r5}
 2371              	.LCFI22:
 2372              	 .cfi_def_cfa_offset 8
 2373              	 .cfi_offset 4,-8
 2374              	 .cfi_offset 5,-4
 2375              	.LVL304:
1672:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t prio;
1673:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t ch_assign;
1674:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t mask;
1675:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1676:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1677:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1678:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_P
1679:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   
1680:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   prio  = (uint32_t)config->channel_priority;
1681:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1682:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Priority channel */
1683:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   ch_assign  = group_ptr->CHASS;
 2376              	 .loc 1 1683 0
 2377 0002 D0F88850 	 ldr r5,[r0,#136]
 2378              	.LVL305:
1684:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 2379              	 .loc 1 1684 0
 2380 0006 0123     	 movs r3,#1
 2381 0008 8B40     	 lsls r3,r3,r1
 2382 000a 25EA0304 	 bic r4,r5,r3
 2383              	.LVL306:
1680:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 2384              	 .loc 1 1680 0
 2385 000e 137A     	 ldrb r3,[r2,#8]
 2386              	.LVL307:
1685:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   ch_assign |= (uint32_t)(prio << ch_num);
 2387              	 .loc 1 1685 0
 2388 0010 8B40     	 lsls r3,r3,r1
 2389              	.LVL308:
 2390 0012 2343     	 orrs r3,r3,r4
 2391              	.LVL309:
1686:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->CHASS = ch_assign;
 2392              	 .loc 1 1686 0
 2393 0014 C0F88830 	 str r3,[r0,#136]
 2394              	.LVL310:
1687:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1688:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Alias channel */
1689:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (config->alias_channel >= (int32_t)0)
 2395              	 .loc 1 1689 0
 2396 0018 92F90930 	 ldrsb r3,[r2,#9]
 2397              	.LVL311:
 2398 001c 002B     	 cmp r3,#0
 2399 001e 1BDB     	 blt .L158
 2400              	.LVL312:
1690:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1691:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     mask = (uint32_t)0;
1692:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     if ((uint32_t)1 == ch_num)
 2401              	 .loc 1 1692 0
 2402 0020 0129     	 cmp r1,#1
 2403 0022 07D1     	 bne .L159
 2404              	.LVL313:
1693:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     {
1694:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       mask = VADC_G_ALIAS_ALIAS1_Pos;
1695:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 2405              	 .loc 1 1695 0
 2406 0024 D0F8B030 	 ldr r3,[r0,#176]
 2407 0028 23F4F853 	 bic r3,r3,#7936
 2408 002c C0F8B030 	 str r3,[r0,#176]
 2409              	.LVL314:
1694:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 2410              	 .loc 1 1694 0
 2411 0030 0825     	 movs r5,#8
 2412 0032 09E0     	 b .L160
 2413              	.LVL315:
 2414              	.L159:
1696:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     }
1697:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     else if ((uint32_t)0 == ch_num)
 2415              	 .loc 1 1697 0
 2416 0034 39B9     	 cbnz r1,.L161
1698:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     {
1699:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       mask = VADC_G_ALIAS_ALIAS0_Pos;
1700:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 2417              	 .loc 1 1700 0
 2418 0036 D0F8B030 	 ldr r3,[r0,#176]
 2419 003a 23F01F03 	 bic r3,r3,#31
 2420 003e C0F8B030 	 str r3,[r0,#176]
 2421              	.LVL316:
1699:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 2422              	 .loc 1 1699 0
 2423 0042 0025     	 movs r5,#0
 2424 0044 00E0     	 b .L160
 2425              	.LVL317:
 2426              	.L161:
1691:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     if ((uint32_t)1 == ch_num)
 2427              	 .loc 1 1691 0
 2428 0046 0025     	 movs r5,#0
 2429              	.LVL318:
 2430              	.L160:
1701:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     }
1702:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1703:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 2431              	 .loc 1 1703 0
 2432 0048 D0F8B040 	 ldr r4,[r0,#176]
 2433 004c 92F90930 	 ldrsb r3,[r2,#9]
 2434 0050 AB40     	 lsls r3,r3,r5
 2435 0052 2343     	 orrs r3,r3,r4
 2436 0054 C0F8B030 	 str r3,[r0,#176]
 2437              	.LVL319:
 2438              	.L158:
1704:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1705:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1706:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->BFL |= config->bfl;
 2439              	 .loc 1 1706 0
 2440 0058 D0F8C840 	 ldr r4,[r0,#200]
 2441 005c 5368     	 ldr r3,[r2,#4]
 2442 005e 2343     	 orrs r3,r3,r4
 2443 0060 C0F8C830 	 str r3,[r0,#200]
1707:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1708:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
1709:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->BFLC |= config->bflc;
1710:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** #endif
1711:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Program the CHCTR register */
1712:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = config->chctr;
 2444              	 .loc 1 1712 0
 2445 0064 1368     	 ldr r3,[r2]
 2446 0066 8031     	 adds r1,r1,#128
 2447              	.LVL320:
 2448 0068 40F82130 	 str r3,[r0,r1,lsl#2]
1713:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1714:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 2449              	 .loc 1 1714 0
 2450 006c 30BC     	 pop {r4,r5}
 2451              	.LCFI23:
 2452              	 .cfi_restore 5
 2453              	 .cfi_restore 4
 2454              	 .cfi_def_cfa_offset 0
 2455 006e 7047     	 bx lr
 2456              	 .cfi_endproc
 2457              	.LFE306:
 2459              	 .section .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds,"ax",%progbits
 2460              	 .align 2
 2461              	 .global XMC_VADC_GROUP_ChannelIsResultOutOfBounds
 2462              	 .thumb
 2463              	 .thumb_func
 2465              	XMC_VADC_GROUP_ChannelIsResultOutOfBounds:
 2466              	.LFB307:
1715:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1716:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to determine whether input to a channel has violated boundary conditions */
1717:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** bool XMC_VADC_GROUP_ChannelIsResultOutOfBounds(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch
1718:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 2467              	 .loc 1 1718 0
 2468              	 .cfi_startproc
 2469              	 
 2470              	 
 2471              	 
 2472              	.LVL321:
1719:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   bool retval;
1720:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t    chctr;
1721:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t    ceflag;
1722:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1723:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
1724:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Channel Number",
1725:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1726:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1727:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   retval = (bool)false;
1728:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /*
1729:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     Check if the Channel event is configured to be generated in the event of
1730:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     boundary violation and if affirmative, check if the channel event is set.
1731:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   */
1732:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Extract CHEVMODE for requested channel */
1733:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   chctr  = group_ptr->CHCTR[ch_num];
 2473              	 .loc 1 1733 0
 2474 0000 01F18003 	 add r3,r1,#128
 2475 0004 50F82330 	 ldr r3,[r0,r3,lsl#2]
 2476              	.LVL322:
1734:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   chctr  = (uint32_t)(chctr >> (uint32_t)VADC_G_CHCTR_CHEVMODE_Pos)& (uint32_t)0x3;
1735:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1736:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Extract CEFLAG for the requested channel */
1737:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   ceflag = group_ptr->CEFLAG;
 2477              	 .loc 1 1737 0
 2478 0008 D0F88021 	 ldr r2,[r0,#384]
 2479              	.LVL323:
1734:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   chctr  = (uint32_t)(chctr >> (uint32_t)VADC_G_CHCTR_CHEVMODE_Pos)& (uint32_t)0x3;
 2480              	 .loc 1 1734 0
 2481 000c C3F30123 	 ubfx r3,r3,#8,#2
 2482              	.LVL324:
1738:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   ceflag = ceflag & ((uint32_t)((uint32_t)1 << ch_num) );
1739:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1740:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Check what was the channel event generation criteria */
1741:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if ( (( (uint32_t)XMC_VADC_CHANNEL_EVGEN_INBOUND == chctr) \
1742:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       || ((uint32_t) XMC_VADC_CHANNEL_EVGEN_OUTBOUND == chctr)) && (ceflag) )
 2483              	 .loc 1 1742 0
 2484 0010 013B     	 subs r3,r3,#1
1741:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       || ((uint32_t) XMC_VADC_CHANNEL_EVGEN_OUTBOUND == chctr)) && (ceflag) )
 2485              	 .loc 1 1741 0
 2486 0012 012B     	 cmp r3,#1
 2487 0014 06D8     	 bhi .L165
1738:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   ceflag = ceflag & ((uint32_t)((uint32_t)1 << ch_num) );
 2488              	 .loc 1 1738 0
 2489 0016 0123     	 movs r3,#1
 2490 0018 8B40     	 lsls r3,r3,r1
 2491              	 .loc 1 1742 0
 2492 001a 1342     	 tst r3,r2
 2493 001c 14BF     	 ite ne
 2494 001e 0120     	 movne r0,#1
 2495              	.LVL325:
 2496 0020 0020     	 moveq r0,#0
 2497 0022 7047     	 bx lr
 2498              	.LVL326:
 2499              	.L165:
1727:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /*
 2500              	 .loc 1 1727 0
 2501 0024 0020     	 movs r0,#0
 2502              	.LVL327:
1743:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1744:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     retval = (bool)true;
1745:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1746:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1747:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   return retval;
1748:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 2503              	 .loc 1 1748 0
 2504 0026 7047     	 bx lr
 2505              	 .cfi_endproc
 2506              	.LFE307:
 2508              	 .section .text.XMC_VADC_GROUP_ChannelSetInputReference,"ax",%progbits
 2509              	 .align 2
 2510              	 .global XMC_VADC_GROUP_ChannelSetInputReference
 2511              	 .thumb
 2512              	 .thumb_func
 2514              	XMC_VADC_GROUP_ChannelSetInputReference:
 2515              	.LFB308:
1749:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1750:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* Set a reference voltage for conversion */
1751:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetInputReference(XMC_VADC_GROUP_t *const group_ptr,
1752:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                              const uint32_t ch_num,
1753:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                              const XMC_VADC_CHANNEL_REF_t ref)
1754:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 2516              	 .loc 1 1754 0
 2517              	 .cfi_startproc
 2518              	 
 2519              	 
 2520              	 
 2521              	.LVL328:
 2522 0000 00EB8101 	 add r1,r0,r1,lsl#2
 2523              	.LVL329:
1755:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t chctr;
1756:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1757:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Channel Number", ((ch_num) < XMC_VADC_N
1758:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Voltage Reference", ((ref)<= XMC_VADC_C
1759:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1760:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 2524              	 .loc 1 1760 0
 2525 0004 D1F80032 	 ldr r3,[r1,#512]
 2526              	.LVL330:
1761:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_REFSEL_Msk);
 2527              	 .loc 1 1761 0
 2528 0008 23F40063 	 bic r3,r3,#2048
 2529              	.LVL331:
1762:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)ref <<  VADC_G_CHCTR_REFSEL_Pos);
 2530              	 .loc 1 1762 0
 2531 000c 43EAC222 	 orr r2,r3,r2,lsl#11
 2532              	.LVL332:
1763:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1764:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 2533              	 .loc 1 1764 0
 2534 0010 C1F80022 	 str r2,[r1,#512]
 2535 0014 7047     	 bx lr
 2536              	 .cfi_endproc
 2537              	.LFE308:
 2539 0016 00BF     	 .section .text.XMC_VADC_GROUP_ChannelSetResultRegister,"ax",%progbits
 2540              	 .align 2
 2541              	 .global XMC_VADC_GROUP_ChannelSetResultRegister
 2542              	 .thumb
 2543              	 .thumb_func
 2545              	XMC_VADC_GROUP_ChannelSetResultRegister:
 2546              	.LFB309:
1765:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1766:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1767:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to select one of the available 16 registers for storing the channel result */
1768:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetResultRegister(XMC_VADC_GROUP_t *const group_ptr,
1769:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                              const uint32_t ch_num,
1770:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                              const uint32_t result_reg_num)
1771:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 2547              	 .loc 1 1771 0
 2548              	 .cfi_startproc
 2549              	 
 2550              	 
 2551              	 
 2552              	.LVL333:
 2553 0000 00EB8101 	 add r1,r0,r1,lsl#2
 2554              	.LVL334:
1772:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t chctr;
1773:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1774:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1775:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Channel Number",
1776:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1777:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Result Register",
1778:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              ((result_reg_num) < XMC_VADC_NUM_RESULT_REGISTERS))
1779:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1780:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 2555              	 .loc 1 1780 0
 2556 0004 D1F80032 	 ldr r3,[r1,#512]
 2557              	.LVL335:
1781:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_RESREG_Msk);
 2558              	 .loc 1 1781 0
 2559 0008 23F47023 	 bic r3,r3,#983040
 2560              	.LVL336:
1782:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   chctr |= (uint32_t)(result_reg_num <<  VADC_G_CHCTR_RESREG_Pos);
 2561              	 .loc 1 1782 0
 2562 000c 43EA0242 	 orr r2,r3,r2,lsl#16
 2563              	.LVL337:
1783:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1784:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 2564              	 .loc 1 1784 0
 2565 0010 C1F80022 	 str r2,[r1,#512]
 2566 0014 7047     	 bx lr
 2567              	 .cfi_endproc
 2568              	.LFE309:
 2570 0016 00BF     	 .section .text.XMC_VADC_GROUP_ChannelSetIclass,"ax",%progbits
 2571              	 .align 2
 2572              	 .global XMC_VADC_GROUP_ChannelSetIclass
 2573              	 .thumb
 2574              	 .thumb_func
 2576              	XMC_VADC_GROUP_ChannelSetIclass:
 2577              	.LFB310:
1785:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1786:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1787:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to select one of the available 4 class conversion */
1788:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetIclass(XMC_VADC_GROUP_t *const group_ptr,
1789:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                      const uint32_t ch_num,
1790:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                      const XMC_VADC_CHANNEL_CONV_t conversion_class)
1791:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 2578              	 .loc 1 1791 0
 2579              	 .cfi_startproc
 2580              	 
 2581              	 
 2582              	 
 2583              	.LVL338:
 2584 0000 00EB8101 	 add r1,r0,r1,lsl#2
 2585              	.LVL339:
1792:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1793:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t chctr;
1794:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1795:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
1796:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Channel Number",
1797:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1798:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong input class ",
1799:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              (XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1 >= conversion_class))
1800:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1801:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 2586              	 .loc 1 1801 0
 2587 0004 D1F80032 	 ldr r3,[r1,#512]
 2588              	.LVL340:
1802:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_ICLSEL_Msk);
 2589              	 .loc 1 1802 0
 2590 0008 23F00303 	 bic r3,r3,#3
 2591              	.LVL341:
1803:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)conversion_class <<  (uint32_t)VADC_G_CHCTR_ICLSEL_Pos);
 2592              	 .loc 1 1803 0
 2593 000c 1A43     	 orrs r2,r2,r3
 2594              	.LVL342:
1804:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1805:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 2595              	 .loc 1 1805 0
 2596 000e C1F80022 	 str r2,[r1,#512]
 2597 0012 7047     	 bx lr
 2598              	 .cfi_endproc
 2599              	.LFE310:
 2601              	 .section .text.XMC_VADC_GROUP_ChannelGetResultRegister,"ax",%progbits
 2602              	 .align 2
 2603              	 .global XMC_VADC_GROUP_ChannelGetResultRegister
 2604              	 .thumb
 2605              	 .thumb_func
 2607              	XMC_VADC_GROUP_ChannelGetResultRegister:
 2608              	.LFB311:
1806:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1807:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1808:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1809:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to retrieve the result register bound with specified channel */
1810:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** uint8_t XMC_VADC_GROUP_ChannelGetResultRegister(XMC_VADC_GROUP_t *const group_ptr, const uint32_t c
1811:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 2609              	 .loc 1 1811 0
 2610              	 .cfi_startproc
 2611              	 
 2612              	 
 2613              	 
 2614              	.LVL343:
1812:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint8_t resreg;
1813:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1814:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1815:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Channel Number",
1816:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1817:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1818:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   resreg = (uint8_t)((group_ptr->CHCTR[ch_num] & (uint32_t)VADC_G_CHCTR_RESREG_Msk) >> VADC_G_CHCTR
 2615              	 .loc 1 1818 0
 2616 0000 8031     	 adds r1,r1,#128
 2617              	.LVL344:
 2618 0002 50F82100 	 ldr r0,[r0,r1,lsl#2]
 2619              	.LVL345:
1819:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1820:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   return resreg;
1821:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 2620              	 .loc 1 1821 0
 2621 0006 C0F30340 	 ubfx r0,r0,#16,#4
 2622              	.LVL346:
 2623 000a 7047     	 bx lr
 2624              	 .cfi_endproc
 2625              	.LFE311:
 2627              	 .section .text.XMC_VADC_GROUP_ChannelTriggerEvent,"ax",%progbits
 2628              	 .align 2
 2629              	 .global XMC_VADC_GROUP_ChannelTriggerEvent
 2630              	 .thumb
 2631              	 .thumb_func
 2633              	XMC_VADC_GROUP_ChannelTriggerEvent:
 2634              	.LFB312:
1822:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1823:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to manually assert channel event */
1824:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_ChannelTriggerEvent(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)
1825:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 2635              	 .loc 1 1825 0
 2636              	 .cfi_startproc
 2637              	 
 2638              	 
 2639              	 
 2640              	.LVL347:
1826:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t ceflag;
1827:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1828:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
1829:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CH
1830:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1831:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   ceflag  = group_ptr->CEFLAG;
 2641              	 .loc 1 1831 0
 2642 0000 D0F88031 	 ldr r3,[r0,#384]
 2643              	.LVL348:
1832:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   ceflag |= (uint32_t)((uint32_t)1 << ch_num);
 2644              	 .loc 1 1832 0
 2645 0004 0122     	 movs r2,#1
 2646 0006 8A40     	 lsls r2,r2,r1
 2647 0008 1343     	 orrs r3,r3,r2
 2648              	.LVL349:
1833:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->CEFLAG = ceflag;
 2649              	 .loc 1 1833 0
 2650 000a C0F88031 	 str r3,[r0,#384]
 2651 000e 7047     	 bx lr
 2652              	 .cfi_endproc
 2653              	.LFE312:
 2655              	 .section .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode,"ax",%progbits
 2656              	 .align 2
 2657              	 .global XMC_VADC_GROUP_ChannelSetEventInterruptNode
 2658              	 .thumb
 2659              	 .thumb_func
 2661              	XMC_VADC_GROUP_ChannelSetEventInterruptNode:
 2662              	.LFB313:
1834:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1835:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1836:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to bind channel event with a service request (NVIC Node) */
1837:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
1838:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                  const uint32_t ch_num,
1839:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                  const XMC_VADC_SR_t sr)
1840:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 2663              	 .loc 1 1840 0
 2664              	 .cfi_startproc
 2665              	 
 2666              	 
 2667              	 
 2668              	.LVL350:
 2669 0000 10B4     	 push {r4}
 2670              	.LCFI24:
 2671              	 .cfi_def_cfa_offset 4
 2672              	 .cfi_offset 4,-4
1841:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t route_mask;
1842:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1843:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROU
1844:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Channel Number",
1845:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1846:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VAD
1847:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1848:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   route_mask  = group_ptr->CEVNP0;
 2673              	 .loc 1 1848 0
 2674 0002 D0F8A031 	 ldr r3,[r0,#416]
 2675              	.LVL351:
1849:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   route_mask &= ~((uint32_t)15 << (ch_num * (uint32_t)4));
 2676              	 .loc 1 1849 0
 2677 0006 8900     	 lsls r1,r1,#2
 2678              	.LVL352:
 2679 0008 0F24     	 movs r4,#15
 2680 000a 8C40     	 lsls r4,r4,r1
 2681 000c 23EA0403 	 bic r3,r3,r4
 2682              	.LVL353:
1850:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   route_mask |= (uint32_t)( (uint32_t)sr << (ch_num * (uint32_t)4));
 2683              	 .loc 1 1850 0
 2684 0010 8A40     	 lsls r2,r2,r1
 2685              	.LVL354:
 2686 0012 1A43     	 orrs r2,r2,r3
 2687              	.LVL355:
1851:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->CEVNP0 = route_mask;
 2688              	 .loc 1 1851 0
 2689 0014 C0F8A021 	 str r2,[r0,#416]
1852:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 2690              	 .loc 1 1852 0
 2691 0018 5DF8044B 	 ldr r4,[sp],#4
 2692              	.LCFI25:
 2693              	 .cfi_restore 4
 2694              	 .cfi_def_cfa_offset 0
 2695 001c 7047     	 bx lr
 2696              	 .cfi_endproc
 2697              	.LFE313:
 2699 001e 00BF     	 .section .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria,"ax",%progbits
 2700              	 .align 2
 2701              	 .global XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
 2702              	 .thumb
 2703              	 .thumb_func
 2705              	XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:
 2706              	.LFB314:
1853:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1854:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to configure conditions for generation of channel event */
1855:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_ChannelTriggerEventGenCriteria( XMC_VADC_GROUP_t *const group_ptr,
1856:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                    const uint32_t ch_num,
1857:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                    const XMC_VADC_CHANNEL_EVGEN_t criteria)
1858:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 2707              	 .loc 1 1858 0
 2708              	 .cfi_startproc
 2709              	 
 2710              	 
 2711              	 
 2712              	.LVL356:
 2713 0000 00EB8101 	 add r1,r0,r1,lsl#2
 2714              	.LVL357:
1859:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t chctr;
1860:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1861:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Group Pointer", XMC_VADC_CHECK_GR
1862:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Channel Number",
1863:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1864:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Event Generation Criteria",
1865:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              ((criteria) <= XMC_VADC_CHANNEL_EVGEN_ALWAYS))
1866:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1867:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   chctr  = group_ptr->CHCTR[ch_num];
 2715              	 .loc 1 1867 0
 2716 0004 D1F80032 	 ldr r3,[r1,#512]
 2717              	.LVL358:
1868:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_CHEVMODE_Msk);
 2718              	 .loc 1 1868 0
 2719 0008 23F44073 	 bic r3,r3,#768
 2720              	.LVL359:
1869:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)criteria << VADC_G_CHCTR_CHEVMODE_Pos);
 2721              	 .loc 1 1869 0
 2722 000c 43EA0222 	 orr r2,r3,r2,lsl#8
 2723              	.LVL360:
1870:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 2724              	 .loc 1 1870 0
 2725 0010 C1F80022 	 str r2,[r1,#512]
 2726 0014 7047     	 bx lr
 2727              	 .cfi_endproc
 2728              	.LFE314:
 2730 0016 00BF     	 .section .text.XMC_VADC_GROUP_ChannelSetBoundarySelection,"ax",%progbits
 2731              	 .align 2
 2732              	 .global XMC_VADC_GROUP_ChannelSetBoundarySelection
 2733              	 .thumb
 2734              	 .thumb_func
 2736              	XMC_VADC_GROUP_ChannelSetBoundarySelection:
 2737              	.LFB315:
1871:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1872:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1873:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to configure the boundary selection */
1874:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void  XMC_VADC_GROUP_ChannelSetBoundarySelection(XMC_VADC_GROUP_t *const group_ptr,
1875:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                  const uint32_t ch_num,
1876:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                  XMC_VADC_BOUNDARY_SELECT_t boundary_sel,
1877:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                                  XMC_VADC_CHANNEL_BOUNDARY_t selection)
1878:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 2738              	 .loc 1 1878 0
 2739              	 .cfi_startproc
 2740              	 
 2741              	 
 2742              	 
 2743              	.LVL361:
 2744 0000 10B4     	 push {r4}
 2745              	.LCFI26:
 2746              	 .cfi_def_cfa_offset 4
 2747              	 .cfi_offset 4,-4
 2748 0002 00EB8101 	 add r1,r0,r1,lsl#2
 2749              	.LVL362:
1879:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
1880:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Channel Number",
1881:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****               ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1882:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1883:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_BNDSELL_Msk << boundary_sel);
 2750              	 .loc 1 1883 0
 2751 0006 D1F80042 	 ldr r4,[r1,#512]
 2752 000a 3020     	 movs r0,#48
 2753              	.LVL363:
 2754 000c 9040     	 lsls r0,r0,r2
 2755 000e 24EA0000 	 bic r0,r4,r0
 2756 0012 C1F80002 	 str r0,[r1,#512]
1884:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->CHCTR[ch_num] |= (selection<< ((uint32_t)VADC_G_CHCTR_BNDSELL_Pos + (uint32_t)boundary
 2757              	 .loc 1 1884 0
 2758 0016 D1F80002 	 ldr r0,[r1,#512]
 2759 001a 0432     	 adds r2,r2,#4
 2760              	.LVL364:
 2761 001c 9340     	 lsls r3,r3,r2
 2762              	.LVL365:
 2763 001e 1843     	 orrs r0,r0,r3
 2764 0020 C1F80002 	 str r0,[r1,#512]
1885:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 2765              	 .loc 1 1885 0
 2766 0024 5DF8044B 	 ldr r4,[sp],#4
 2767              	.LCFI27:
 2768              	 .cfi_restore 4
 2769              	 .cfi_def_cfa_offset 0
 2770 0028 7047     	 bx lr
 2771              	 .cfi_endproc
 2772              	.LFE315:
 2774 002a 00BF     	 .section .text.XMC_VADC_GROUP_AddResultToFifo,"ax",%progbits
 2775              	 .align 2
 2776              	 .global XMC_VADC_GROUP_AddResultToFifo
 2777              	 .thumb
 2778              	 .thumb_func
 2780              	XMC_VADC_GROUP_AddResultToFifo:
 2781              	.LFB316:
1886:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1887:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* Make the specified result register part of Result FIFO */ 
1888:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_AddResultToFifo(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)
1889:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 2782              	 .loc 1 1889 0
 2783              	 .cfi_startproc
 2784              	 
 2785              	 
 2786              	 
 2787              	.LVL366:
 2788 0000 00EB8101 	 add r1,r0,r1,lsl#2
 2789              	.LVL367:
1890:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t fen;
1891:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1892:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
1893:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESU
1894:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1895:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Extract and clear the FIFO enable field */
1896:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   fen = group_ptr->RCR[res_reg];
 2790              	 .loc 1 1896 0
 2791 0004 D1F88032 	 ldr r3,[r1,#640]
 2792              	.LVL368:
1897:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   fen &= ~((uint32_t)VADC_G_RCR_FEN_Msk);
 2793              	 .loc 1 1897 0
 2794 0008 23F0C063 	 bic r3,r3,#100663296
 2795              	.LVL369:
1898:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Set this register up as a FIFO member */
1899:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   fen |= (uint32_t)((uint32_t)1 << VADC_G_RCR_FEN_Pos);
 2796              	 .loc 1 1899 0
 2797 000c 43F00073 	 orr r3,r3,#33554432
 2798              	.LVL370:
1900:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->RCR[res_reg] = fen;
 2799              	 .loc 1 1900 0
 2800 0010 C1F88032 	 str r3,[r1,#640]
 2801 0014 7047     	 bx lr
 2802              	 .cfi_endproc
 2803              	.LFE316:
 2805 0016 00BF     	 .section .text.XMC_VADC_GROUP_SetResultFastCompareValue,"ax",%progbits
 2806              	 .align 2
 2807              	 .global XMC_VADC_GROUP_SetResultFastCompareValue
 2808              	 .thumb
 2809              	 .thumb_func
 2811              	XMC_VADC_GROUP_SetResultFastCompareValue:
 2812              	.LFB317:
1901:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1902:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1903:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1904:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* Applicable to fast compare mode, this API sets up the value which is to be compared against conv
1905:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_SetResultFastCompareValue(XMC_VADC_GROUP_t *const group_ptr,
1906:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                               const uint32_t res_reg,
1907:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                               const XMC_VADC_RESULT_SIZE_t compare_val)
1908:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 2813              	 .loc 1 1908 0
 2814              	 .cfi_startproc
 2815              	 
 2816              	 
 2817              	 
 2818              	.LVL371:
 2819 0000 00EB8101 	 add r1,r0,r1,lsl#2
 2820              	.LVL372:
1909:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t res = group_ptr->RES[res_reg];
 2821              	 .loc 1 1909 0
 2822 0004 D1F80033 	 ldr r3,[r1,#768]
 2823              	.LVL373:
1910:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1911:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1912:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Result Register",
1913:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****             ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
1914:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1915:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 2824              	 .loc 1 1915 0
 2825 0008 1B0C     	 lsrs r3,r3,#16
 2826              	.LVL374:
 2827 000a 1B04     	 lsls r3,r3,#16
 2828              	.LVL375:
1916:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   res |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 2829              	 .loc 1 1916 0
 2830 000c 43EA8202 	 orr r2,r3,r2,lsl#2
 2831              	.LVL376:
1917:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->RES[res_reg] = res;
 2832              	 .loc 1 1917 0
 2833 0010 C1F80023 	 str r2,[r1,#768]
 2834 0014 7047     	 bx lr
 2835              	 .cfi_endproc
 2836              	.LFE317:
 2838 0016 00BF     	 .section .text.XMC_VADC_GROUP_GetFastCompareResult,"ax",%progbits
 2839              	 .align 2
 2840              	 .global XMC_VADC_GROUP_GetFastCompareResult
 2841              	 .thumb
 2842              	 .thumb_func
 2844              	XMC_VADC_GROUP_GetFastCompareResult:
 2845              	.LFB318:
1918:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1919:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1920:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to retrieve the result of fast mode comparison */
1921:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GROUP_GetFastCompareResult(XMC_VADC_GROUP_t *const group_ptr, cons
1922:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 2846              	 .loc 1 1922 0
 2847              	 .cfi_startproc
 2848              	 
 2849              	 
 2850              	 
 2851              	.LVL377:
1923:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_VADC_FAST_COMPARE_t result;
1924:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t res;
1925:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1926:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
1927:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM
1928:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1929:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   res = group_ptr->RES[res_reg];
 2852              	 .loc 1 1929 0
 2853 0000 C031     	 adds r1,r1,#192
 2854              	.LVL378:
 2855 0002 50F82100 	 ldr r0,[r0,r1,lsl#2]
 2856              	.LVL379:
1930:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1931:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (res & (uint32_t)VADC_G_RES_VF_Msk)
 2857              	 .loc 1 1931 0
 2858 0006 0028     	 cmp r0,#0
1932:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1933:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_G_RES_FCR_Pos) & (uint32_t)
 2859              	 .loc 1 1933 0
 2860 0008 B4BF     	 ite lt
 2861 000a C0F38070 	 ubfxlt r0,r0,#30,#1
 2862              	.LVL380:
1934:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1935:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
1936:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1937:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 2863              	 .loc 1 1937 0
 2864 000e 0220     	 movge r0,#2
 2865              	.LVL381:
1938:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1939:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1940:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   return result;
1941:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 2866              	 .loc 1 1941 0
 2867 0010 7047     	 bx lr
 2868              	 .cfi_endproc
 2869              	.LFE318:
 2871 0012 00BF     	 .section .text.XMC_VADC_GROUP_SetResultSubtractionValue,"ax",%progbits
 2872              	 .align 2
 2873              	 .global XMC_VADC_GROUP_SetResultSubtractionValue
 2874              	 .thumb
 2875              	 .thumb_func
 2877              	XMC_VADC_GROUP_SetResultSubtractionValue:
 2878              	.LFB319:
1942:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1943:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* Applicable to fast compare mode, this API sets up the value which is to be compared against conv
1944:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_SetResultSubtractionValue(XMC_VADC_GROUP_t *const group_ptr,
1945:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                               const uint16_t subtraction_val)
1946:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 2879              	 .loc 1 1946 0
 2880              	 .cfi_startproc
 2881              	 
 2882              	 
 2883              	 
 2884              	.LVL382:
1947:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t res;
1948:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1949:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultSubtractionValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1950:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1951:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   res = group_ptr->RES[0];
 2885              	 .loc 1 1951 0
 2886 0000 D0F80033 	 ldr r3,[r0,#768]
 2887              	.LVL383:
1952:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 2888              	 .loc 1 1952 0
 2889 0004 1B0C     	 lsrs r3,r3,#16
 2890              	.LVL384:
 2891 0006 1B04     	 lsls r3,r3,#16
 2892              	.LVL385:
1953:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   res |= (uint32_t)subtraction_val;
 2893              	 .loc 1 1953 0
 2894 0008 1943     	 orrs r1,r1,r3
 2895              	.LVL386:
1954:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   group_ptr->RES[0] = res;
 2896              	 .loc 1 1954 0
 2897 000a C0F80013 	 str r1,[r0,#768]
 2898 000e 7047     	 bx lr
 2899              	 .cfi_endproc
 2900              	.LFE319:
 2902              	 .section .text.XMC_VADC_GROUP_SetResultInterruptNode,"ax",%progbits
 2903              	 .align 2
 2904              	 .global XMC_VADC_GROUP_SetResultInterruptNode
 2905              	 .thumb
 2906              	 .thumb_func
 2908              	XMC_VADC_GROUP_SetResultInterruptNode:
 2909              	.LFB320:
1955:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
1956:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1957:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1958:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to select a service request line (NVIC Node) for result event of specified unit of result ha
1959:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** void XMC_VADC_GROUP_SetResultInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
1960:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                            const uint32_t res_reg,
1961:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****                                            const XMC_VADC_SR_t sr)
1962:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 2910              	 .loc 1 1962 0
 2911              	 .cfi_startproc
 2912              	 
 2913              	 
 2914              	 
 2915              	.LVL387:
 2916 0000 10B4     	 push {r4}
 2917              	.LCFI28:
 2918              	 .cfi_def_cfa_offset 4
 2919              	 .cfi_offset 4,-4
1963:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t route_mask;
1964:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1965:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
1966:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_N
1967:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_S
1968:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1969:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (res_reg <= 7U)
 2920              	 .loc 1 1969 0
 2921 0002 0729     	 cmp r1,#7
 2922 0004 0BD8     	 bhi .L183
1970:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1971:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     route_mask  = group_ptr->REVNP0;
 2923              	 .loc 1 1971 0
 2924 0006 D0F8B041 	 ldr r4,[r0,#432]
 2925              	.LVL388:
1972:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (res_reg * (uint32_t)4) ));
 2926              	 .loc 1 1972 0
 2927 000a 8900     	 lsls r1,r1,#2
 2928              	.LVL389:
 2929 000c 0F23     	 movs r3,#15
 2930 000e 8B40     	 lsls r3,r3,r1
 2931 0010 24EA0303 	 bic r3,r4,r3
 2932              	.LVL390:
1973:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
 2933              	 .loc 1 1973 0
 2934 0014 8A40     	 lsls r2,r2,r1
 2935              	.LVL391:
 2936 0016 1A43     	 orrs r2,r2,r3
 2937              	.LVL392:
1974:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     group_ptr->REVNP0 = route_mask;
 2938              	 .loc 1 1974 0
 2939 0018 C0F8B021 	 str r2,[r0,#432]
 2940 001c 0DE0     	 b .L182
 2941              	.LVL393:
 2942              	.L183:
1975:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1976:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
1977:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
1978:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     route_mask = group_ptr->REVNP1;
 2943              	 .loc 1 1978 0
 2944 001e D0F8B441 	 ldr r4,[r0,#436]
 2945              	.LVL394:
1979:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
 2946              	 .loc 1 1979 0
 2947 0022 01F18041 	 add r1,r1,#1073741824
 2948              	.LVL395:
 2949 0026 0839     	 subs r1,r1,#8
 2950              	.LVL396:
 2951 0028 8900     	 lsls r1,r1,#2
 2952              	.LVL397:
 2953 002a 0F23     	 movs r3,#15
 2954 002c 8B40     	 lsls r3,r3,r1
 2955 002e 24EA0303 	 bic r3,r4,r3
 2956              	.LVL398:
1980:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
 2957              	 .loc 1 1980 0
 2958 0032 8A40     	 lsls r2,r2,r1
 2959              	.LVL399:
 2960 0034 1A43     	 orrs r2,r2,r3
 2961              	.LVL400:
1981:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     group_ptr->REVNP1 = route_mask;
 2962              	 .loc 1 1981 0
 2963 0036 C0F8B421 	 str r2,[r0,#436]
 2964              	.L182:
1982:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
1983:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 2965              	 .loc 1 1983 0
 2966 003a 5DF8044B 	 ldr r4,[sp],#4
 2967              	.LCFI29:
 2968              	 .cfi_restore 4
 2969              	 .cfi_def_cfa_offset 0
 2970 003e 7047     	 bx lr
 2971              	 .cfi_endproc
 2972              	.LFE320:
 2974              	 .section .text.XMC_VADC_GROUP_IsResultRegisterFifoHead,"ax",%progbits
 2975              	 .align 2
 2976              	 .global XMC_VADC_GROUP_IsResultRegisterFifoHead
 2977              	 .thumb
 2978              	 .thumb_func
 2980              	XMC_VADC_GROUP_IsResultRegisterFifoHead:
 2981              	.LFB323:
1984:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1985:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to retrieve the tail of the fifo which the specified result register is a part of */
1986:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** uint32_t XMC_VADC_GROUP_GetResultFifoTail(XMC_VADC_GROUP_t *const group_ptr, uint32_t res_reg)
1987:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
1988:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t tail;
1989:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t rcr;
1990:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   int32_t i;
1991:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   bool exit_flag;
1992:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1993:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1994:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
1995:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1996:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   tail = 0U;
1997:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   exit_flag= (bool)false;
1998:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
1999:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
2000:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
2001:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     res_reg = res_reg - 1U;
2002:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
2003:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
2004:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   /* Border condition */
2005:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (0U == res_reg)
2006:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
2007:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     tail = 0U;
2008:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
2009:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
2010:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
2011:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     /* Stop either at a node that does not have FEN set or at Node-0 */
2012:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     for(i = (int32_t)res_reg; i >= (int32_t)0; i--)
2013:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     {
2014:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****        rcr = group_ptr->RCR[i];
2015:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****        rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
2016:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
2017:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****        if (rcr)
2018:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****        {
2019:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****          if ((int32_t)0 == i)
2020:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****          {
2021:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****           /* No more nodes. Stop here */
2022:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****           tail = (uint32_t)0;
2023:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****           exit_flag = (bool)true;
2024:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****          }
2025:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****        }
2026:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****        else
2027:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****        {
2028:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****          /* The preceding register forms the tail of the FIFO */
2029:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****          tail = (uint32_t)i + (uint32_t)1;
2030:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****          exit_flag = (bool)true;
2031:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****        }
2032:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****        if (exit_flag)
2033:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****        {
2034:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****          break;
2035:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****        }
2036:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     }
2037:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
2038:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   return tail;
2039:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
2040:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
2041:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to retrieve the head of the fifo which the specified result register is a part of */
2042:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** uint32_t XMC_VADC_GROUP_GetResultFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg
2043:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
2044:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t head;
2045:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t rcr;
2046:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t i;
2047:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
2048:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2049:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
2050:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
2051:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
2052:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
2053:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       head = res_reg;
2054:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
2055:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
2056:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
2057:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     head = XMC_VADC_NUM_RESULT_REGISTERS - (uint32_t)1;
2058:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
2059:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     for(i = res_reg; i < XMC_VADC_NUM_RESULT_REGISTERS ; i++)
2060:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     {
2061:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       rcr = group_ptr->RCR[i];
2062:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
2063:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
2064:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       if (!rcr)
2065:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       {
2066:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****         /* This node forms the head of the FIFO */
2067:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****         head = i ;
2068:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****         break;
2069:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       }
2070:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     }
2071:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
2072:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   return head;
2073:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
2074:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
2075:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** /* API to determine if the specified result register is the head of a result fifo */
2076:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** bool XMC_VADC_GROUP_IsResultRegisterFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_
2077:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** {
 2982              	 .loc 1 2077 0
 2983              	 .cfi_startproc
 2984              	 
 2985              	 
 2986              	 
 2987              	.LVL401:
 2988 0000 00EB8101 	 add r1,r0,r1,lsl#2
 2989              	.LVL402:
2078:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   bool ret_val;
2079:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t rcr_head;
2080:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t rcr_next;
2081:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
2082:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2083:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Result Register",
2084:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****              ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
2085:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
2086:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   rcr_head = group_ptr->RCR[res_reg];
 2990              	 .loc 1 2086 0
 2991 0004 D1F88032 	 ldr r3,[r1,#640]
 2992              	.LVL403:
2087:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   rcr_head &= (uint32_t)VADC_G_RCR_FEN_Msk;
2088:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   rcr_next = group_ptr->RCR[res_reg - (uint32_t)1];
 2993              	 .loc 1 2088 0
 2994 0008 D1F87C22 	 ldr r2,[r1,#636]
 2995              	.LVL404:
2089:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   rcr_next &= (uint32_t)VADC_G_RCR_FEN_Msk;
2090:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
2091:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   if (rcr_head)
 2996              	 .loc 1 2091 0
 2997 000c 13F0C06F 	 tst r3,#100663296
 2998 0010 05D1     	 bne .L188
2092:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
2093:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     ret_val = (bool)false;
2094:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
2095:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else if (rcr_next)
 2999              	 .loc 1 2095 0
 3000 0012 12F0C06F 	 tst r2,#100663296
 3001 0016 14BF     	 ite ne
 3002 0018 0120     	 movne r0,#1
 3003              	.LVL405:
 3004 001a 0020     	 moveq r0,#0
 3005 001c 7047     	 bx lr
 3006              	.LVL406:
 3007              	.L188:
2093:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 3008              	 .loc 1 2093 0
 3009 001e 0020     	 movs r0,#0
 3010              	.LVL407:
2096:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
2097:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     ret_val = (bool)true;
2098:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
2099:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   else
2100:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
2101:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     ret_val = (bool)false;
2102:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
2103:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
2104:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   return ret_val;
2105:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** }
 3011              	 .loc 1 2105 0
 3012 0020 7047     	 bx lr
 3013              	 .cfi_endproc
 3014              	.LFE323:
 3016 0022 00BF     	 .section .text.XMC_VADC_GROUP_GetResultFifoTail,"ax",%progbits
 3017              	 .align 2
 3018              	 .global XMC_VADC_GROUP_GetResultFifoTail
 3019              	 .thumb
 3020              	 .thumb_func
 3022              	XMC_VADC_GROUP_GetResultFifoTail:
 3023              	.LFB321:
1987:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t tail;
 3024              	 .loc 1 1987 0
 3025              	 .cfi_startproc
 3026              	 
 3027              	 
 3028              	.LVL408:
 3029 0000 38B5     	 push {r3,r4,r5,lr}
 3030              	.LCFI30:
 3031              	 .cfi_def_cfa_offset 16
 3032              	 .cfi_offset 3,-16
 3033              	 .cfi_offset 4,-12
 3034              	 .cfi_offset 5,-8
 3035              	 .cfi_offset 14,-4
 3036 0002 0446     	 mov r4,r0
 3037 0004 0D46     	 mov r5,r1
 3038              	.LVL409:
1999:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 3039              	 .loc 1 1999 0
 3040 0006 FFF7FEFF 	 bl XMC_VADC_GROUP_IsResultRegisterFifoHead
 3041              	.LVL410:
 3042 000a 00B1     	 cbz r0,.L190
2001:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 3043              	 .loc 1 2001 0
 3044 000c 013D     	 subs r5,r5,#1
 3045              	.LVL411:
 3046              	.L190:
2005:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 3047              	 .loc 1 2005 0
 3048 000e 9DB1     	 cbz r5,.L196
2012:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     {
 3049              	 .loc 1 2012 0
 3050 0010 2846     	 mov r0,r5
 3051              	.LVL412:
 3052 0012 002D     	 cmp r5,#0
 3053 0014 12DB     	 blt .L197
 3054              	.LVL413:
 3055              	.L199:
2014:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****        rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 3056              	 .loc 1 2014 0
 3057 0016 00F1A003 	 add r3,r0,#160
 3058 001a 54F82330 	 ldr r3,[r4,r3,lsl#2]
 3059              	.LVL414:
2017:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****        {
 3060              	 .loc 1 2017 0
 3061 001e 13F0C06F 	 tst r3,#100663296
 3062 0022 01D0     	 beq .L192
2019:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****          {
 3063              	 .loc 1 2019 0
 3064 0024 10B9     	 cbnz r0,.L201
 3065 0026 0BE0     	 b .L198
 3066              	.L192:
2029:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****          exit_flag = (bool)true;
 3067              	 .loc 1 2029 0
 3068 0028 0130     	 adds r0,r0,#1
 3069              	.LVL415:
 3070 002a 38BD     	 pop {r3,r4,r5,pc}
 3071              	.LVL416:
 3072              	.L201:
2012:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     {
 3073              	 .loc 1 2012 0 discriminator 2
 3074 002c 0138     	 subs r0,r0,#1
 3075              	.LVL417:
 3076 002e B0F1FF3F 	 cmp r0,#-1
 3077 0032 F0D1     	 bne .L199
 3078 0034 0020     	 movs r0,#0
 3079              	.LVL418:
 3080 0036 38BD     	 pop {r3,r4,r5,pc}
 3081              	.LVL419:
 3082              	.L196:
2007:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 3083              	 .loc 1 2007 0
 3084 0038 0020     	 movs r0,#0
 3085 003a 38BD     	 pop {r3,r4,r5,pc}
 3086              	.LVL420:
 3087              	.L197:
1996:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   exit_flag= (bool)false;
 3088              	 .loc 1 1996 0
 3089 003c 0020     	 movs r0,#0
 3090              	.LVL421:
 3091 003e 38BD     	 pop {r3,r4,r5,pc}
 3092              	.LVL422:
 3093              	.L198:
2022:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****           exit_flag = (bool)true;
 3094              	 .loc 1 2022 0
 3095 0040 0020     	 movs r0,#0
 3096              	.LVL423:
2039:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 3097              	 .loc 1 2039 0
 3098 0042 38BD     	 pop {r3,r4,r5,pc}
 3099              	 .cfi_endproc
 3100              	.LFE321:
 3102              	 .section .text.XMC_VADC_GROUP_GetResultFifoHead,"ax",%progbits
 3103              	 .align 2
 3104              	 .global XMC_VADC_GROUP_GetResultFifoHead
 3105              	 .thumb
 3106              	 .thumb_func
 3108              	XMC_VADC_GROUP_GetResultFifoHead:
 3109              	.LFB322:
2043:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   uint32_t head;
 3110              	 .loc 1 2043 0
 3111              	 .cfi_startproc
 3112              	 
 3113              	 
 3114              	.LVL424:
 3115 0000 38B5     	 push {r3,r4,r5,lr}
 3116              	.LCFI31:
 3117              	 .cfi_def_cfa_offset 16
 3118              	 .cfi_offset 3,-16
 3119              	 .cfi_offset 4,-12
 3120              	 .cfi_offset 5,-8
 3121              	 .cfi_offset 14,-4
 3122 0002 0546     	 mov r5,r0
 3123 0004 0C46     	 mov r4,r1
2051:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   {
 3124              	 .loc 1 2051 0
 3125 0006 FFF7FEFF 	 bl XMC_VADC_GROUP_IsResultRegisterFifoHead
 3126              	.LVL425:
 3127 000a C8B9     	 cbnz r0,.L209
 3128              	.LVL426:
2059:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     {
 3129              	 .loc 1 2059 0 discriminator 1
 3130 000c 0F2C     	 cmp r4,#15
 3131 000e 19D8     	 bhi .L210
2061:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 3132              	 .loc 1 2061 0
 3133 0010 04F1A003 	 add r3,r4,#160
 3134 0014 55F82330 	 ldr r3,[r5,r3,lsl#2]
 3135              	.LVL427:
2064:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       {
 3136              	 .loc 1 2064 0
 3137 0018 13F0C06F 	 tst r3,#100663296
 3138 001c 09D0     	 beq .L211
 3139 001e 2046     	 mov r0,r4
 3140 0020 09E0     	 b .L207
 3141              	.LVL428:
 3142              	.L208:
2061:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 3143              	 .loc 1 2061 0
 3144 0022 00F1A003 	 add r3,r0,#160
 3145 0026 55F82330 	 ldr r3,[r5,r3,lsl#2]
 3146              	.LVL429:
2064:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       {
 3147              	 .loc 1 2064 0
 3148 002a 13F0C06F 	 tst r3,#100663296
 3149 002e 02D1     	 bne .L207
 3150 0030 38BD     	 pop {r3,r4,r5,pc}
 3151              	.LVL430:
 3152              	.L211:
 3153 0032 2046     	 mov r0,r4
 3154              	.LVL431:
2068:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****       }
 3155              	 .loc 1 2068 0
 3156 0034 38BD     	 pop {r3,r4,r5,pc}
 3157              	.LVL432:
 3158              	.L207:
2059:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****     {
 3159              	 .loc 1 2059 0 discriminator 2
 3160 0036 0130     	 adds r0,r0,#1
 3161              	.LVL433:
 3162 0038 1028     	 cmp r0,#16
 3163 003a F2D1     	 bne .L208
2057:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 3164              	 .loc 1 2057 0
 3165 003c 0F20     	 movs r0,#15
 3166              	.LVL434:
 3167 003e 38BD     	 pop {r3,r4,r5,pc}
 3168              	.LVL435:
 3169              	.L209:
2053:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c ****   }
 3170              	 .loc 1 2053 0
 3171 0040 2046     	 mov r0,r4
 3172 0042 38BD     	 pop {r3,r4,r5,pc}
 3173              	.LVL436:
 3174              	.L210:
2057:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 3175              	 .loc 1 2057 0
 3176 0044 0F20     	 movs r0,#15
 3177              	.LVL437:
2073:C:/Files/Projects/Git/XMCLib/src\xmc_vadc.c **** 
 3178              	 .loc 1 2073 0
 3179 0046 38BD     	 pop {r3,r4,r5,pc}
 3180              	 .cfi_endproc
 3181              	.LFE322:
 3183              	 .section .rodata.g_xmc_vadc_group_array,"a",%progbits
 3184              	 .align 2
 3185              	 .set .LANCHOR0,.+0
 3188              	g_xmc_vadc_group_array:
 3189 0000 00440040 	 .word 1073759232
 3190 0004 00480040 	 .word 1073760256
 3191 0008 004C0040 	 .word 1073761280
 3192 000c 00500040 	 .word 1073762304
 3193              	 .text
 3194              	.Letext0:
 3195              	 .file 3 "c:\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3196              	 .file 4 "c:\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3197              	 .file 5 "C:/Files/Projects/Git/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 3198              	 .file 6 "C:/Files/Projects/Git/XMCLib/inc/xmc4_scu.h"
 3199              	 .file 7 "C:/Files/Projects/Git/CMSIS/Include/cmsis_gcc.h"
 3200              	 .file 8 "C:/Files/Projects/Git/CMSIS/Include/core_cm4.h"
 3201              	 .file 9 "C:/Files/Projects/Git/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_vadc.c
    {standard input}:20     .text.XMC_VADC_GLOBAL_EnableModule:00000000 $t
    {standard input}:25     .text.XMC_VADC_GLOBAL_EnableModule:00000000 XMC_VADC_GLOBAL_EnableModule
    {standard input}:46     .text.XMC_VADC_GLOBAL_DisableModule:00000000 $t
    {standard input}:51     .text.XMC_VADC_GLOBAL_DisableModule:00000000 XMC_VADC_GLOBAL_DisableModule
    {standard input}:71     .text.XMC_VADC_GLOBAL_Init:00000000 $t
    {standard input}:76     .text.XMC_VADC_GLOBAL_Init:00000000 XMC_VADC_GLOBAL_Init
    {standard input}:119    .text.XMC_VADC_GLOBAL_InputClassInit:00000000 $t
    {standard input}:124    .text.XMC_VADC_GLOBAL_InputClassInit:00000000 XMC_VADC_GLOBAL_InputClassInit
    {standard input}:159    .text.XMC_VADC_GLOBAL_StartupCalibration:00000000 $t
    {standard input}:164    .text.XMC_VADC_GLOBAL_StartupCalibration:00000000 XMC_VADC_GLOBAL_StartupCalibration
    {standard input}:211    .text.XMC_VADC_GLOBAL_StartupCalibration:0000003c $d
    {standard input}:216    .text.XMC_VADC_GLOBAL_SetBoundaries:00000000 $t
    {standard input}:221    .text.XMC_VADC_GLOBAL_SetBoundaries:00000000 XMC_VADC_GLOBAL_SetBoundaries
    {standard input}:239    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000000 $t
    {standard input}:244    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000000 XMC_VADC_GLOBAL_SetIndividualBoundary
    {standard input}:287    .text.XMC_VADC_GLOBAL_SetCompareValue:00000000 $t
    {standard input}:292    .text.XMC_VADC_GLOBAL_SetCompareValue:00000000 XMC_VADC_GLOBAL_SetCompareValue
    {standard input}:315    .text.XMC_VADC_GLOBAL_GetCompareResult:00000000 $t
    {standard input}:320    .text.XMC_VADC_GLOBAL_GetCompareResult:00000000 XMC_VADC_GLOBAL_GetCompareResult
    {standard input}:346    .text.XMC_VADC_GLOBAL_BindGroupToEMux:00000000 $t
    {standard input}:351    .text.XMC_VADC_GLOBAL_BindGroupToEMux:00000000 XMC_VADC_GLOBAL_BindGroupToEMux
    {standard input}:395    .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:00000000 $t
    {standard input}:400    .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:00000000 XMC_VADC_GLOBAL_SetResultEventInterruptNode
    {standard input}:428    .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:433    .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:00000000 XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
    {standard input}:461    .text.XMC_VADC_GROUP_InputClassInit:00000000 $t
    {standard input}:466    .text.XMC_VADC_GROUP_InputClassInit:00000000 XMC_VADC_GROUP_InputClassInit
    {standard input}:546    .text.XMC_VADC_GROUP_Init:00000000 $t
    {standard input}:551    .text.XMC_VADC_GROUP_Init:00000000 XMC_VADC_GROUP_Init
    {standard input}:639    .text.XMC_VADC_GROUP_SetPowerMode:00000000 $t
    {standard input}:644    .text.XMC_VADC_GROUP_SetPowerMode:00000000 XMC_VADC_GROUP_SetPowerMode
    {standard input}:668    .text.XMC_VADC_GROUP_SetSyncSlave:00000000 $t
    {standard input}:673    .text.XMC_VADC_GROUP_SetSyncSlave:00000000 XMC_VADC_GROUP_SetSyncSlave
    {standard input}:703    .text.XMC_VADC_GROUP_SetSyncMaster:00000000 $t
    {standard input}:708    .text.XMC_VADC_GROUP_SetSyncMaster:00000000 XMC_VADC_GROUP_SetSyncMaster
    {standard input}:729    .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000000 $t
    {standard input}:734    .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000000 XMC_VADC_GROUP_CheckSlaveReadiness
    {standard input}:788    .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000038 $d
    {standard input}:794    .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000000 $t
    {standard input}:799    .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000000 XMC_VADC_GROUP_IgnoreSlaveReadiness
    {standard input}:853    .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:0000003c $d
    {standard input}:859    .text.XMC_VADC_GROUP_SetSyncSlaveReadySignal:00000000 $t
    {standard input}:864    .text.XMC_VADC_GROUP_SetSyncSlaveReadySignal:00000000 XMC_VADC_GROUP_SetSyncSlaveReadySignal
    {standard input}:892    .text.XMC_VADC_GROUP_EnableChannelSyncRequest:00000000 $t
    {standard input}:897    .text.XMC_VADC_GROUP_EnableChannelSyncRequest:00000000 XMC_VADC_GROUP_EnableChannelSyncRequest
    {standard input}:924    .text.XMC_VADC_GROUP_DisableChannelSyncRequest:00000000 $t
    {standard input}:929    .text.XMC_VADC_GROUP_DisableChannelSyncRequest:00000000 XMC_VADC_GROUP_DisableChannelSyncRequest
    {standard input}:956    .text.XMC_VADC_GROUP_IsConverterBusy:00000000 $t
    {standard input}:961    .text.XMC_VADC_GROUP_IsConverterBusy:00000000 XMC_VADC_GROUP_IsConverterBusy
    {standard input}:980    .text.XMC_VADC_GROUP_SetBoundaries:00000000 $t
    {standard input}:985    .text.XMC_VADC_GROUP_SetBoundaries:00000000 XMC_VADC_GROUP_SetBoundaries
    {standard input}:1011   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000000 $t
    {standard input}:1016   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000000 XMC_VADC_GROUP_SetIndividualBoundary
    {standard input}:1070   .text.XMC_VADC_GROUP_TriggerServiceRequest:00000000 $t
    {standard input}:1075   .text.XMC_VADC_GROUP_TriggerServiceRequest:00000000 XMC_VADC_GROUP_TriggerServiceRequest
    {standard input}:1113   .text.XMC_VADC_GROUP_ScanInit:00000000 $t
    {standard input}:1118   .text.XMC_VADC_GROUP_ScanInit:00000000 XMC_VADC_GROUP_ScanInit
    {standard input}:1198   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000000 $t
    {standard input}:1203   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000000 XMC_VADC_GROUP_ScanSelectTrigger
    {standard input}:1229   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000000 $t
    {standard input}:1234   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000000 XMC_VADC_GROUP_ScanSelectTriggerEdge
    {standard input}:1260   .text.XMC_VADC_GROUP_ScanSelectGating:00000000 $t
    {standard input}:1265   .text.XMC_VADC_GROUP_ScanSelectGating:00000000 XMC_VADC_GROUP_ScanSelectGating
    {standard input}:1291   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000000 $t
    {standard input}:1296   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000000 XMC_VADC_GROUP_ScanSequenceAbort
    {standard input}:1347   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000050 $d
    {standard input}:1352   .text.XMC_VADC_GROUP_ScanGetNumChannelsPending:00000000 $t
    {standard input}:1357   .text.XMC_VADC_GROUP_ScanGetNumChannelsPending:00000000 XMC_VADC_GROUP_ScanGetNumChannelsPending
    {standard input}:1401   .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:1406   .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:00000000 XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
    {standard input}:1430   .text.XMC_VADC_GROUP_ScanRemoveChannel:00000000 $t
    {standard input}:1435   .text.XMC_VADC_GROUP_ScanRemoveChannel:00000000 XMC_VADC_GROUP_ScanRemoveChannel
    {standard input}:1458   .text.XMC_VADC_GLOBAL_BackgroundInit:00000000 $t
    {standard input}:1463   .text.XMC_VADC_GLOBAL_BackgroundInit:00000000 XMC_VADC_GLOBAL_BackgroundInit
    {standard input}:1597   .text.XMC_VADC_GLOBAL_BackgroundInit:000000e8 $d
    {standard input}:1603   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000000 $t
    {standard input}:1608   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000000 XMC_VADC_GLOBAL_BackgroundSelectTrigger
    {standard input}:1634   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000000 $t
    {standard input}:1639   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000000 XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
    {standard input}:1665   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000000 $t
    {standard input}:1670   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000000 XMC_VADC_GLOBAL_BackgroundSelectGating
    {standard input}:1696   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000000 $t
    {standard input}:1701   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000000 XMC_VADC_GLOBAL_BackgroundAbortSequence
    {standard input}:1806   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000078 $d
    {standard input}:1812   .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:00000000 $t
    {standard input}:1817   .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:00000000 XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
    {standard input}:1883   .text.XMC_VADC_GROUP_QueueInit:00000000 $t
    {standard input}:1888   .text.XMC_VADC_GROUP_QueueInit:00000000 XMC_VADC_GROUP_QueueInit
    {standard input}:1968   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000000 $t
    {standard input}:1973   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000000 XMC_VADC_GROUP_QueueSelectTrigger
    {standard input}:1999   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000000 $t
    {standard input}:2004   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000000 XMC_VADC_GROUP_QueueSelectTriggerEdge
    {standard input}:2030   .text.XMC_VADC_GROUP_QueueSelectGating:00000000 $t
    {standard input}:2035   .text.XMC_VADC_GROUP_QueueSelectGating:00000000 XMC_VADC_GROUP_QueueSelectGating
    {standard input}:2061   .text.XMC_VADC_GROUP_QueueGetLength:00000000 $t
    {standard input}:2066   .text.XMC_VADC_GROUP_QueueGetLength:00000000 XMC_VADC_GROUP_QueueGetLength
    {standard input}:2103   .text.XMC_VADC_GROUP_QueueAbortSequence:00000000 $t
    {standard input}:2108   .text.XMC_VADC_GROUP_QueueAbortSequence:00000000 XMC_VADC_GROUP_QueueAbortSequence
    {standard input}:2161   .text.XMC_VADC_GROUP_QueueAbortSequence:00000050 $d
    {standard input}:2166   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000000 $t
    {standard input}:2171   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000000 XMC_VADC_GROUP_QueueRemoveChannel
    {standard input}:2249   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000064 $d
    {standard input}:2254   .text.XMC_VADC_GROUP_QueueGetNextChannel:00000000 $t
    {standard input}:2259   .text.XMC_VADC_GROUP_QueueGetNextChannel:00000000 XMC_VADC_GROUP_QueueGetNextChannel
    {standard input}:2297   .text.XMC_VADC_GROUP_QueueGetInterruptedChannel:00000000 $t
    {standard input}:2302   .text.XMC_VADC_GROUP_QueueGetInterruptedChannel:00000000 XMC_VADC_GROUP_QueueGetInterruptedChannel
    {standard input}:2328   .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:2333   .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:00000000 XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
    {standard input}:2357   .text.XMC_VADC_GROUP_ChannelInit:00000000 $t
    {standard input}:2362   .text.XMC_VADC_GROUP_ChannelInit:00000000 XMC_VADC_GROUP_ChannelInit
    {standard input}:2460   .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds:00000000 $t
    {standard input}:2465   .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds:00000000 XMC_VADC_GROUP_ChannelIsResultOutOfBounds
    {standard input}:2509   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000000 $t
    {standard input}:2514   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000000 XMC_VADC_GROUP_ChannelSetInputReference
    {standard input}:2540   .text.XMC_VADC_GROUP_ChannelSetResultRegister:00000000 $t
    {standard input}:2545   .text.XMC_VADC_GROUP_ChannelSetResultRegister:00000000 XMC_VADC_GROUP_ChannelSetResultRegister
    {standard input}:2571   .text.XMC_VADC_GROUP_ChannelSetIclass:00000000 $t
    {standard input}:2576   .text.XMC_VADC_GROUP_ChannelSetIclass:00000000 XMC_VADC_GROUP_ChannelSetIclass
    {standard input}:2602   .text.XMC_VADC_GROUP_ChannelGetResultRegister:00000000 $t
    {standard input}:2607   .text.XMC_VADC_GROUP_ChannelGetResultRegister:00000000 XMC_VADC_GROUP_ChannelGetResultRegister
    {standard input}:2628   .text.XMC_VADC_GROUP_ChannelTriggerEvent:00000000 $t
    {standard input}:2633   .text.XMC_VADC_GROUP_ChannelTriggerEvent:00000000 XMC_VADC_GROUP_ChannelTriggerEvent
    {standard input}:2656   .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode:00000000 $t
    {standard input}:2661   .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode:00000000 XMC_VADC_GROUP_ChannelSetEventInterruptNode
    {standard input}:2700   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000000 $t
    {standard input}:2705   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000000 XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
    {standard input}:2731   .text.XMC_VADC_GROUP_ChannelSetBoundarySelection:00000000 $t
    {standard input}:2736   .text.XMC_VADC_GROUP_ChannelSetBoundarySelection:00000000 XMC_VADC_GROUP_ChannelSetBoundarySelection
    {standard input}:2775   .text.XMC_VADC_GROUP_AddResultToFifo:00000000 $t
    {standard input}:2780   .text.XMC_VADC_GROUP_AddResultToFifo:00000000 XMC_VADC_GROUP_AddResultToFifo
    {standard input}:2806   .text.XMC_VADC_GROUP_SetResultFastCompareValue:00000000 $t
    {standard input}:2811   .text.XMC_VADC_GROUP_SetResultFastCompareValue:00000000 XMC_VADC_GROUP_SetResultFastCompareValue
    {standard input}:2839   .text.XMC_VADC_GROUP_GetFastCompareResult:00000000 $t
    {standard input}:2844   .text.XMC_VADC_GROUP_GetFastCompareResult:00000000 XMC_VADC_GROUP_GetFastCompareResult
    {standard input}:2872   .text.XMC_VADC_GROUP_SetResultSubtractionValue:00000000 $t
    {standard input}:2877   .text.XMC_VADC_GROUP_SetResultSubtractionValue:00000000 XMC_VADC_GROUP_SetResultSubtractionValue
    {standard input}:2903   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000000 $t
    {standard input}:2908   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000000 XMC_VADC_GROUP_SetResultInterruptNode
    {standard input}:2975   .text.XMC_VADC_GROUP_IsResultRegisterFifoHead:00000000 $t
    {standard input}:2980   .text.XMC_VADC_GROUP_IsResultRegisterFifoHead:00000000 XMC_VADC_GROUP_IsResultRegisterFifoHead
    {standard input}:3017   .text.XMC_VADC_GROUP_GetResultFifoTail:00000000 $t
    {standard input}:3022   .text.XMC_VADC_GROUP_GetResultFifoTail:00000000 XMC_VADC_GROUP_GetResultFifoTail
    {standard input}:3103   .text.XMC_VADC_GROUP_GetResultFifoHead:00000000 $t
    {standard input}:3108   .text.XMC_VADC_GROUP_GetResultFifoHead:00000000 XMC_VADC_GROUP_GetResultFifoHead
    {standard input}:3184   .rodata.g_xmc_vadc_group_array:00000000 $d
    {standard input}:3188   .rodata.g_xmc_vadc_group_array:00000000 g_xmc_vadc_group_array
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
