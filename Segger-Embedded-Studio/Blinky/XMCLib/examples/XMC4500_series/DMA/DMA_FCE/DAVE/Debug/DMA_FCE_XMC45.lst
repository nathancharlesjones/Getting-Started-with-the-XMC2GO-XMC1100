
DMA_FCE_XMC45.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e20  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00010000  2**0
                  ALLOC
  2 .bss          00000008  20000000  0c000e20  00010000  2**0
                  ALLOC
  3 .no_init      00000014  2000ffc0  2000ffc0  0000ffc0  2**2
                  ALLOC
  4 .debug_aranges 00000610  00000000  00000000  00008e20  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007180  00000000  00000000  00009430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011e5  00000000  00000000  000105b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001d70  00000000  00000000  00011795  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e58  00000000  00000000  00013508  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00004725  00000000  00000000  00014360  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002df1  00000000  00000000  00018a85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000598  00000000  00000000  0001b876  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .build_attributes 000001d8  00000000  00000000  0001be0e  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 9d 08 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c000e20 	.word	0x0c000e20
 800024c:	20000000 	.word	0x20000000
 8000250:	00000000 	.word	0x00000000
 8000254:	0c000e20 	.word	0x0c000e20
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c000e20 	.word	0x0c000e20
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c000e20 	.word	0x0c000e20
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000000 	.word	0x20000000
 800027c:	00000004 	.word	0x00000004
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	08000549 	.word	0x08000549
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	080009a5 	.word	0x080009a5
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	080008b9 	.word	0x080008b9

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 80002b4:	b082      	sub	sp, #8
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80002b6:	2300      	movs	r3, #0
 80002b8:	9301      	str	r3, [sp, #4]
 80002ba:	9b01      	ldr	r3, [sp, #4]
 80002bc:	4298      	cmp	r0, r3
 80002be:	d906      	bls.n	80002ce <delay+0x1a>
  {
    __NOP();
 80002c0:	bf00      	nop
 *******************************************************************************/
static void delay(uint32_t cycles)
{
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80002c2:	9b01      	ldr	r3, [sp, #4]
 80002c4:	3301      	adds	r3, #1
 80002c6:	9301      	str	r3, [sp, #4]
 80002c8:	9b01      	ldr	r3, [sp, #4]
 80002ca:	4283      	cmp	r3, r0
 80002cc:	d3f8      	bcc.n	80002c0 <delay+0xc>
  {
    __NOP();
  }
}
 80002ce:	b002      	add	sp, #8
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop

080002d4 <SystemCoreSetup>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002d4:	b672      	cpsid	i
{
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 80002d6:	4b0d      	ldr	r3, [pc, #52]	; (800030c <SystemCoreSetup+0x38>)
 80002d8:	4a0d      	ldr	r2, [pc, #52]	; (8000310 <SystemCoreSetup+0x3c>)
 80002da:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002dc:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80002e0:	b662      	cpsie	i
  /* __FPU_USED value depends on compiler/linker options. */
  /* __FPU_USED = 0 if -mfloat-abi=soft is selected */
  /* __FPU_USED = 1 if -mfloat-abi=softfp or –mfloat-abi=hard */

#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80002e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80002e6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80002ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else
  SCB->CPACR = 0;
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 80002ee:	695a      	ldr	r2, [r3, #20]
 80002f0:	f022 0208 	bic.w	r2, r2, #8
 80002f4:	615a      	str	r2, [r3, #20]

  temp = FLASH0->FCON;
 80002f6:	4907      	ldr	r1, [pc, #28]	; (8000314 <SystemCoreSetup+0x40>)
 80002f8:	f241 0214 	movw	r2, #4116	; 0x1014
 80002fc:	588b      	ldr	r3, [r1, r2]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80002fe:	f023 030f 	bic.w	r3, r3, #15
  temp |= PMU_FLASH_WS;
 8000302:	f043 0303 	orr.w	r3, r3, #3
  FLASH0->FCON = temp;
 8000306:	508b      	str	r3, [r1, r2]
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	e000ed00 	.word	0xe000ed00
 8000310:	08000000 	.word	0x08000000
 8000314:	58001000 	.word	0x58001000

08000318 <OSCHP_GetFrequency>:
}

__WEAK uint32_t OSCHP_GetFrequency(void)
{
  return OSCHP_FREQUENCY;
}
 8000318:	4800      	ldr	r0, [pc, #0]	; (800031c <OSCHP_GetFrequency+0x4>)
 800031a:	4770      	bx	lr
 800031c:	00b71b00 	.word	0x00b71b00

08000320 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 8000320:	b510      	push	{r4, lr}
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8000322:	4b1e      	ldr	r3, [pc, #120]	; (800039c <SystemCoreClockUpdate+0x7c>)
 8000324:	68db      	ldr	r3, [r3, #12]
 8000326:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800032a:	d027      	beq.n	800037c <SystemCoreClockUpdate+0x5c>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800032c:	4b1c      	ldr	r3, [pc, #112]	; (80003a0 <SystemCoreClockUpdate+0x80>)
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	f013 0f01 	tst.w	r3, #1
 8000334:	d102      	bne.n	800033c <SystemCoreClockUpdate+0x1c>
      temp = OFI_FREQUENCY;
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8000336:	f7ff ffef 	bl	8000318 <OSCHP_GetFrequency>
 800033a:	e000      	b.n	800033e <SystemCoreClockUpdate+0x1e>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 800033c:	4819      	ldr	r0, [pc, #100]	; (80003a4 <SystemCoreClockUpdate+0x84>)
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 800033e:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <SystemCoreClockUpdate+0x80>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f013 0f04 	tst.w	r3, #4
 8000346:	d011      	beq.n	800036c <SystemCoreClockUpdate+0x4c>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8000348:	4a15      	ldr	r2, [pc, #84]	; (80003a0 <SystemCoreClockUpdate+0x80>)
 800034a:	6894      	ldr	r4, [r2, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 800034c:	6893      	ldr	r3, [r2, #8]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800034e:	6891      	ldr	r1, [r2, #8]
 8000350:	f3c1 4206 	ubfx	r2, r1, #16, #7
    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8000354:	f3c4 6403 	ubfx	r4, r4, #24, #4
 8000358:	1c61      	adds	r1, r4, #1
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800035a:	fb02 1101 	mla	r1, r2, r1, r1
 800035e:	fbb0 f0f1 	udiv	r0, r0, r1
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000362:	f3c3 2306 	ubfx	r3, r3, #8, #7
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000366:	fb03 0200 	mla	r2, r3, r0, r0
 800036a:	e008      	b.n	800037e <SystemCoreClockUpdate+0x5e>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <SystemCoreClockUpdate+0x80>)
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000374:	3301      	adds	r3, #1
      
      temp = (temp / kdiv);
 8000376:	fbb0 f2f3 	udiv	r2, r0, r3
 800037a:	e000      	b.n	800037e <SystemCoreClockUpdate+0x5e>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 800037c:	4a09      	ldr	r2, [pc, #36]	; (80003a4 <SystemCoreClockUpdate+0x84>)
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 800037e:	4907      	ldr	r1, [pc, #28]	; (800039c <SystemCoreClockUpdate+0x7c>)
 8000380:	68c8      	ldr	r0, [r1, #12]
 8000382:	b2c0      	uxtb	r0, r0
 8000384:	3001      	adds	r0, #1
 8000386:	fbb2 f3f0 	udiv	r3, r2, r0
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 800038a:	6908      	ldr	r0, [r1, #16]
 800038c:	f000 0001 	and.w	r0, r0, #1
 8000390:	3001      	adds	r0, #1
 8000392:	fbb3 f0f0 	udiv	r0, r3, r0

  SystemCoreClock = temp;
 8000396:	4b04      	ldr	r3, [pc, #16]	; (80003a8 <SystemCoreClockUpdate+0x88>)
 8000398:	6018      	str	r0, [r3, #0]
 800039a:	bd10      	pop	{r4, pc}
 800039c:	50004600 	.word	0x50004600
 80003a0:	50004710 	.word	0x50004710
 80003a4:	016e3600 	.word	0x016e3600
 80003a8:	2000ffc0 	.word	0x2000ffc0

080003ac <SystemCoreClockSetup>:
  temp |= PMU_FLASH_WS;
  FLASH0->FCON = temp;
}

__WEAK void SystemCoreClockSetup(void)
{
 80003ac:	b510      	push	{r4, lr}
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80003ae:	4b5b      	ldr	r3, [pc, #364]	; (800051c <SystemCoreClockSetup+0x170>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f013 0f01 	tst.w	r3, #1
 80003b6:	d108      	bne.n	80003ca <SystemCoreClockSetup+0x1e>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 80003b8:	4a58      	ldr	r2, [pc, #352]	; (800051c <SystemCoreClockSetup+0x170>)
 80003ba:	6853      	ldr	r3, [r2, #4]
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80003c2:	6813      	ldr	r3, [r2, #0]
 80003c4:	f013 0f01 	tst.w	r3, #1
 80003c8:	d0fb      	beq.n	80003c2 <SystemCoreClockSetup+0x16>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80003ca:	4b55      	ldr	r3, [pc, #340]	; (8000520 <SystemCoreClockSetup+0x174>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f413 7f00 	tst.w	r3, #512	; 0x200
 80003d2:	d008      	beq.n	80003e6 <SystemCoreClockSetup+0x3a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 80003d4:	4a52      	ldr	r2, [pc, #328]	; (8000520 <SystemCoreClockSetup+0x174>)
 80003d6:	6893      	ldr	r3, [r2, #8]
 80003d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003dc:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 80003de:	f641 504c 	movw	r0, #7500	; 0x1d4c
 80003e2:	f7ff ff67 	bl	80002b4 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 80003e6:	4c4f      	ldr	r4, [pc, #316]	; (8000524 <SystemCoreClockSetup+0x178>)
 80003e8:	6863      	ldr	r3, [r4, #4]
 80003ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003ee:	6063      	str	r3, [r4, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80003f0:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80003f4:	f7ff ff5e 	bl	80002b4 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80003f8:	6863      	ldr	r3, [r4, #4]
 80003fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003fe:	f023 0302 	bic.w	r3, r3, #2
 8000402:	6063      	str	r3, [r4, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8000404:	4b48      	ldr	r3, [pc, #288]	; (8000528 <SystemCoreClockSetup+0x17c>)
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	f013 0f30 	tst.w	r3, #48	; 0x30
 800040c:	d021      	beq.n	8000452 <SystemCoreClockSetup+0xa6>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 800040e:	3c10      	subs	r4, #16
 8000410:	6863      	ldr	r3, [r4, #4]
 8000412:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000416:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800041a:	6063      	str	r3, [r4, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 800041c:	f7ff ff7c 	bl	8000318 <OSCHP_GetFrequency>
 8000420:	6862      	ldr	r2, [r4, #4]
 8000422:	4b42      	ldr	r3, [pc, #264]	; (800052c <SystemCoreClockSetup+0x180>)
 8000424:	fba3 1300 	umull	r1, r3, r3, r0
 8000428:	0d1b      	lsrs	r3, r3, #20
 800042a:	3b01      	subs	r3, #1
 800042c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000430:	6063      	str	r3, [r4, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8000432:	4b3c      	ldr	r3, [pc, #240]	; (8000524 <SystemCoreClockSetup+0x178>)
 8000434:	68da      	ldr	r2, [r3, #12]
 8000436:	f022 0201 	bic.w	r2, r2, #1
 800043a:	60da      	str	r2, [r3, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 800043c:	685a      	ldr	r2, [r3, #4]
 800043e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000442:	605a      	str	r2, [r3, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8000444:	461a      	mov	r2, r3
 8000446:	6813      	ldr	r3, [r2, #0]
 8000448:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800044c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000450:	d1f9      	bne.n	8000446 <SystemCoreClockSetup+0x9a>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000452:	4b34      	ldr	r3, [pc, #208]	; (8000524 <SystemCoreClockSetup+0x178>)
 8000454:	685a      	ldr	r2, [r3, #4]
 8000456:	f042 0201 	orr.w	r2, r2, #1
 800045a:	605a      	str	r2, [r3, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 800045c:	685a      	ldr	r2, [r3, #4]
 800045e:	f042 0210 	orr.w	r2, r2, #16
 8000462:	605a      	str	r2, [r3, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000464:	4a32      	ldr	r2, [pc, #200]	; (8000530 <SystemCoreClockSetup+0x184>)
 8000466:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000468:	685a      	ldr	r2, [r3, #4]
 800046a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800046e:	605a      	str	r2, [r3, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000470:	685a      	ldr	r2, [r3, #4]
 8000472:	f022 0210 	bic.w	r2, r2, #16
 8000476:	605a      	str	r2, [r3, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8000478:	685a      	ldr	r2, [r3, #4]
 800047a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800047e:	605a      	str	r2, [r3, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000480:	461a      	mov	r2, r3
 8000482:	6813      	ldr	r3, [r2, #0]
 8000484:	f013 0f04 	tst.w	r3, #4
 8000488:	d0fb      	beq.n	8000482 <SystemCoreClockSetup+0xd6>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 800048a:	4a26      	ldr	r2, [pc, #152]	; (8000524 <SystemCoreClockSetup+0x178>)
 800048c:	6853      	ldr	r3, [r2, #4]
 800048e:	f023 0301 	bic.w	r3, r3, #1
 8000492:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000494:	6813      	ldr	r3, [r2, #0]
 8000496:	f013 0f01 	tst.w	r3, #1
 800049a:	d1fb      	bne.n	8000494 <SystemCoreClockSetup+0xe8>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 800049c:	4b25      	ldr	r3, [pc, #148]	; (8000534 <SystemCoreClockSetup+0x188>)
 800049e:	68da      	ldr	r2, [r3, #12]
 80004a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80004a4:	60da      	str	r2, [r3, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 80004a6:	2200      	movs	r2, #0
 80004a8:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 80004aa:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 80004ac:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 80004ae:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 80004b0:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 80004b2:	2203      	movs	r2, #3
 80004b4:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80004b6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80004ba:	685a      	ldr	r2, [r3, #4]
 80004bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80004c0:	605a      	str	r2, [r3, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004c2:	4a1d      	ldr	r2, [pc, #116]	; (8000538 <SystemCoreClockSetup+0x18c>)
 80004c4:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 80004c6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80004ca:	f7ff fef3 	bl	80002b4 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80004ce:	4a15      	ldr	r2, [pc, #84]	; (8000524 <SystemCoreClockSetup+0x178>)
 80004d0:	6813      	ldr	r3, [r2, #0]
 80004d2:	f013 0f04 	tst.w	r3, #4
 80004d6:	d0fb      	beq.n	80004d0 <SystemCoreClockSetup+0x124>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004d8:	4a18      	ldr	r2, [pc, #96]	; (800053c <SystemCoreClockSetup+0x190>)
 80004da:	4b12      	ldr	r3, [pc, #72]	; (8000524 <SystemCoreClockSetup+0x178>)
 80004dc:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 80004de:	f241 1094 	movw	r0, #4500	; 0x1194
 80004e2:	f7ff fee7 	bl	80002b4 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80004e6:	4a0f      	ldr	r2, [pc, #60]	; (8000524 <SystemCoreClockSetup+0x178>)
 80004e8:	6813      	ldr	r3, [r2, #0]
 80004ea:	f013 0f04 	tst.w	r3, #4
 80004ee:	d0fb      	beq.n	80004e8 <SystemCoreClockSetup+0x13c>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004f0:	4a13      	ldr	r2, [pc, #76]	; (8000540 <SystemCoreClockSetup+0x194>)
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <SystemCoreClockSetup+0x178>)
 80004f4:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 80004f6:	f241 7070 	movw	r0, #6000	; 0x1770
 80004fa:	f7ff fedb 	bl	80002b4 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80004fe:	4a09      	ldr	r2, [pc, #36]	; (8000524 <SystemCoreClockSetup+0x178>)
 8000500:	6813      	ldr	r3, [r2, #0]
 8000502:	f013 0f04 	tst.w	r3, #4
 8000506:	d0fb      	beq.n	8000500 <SystemCoreClockSetup+0x154>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000508:	2205      	movs	r2, #5
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <SystemCoreClockSetup+0x198>)
 800050c:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 800050e:	2200      	movs	r2, #0
 8000510:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8000514:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8000516:	f7ff ff03 	bl	8000320 <SystemCoreClockUpdate>
 800051a:	bd10      	pop	{r4, pc}
 800051c:	50004200 	.word	0x50004200
 8000520:	50004400 	.word	0x50004400
 8000524:	50004710 	.word	0x50004710
 8000528:	50004700 	.word	0x50004700
 800052c:	6b5fca6b 	.word	0x6b5fca6b
 8000530:	01134f00 	.word	0x01134f00
 8000534:	50004600 	.word	0x50004600
 8000538:	01074f00 	.word	0x01074f00
 800053c:	01044f00 	.word	0x01044f00
 8000540:	01034f00 	.word	0x01034f00
 8000544:	50004160 	.word	0x50004160

08000548 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8000548:	b510      	push	{r4, lr}
  memcpy(g_chipid, CHIPID_LOC, 16);
 800054a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800054e:	4c04      	ldr	r4, [pc, #16]	; (8000560 <SystemInit+0x18>)
 8000550:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000552:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8000556:	f7ff febd 	bl	80002d4 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 800055a:	f7ff ff27 	bl	80003ac <SystemCoreClockSetup>
 800055e:	bd10      	pop	{r4, pc}
 8000560:	2000ffc4 	.word	0x2000ffc4

08000564 <XMC_SCU_RESET_DeassertPeripheralReset>:
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000564:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000566:	eb03 0343 	add.w	r3, r3, r3, lsl #1

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800056a:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800056e:	4a02      	ldr	r2, [pc, #8]	; (8000578 <XMC_SCU_RESET_DeassertPeripheralReset+0x14>)
 8000570:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	50004414 	.word	0x50004414

0800057c <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800057c:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
}

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000580:	0f00      	lsrs	r0, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8000582:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000586:	4b04      	ldr	r3, [pc, #16]	; (8000598 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x1c>)
 8000588:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800058c:	421a      	tst	r2, r3
}
 800058e:	bf14      	ite	ne
 8000590:	2001      	movne	r0, #1
 8000592:	2000      	moveq	r0, #0
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	5000440c 	.word	0x5000440c

0800059c <XMC_DMA_Enable>:
  XMC_DMA_Enable(dma);
}

/* Enable GPDMA module */
void XMC_DMA_Enable(XMC_DMA_t *const dma)
{
 800059c:	b510      	push	{r4, lr}
 800059e:	4604      	mov	r4, r0
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <XMC_DMA_Enable+0x1c>)
 80005a2:	4298      	cmp	r0, r3
  {
#endif
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 80005a4:	bf0c      	ite	eq
 80005a6:	4805      	ldreq	r0, [pc, #20]	; (80005bc <XMC_DMA_Enable+0x20>)
  else
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 80005a8:	4805      	ldrne	r0, [pc, #20]	; (80005c0 <XMC_DMA_Enable+0x24>)
 80005aa:	f7ff ffdb 	bl	8000564 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#endif

  dma->DMACFGREG = 0x1U;
 80005ae:	2301      	movs	r3, #1
 80005b0:	f8c4 3398 	str.w	r3, [r4, #920]	; 0x398
 80005b4:	bd10      	pop	{r4, pc}
 80005b6:	bf00      	nop
 80005b8:	50014000 	.word	0x50014000
 80005bc:	20000010 	.word	0x20000010
 80005c0:	20000020 	.word	0x20000020

080005c4 <XMC_DMA_Init>:
 * API IMPLEMENTATION
 *******************************************************************************/

/* Initialize GPDMA */
void XMC_DMA_Init(XMC_DMA_t *const dma)
{
 80005c4:	b508      	push	{r3, lr}
  XMC_DMA_Enable(dma);
 80005c6:	f7ff ffe9 	bl	800059c <XMC_DMA_Enable>
 80005ca:	bd08      	pop	{r3, pc}

080005cc <XMC_DMA_IsEnabled>:
#endif
}

/* Check is the GPDMA peripheral is enabled */
bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma)
{
 80005cc:	b510      	push	{r4, lr}
 80005ce:	4604      	mov	r4, r0
  bool status;

#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <XMC_DMA_IsEnabled+0x28>)
 80005d2:	4298      	cmp	r0, r3
  {
#endif
    status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 80005d4:	bf0c      	ite	eq
 80005d6:	4808      	ldreq	r0, [pc, #32]	; (80005f8 <XMC_DMA_IsEnabled+0x2c>)
#endif
#if defined(GPDMA1)
  }
  else
  {
    status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 80005d8:	4808      	ldrne	r0, [pc, #32]	; (80005fc <XMC_DMA_IsEnabled+0x30>)
 80005da:	f7ff ffcf 	bl	800057c <XMC_SCU_RESET_IsPeripheralResetAsserted>
 80005de:	f080 0001 	eor.w	r0, r0, #1
 80005e2:	b2c0      	uxtb	r0, r0
#endif
  }
#endif

  /* DMA reset is not asserted and peripheral clock is not gated */
  if (status == true)
 80005e4:	b120      	cbz	r0, 80005f0 <XMC_DMA_IsEnabled+0x24>
  {
    status = status && (dma->DMACFGREG != 0U);
 80005e6:	f8d4 0398 	ldr.w	r0, [r4, #920]	; 0x398
 80005ea:	3000      	adds	r0, #0
 80005ec:	bf18      	it	ne
 80005ee:	2001      	movne	r0, #1
  }

  return status;
}
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	bf00      	nop
 80005f4:	50014000 	.word	0x50014000
 80005f8:	20000010 	.word	0x20000010
 80005fc:	20000020 	.word	0x20000020

08000600 <XMC_DMA_EnableRequestLine>:

/* Enable request line */
void XMC_DMA_EnableRequestLine(XMC_DMA_t *const dma, uint8_t line, uint8_t peripheral)
{
 8000600:	b430      	push	{r4, r5}
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <XMC_DMA_EnableRequestLine+0x54>)
 8000604:	4298      	cmp	r0, r3
 8000606:	d112      	bne.n	800062e <XMC_DMA_EnableRequestLine+0x2e>
  {
#else
  XMC_UNUSED_ARG(dma);
#endif
    DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8000608:	f5a3 4377 	sub.w	r3, r3, #63232	; 0xf700
 800060c:	689c      	ldr	r4, [r3, #8]
 800060e:	008d      	lsls	r5, r1, #2
 8000610:	200f      	movs	r0, #15
 8000612:	40a8      	lsls	r0, r5
 8000614:	ea24 0000 	bic.w	r0, r4, r0
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 8000618:	40aa      	lsls	r2, r5
  if (dma == XMC_DMA0)
  {
#else
  XMC_UNUSED_ARG(dma);
#endif
    DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 800061a:	4302      	orrs	r2, r0
 800061c:	609a      	str	r2, [r3, #8]
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
    DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
 800061e:	6918      	ldr	r0, [r3, #16]
 8000620:	f001 0107 	and.w	r1, r1, #7
 8000624:	2201      	movs	r2, #1
 8000626:	408a      	lsls	r2, r1
 8000628:	4302      	orrs	r2, r0
 800062a:	611a      	str	r2, [r3, #16]
 800062c:	e00f      	b.n	800064e <XMC_DMA_EnableRequestLine+0x4e>
#if defined(GPDMA1)
  }
  else
  {
    DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <XMC_DMA_EnableRequestLine+0x58>)
 8000630:	68dc      	ldr	r4, [r3, #12]
 8000632:	008d      	lsls	r5, r1, #2
 8000634:	200f      	movs	r0, #15
 8000636:	40a8      	lsls	r0, r5
 8000638:	ea24 0000 	bic.w	r0, r4, r0
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 800063c:	40aa      	lsls	r2, r5
    DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
#if defined(GPDMA1)
  }
  else
  {
    DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 800063e:	4302      	orrs	r2, r0
 8000640:	60da      	str	r2, [r3, #12]
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
    DLR->LNEN |= (0x100UL << line);
 8000642:	6918      	ldr	r0, [r3, #16]
 8000644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000648:	408a      	lsls	r2, r1
 800064a:	4302      	orrs	r2, r0
 800064c:	611a      	str	r2, [r3, #16]
  }
#endif
}
 800064e:	bc30      	pop	{r4, r5}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	50014000 	.word	0x50014000
 8000658:	50004900 	.word	0x50004900

0800065c <XMC_DMA_CH_EnableEvent>:
  return (bool)(dma->CH[channel].CFGL & (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk);
}

/* Enable GPDMA event */
void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
 800065c:	b410      	push	{r4}

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
  {
    if (event & ((uint32_t)0x1UL << event_idx))
    {
      dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
 800065e:	f240 1401 	movw	r4, #257	; 0x101
 8000662:	408c      	lsls	r4, r1
/* Enable GPDMA event */
void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
  uint32_t event_idx;

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8000664:	2300      	movs	r3, #0
  {
    if (event & ((uint32_t)0x1UL << event_idx))
 8000666:	fa22 f103 	lsr.w	r1, r2, r3
 800066a:	f011 0f01 	tst.w	r1, #1
 800066e:	d003      	beq.n	8000678 <XMC_DMA_CH_EnableEvent+0x1c>
 8000670:	0059      	lsls	r1, r3, #1
    {
      dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
 8000672:	31c4      	adds	r1, #196	; 0xc4
 8000674:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
/* Enable GPDMA event */
void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
  uint32_t event_idx;

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8000678:	3301      	adds	r3, #1
 800067a:	2b05      	cmp	r3, #5
 800067c:	d1f3      	bne.n	8000666 <XMC_DMA_CH_EnableEvent+0xa>
    if (event & ((uint32_t)0x1UL << event_idx))
    {
      dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
    }
  }
}
 800067e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000682:	4770      	bx	lr

08000684 <XMC_DMA_CH_ClearEventStatus>:
  }
}

/* Clear GPDMA event */
void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
 8000684:	b410      	push	{r4}

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
  {
    if (event & (uint32_t)((uint32_t)0x1UL << event_idx))
    {
      dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
 8000686:	2401      	movs	r4, #1
 8000688:	408c      	lsls	r4, r1
/* Clear GPDMA event */
void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
  uint32_t event_idx;

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 800068a:	2300      	movs	r3, #0
  {
    if (event & (uint32_t)((uint32_t)0x1UL << event_idx))
 800068c:	fa22 f103 	lsr.w	r1, r2, r3
 8000690:	f011 0f01 	tst.w	r1, #1
 8000694:	d003      	beq.n	800069e <XMC_DMA_CH_ClearEventStatus+0x1a>
 8000696:	0059      	lsls	r1, r3, #1
    {
      dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
 8000698:	31ce      	adds	r1, #206	; 0xce
 800069a:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
/* Clear GPDMA event */
void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
  uint32_t event_idx;

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 800069e:	3301      	adds	r3, #1
 80006a0:	2b05      	cmp	r3, #5
 80006a2:	d1f3      	bne.n	800068c <XMC_DMA_CH_ClearEventStatus+0x8>
    {
      dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
    }
  }

}
 80006a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <XMC_DMA_CH_Init>:
  return (bool)(dma->CHENREG & ((uint32_t)1U << channel));
}

/* Initialize DMA channel */
XMC_DMA_CH_STATUS_t XMC_DMA_CH_Init(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_CONFIG_t *const config)
{
 80006ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ae:	4605      	mov	r5, r0
 80006b0:	460e      	mov	r6, r1
 80006b2:	4614      	mov	r4, r2
  XMC_DMA_CH_STATUS_t status;
  uint8_t line;
  uint8_t peripheral;

  if (XMC_DMA_IsEnabled(dma) == true)
 80006b4:	f7ff ff8a 	bl	80005cc <XMC_DMA_IsEnabled>
 80006b8:	2800      	cmp	r0, #0
 80006ba:	f000 80c8 	beq.w	800084e <XMC_DMA_CH_Init+0x1a2>
}

/* Check if a DMA channel is enabled */
bool XMC_DMA_CH_IsEnabled(XMC_DMA_t *const dma, const uint8_t channel)
{
  return (bool)(dma->CHENREG & ((uint32_t)1U << channel));
 80006be:	f8d5 33a0 	ldr.w	r3, [r5, #928]	; 0x3a0
 80006c2:	40f3      	lsrs	r3, r6
  uint8_t line;
  uint8_t peripheral;

  if (XMC_DMA_IsEnabled(dma) == true)
  {
    if (XMC_DMA_CH_IsEnabled(dma, channel) == false)
 80006c4:	f013 0f01 	tst.w	r3, #1
 80006c8:	f040 80c3 	bne.w	8000852 <XMC_DMA_CH_Init+0x1a6>
    {
      dma->CH[channel].SAR = config->src_addr;
 80006cc:	6861      	ldr	r1, [r4, #4]
 80006ce:	2258      	movs	r2, #88	; 0x58
 80006d0:	fb02 f206 	mul.w	r2, r2, r6
 80006d4:	18ab      	adds	r3, r5, r2
 80006d6:	50a9      	str	r1, [r5, r2]
      dma->CH[channel].DAR = config->dst_addr;
 80006d8:	68a2      	ldr	r2, [r4, #8]
 80006da:	609a      	str	r2, [r3, #8]
      dma->CH[channel].LLP = (uint32_t)config->linked_list_pointer;
 80006dc:	68e2      	ldr	r2, [r4, #12]
 80006de:	611a      	str	r2, [r3, #16]
      dma->CH[channel].CTLH = (uint32_t)config->block_size;
 80006e0:	8b21      	ldrh	r1, [r4, #24]
 80006e2:	61d9      	str	r1, [r3, #28]
      dma->CH[channel].CTLL = config->control;
 80006e4:	6822      	ldr	r2, [r4, #0]
 80006e6:	619a      	str	r2, [r3, #24]

      dma->CH[channel].CFGL = (uint32_t)((uint32_t)config->priority |
 80006e8:	7ee2      	ldrb	r2, [r4, #27]
 80006ea:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 80006ee:	641a      	str	r2, [r3, #64]	; 0x40
                                         (uint32_t)GPDMA0_CH_CFGL_HS_SEL_SRC_Msk |
                                         (uint32_t)GPDMA0_CH_CFGL_HS_SEL_DST_Msk);

      if ((dma == XMC_DMA0) && (channel < (uint8_t)2))
 80006f0:	4b5a      	ldr	r3, [pc, #360]	; (800085c <XMC_DMA_CH_Init+0x1b0>)
 80006f2:	429d      	cmp	r5, r3
 80006f4:	d10c      	bne.n	8000710 <XMC_DMA_CH_Init+0x64>
 80006f6:	2e01      	cmp	r6, #1
 80006f8:	d80a      	bhi.n	8000710 <XMC_DMA_CH_Init+0x64>
      {
        /* Configure scatter and gather */
        dma->CH[channel].SGR = config->src_gather_control;
 80006fa:	6922      	ldr	r2, [r4, #16]
 80006fc:	2358      	movs	r3, #88	; 0x58
 80006fe:	fb03 f306 	mul.w	r3, r3, r6
 8000702:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
 8000706:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
 800070a:	649a      	str	r2, [r3, #72]	; 0x48
        dma->CH[channel].DSR = config->dst_scatter_control;
 800070c:	6962      	ldr	r2, [r4, #20]
 800070e:	651a      	str	r2, [r3, #80]	; 0x50
      }

      if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
 8000710:	8c23      	ldrh	r3, [r4, #32]
 8000712:	b9f3      	cbnz	r3, 8000752 <XMC_DMA_CH_Init+0xa6>
      {
        /* Hardware handshaking interface configuration */
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 8000714:	78a3      	ldrb	r3, [r4, #2]
 8000716:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800071a:	2b10      	cmp	r3, #16
 800071c:	d119      	bne.n	8000752 <XMC_DMA_CH_Init+0xa6>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
        {
#if defined(GPDMA1)
          if (dma == XMC_DMA0)
 800071e:	4b4f      	ldr	r3, [pc, #316]	; (800085c <XMC_DMA_CH_Init+0x1b0>)
 8000720:	429d      	cmp	r5, r3
          {
#endif
            line = config->dst_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 8000722:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 8000726:	bf0c      	ite	eq
 8000728:	f001 0107 	andeq.w	r1, r1, #7
#if defined(GPDMA1)
          }
          else
          {
            line = config->dst_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 800072c:	f001 0103 	andne.w	r1, r1, #3
          }
#endif
          peripheral = config->dst_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 8000730:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22

          dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_DEST_PER_Pos);
 8000734:	2758      	movs	r7, #88	; 0x58
 8000736:	fb07 5706 	mla	r7, r7, r6, r5
 800073a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800073c:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
 8000740:	647b      	str	r3, [r7, #68]	; 0x44
          XMC_DMA_EnableRequestLine(dma, line, peripheral);
 8000742:	4628      	mov	r0, r5
 8000744:	0912      	lsrs	r2, r2, #4
 8000746:	f7ff ff5b 	bl	8000600 <XMC_DMA_EnableRequestLine>
          dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_DST_Msk;
 800074a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800074c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000750:	643b      	str	r3, [r7, #64]	; 0x40
        }
      }


      if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
 8000752:	8ba3      	ldrh	r3, [r4, #28]
 8000754:	b9e3      	cbnz	r3, 8000790 <XMC_DMA_CH_Init+0xe4>
      {
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 8000756:	78a3      	ldrb	r3, [r4, #2]
 8000758:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800075c:	2b20      	cmp	r3, #32
 800075e:	d117      	bne.n	8000790 <XMC_DMA_CH_Init+0xe4>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
        {
#if defined(GPDMA1)
          if (dma == XMC_DMA0)
 8000760:	4b3e      	ldr	r3, [pc, #248]	; (800085c <XMC_DMA_CH_Init+0x1b0>)
 8000762:	429d      	cmp	r5, r3
          {
#endif
            line = config->src_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 8000764:	7fa1      	ldrb	r1, [r4, #30]
 8000766:	bf0c      	ite	eq
 8000768:	f001 0107 	andeq.w	r1, r1, #7
#if defined(GPDMA1)
          }
          else
          {
            line = config->src_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 800076c:	f001 0103 	andne.w	r1, r1, #3
          }
#endif
          peripheral = config->src_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 8000770:	7fa2      	ldrb	r2, [r4, #30]

          dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_SRC_PER_Pos);
 8000772:	2758      	movs	r7, #88	; 0x58
 8000774:	fb07 5706 	mla	r7, r7, r6, r5
 8000778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800077a:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 800077e:	647b      	str	r3, [r7, #68]	; 0x44
          XMC_DMA_EnableRequestLine(dma, line, peripheral);
 8000780:	4628      	mov	r0, r5
 8000782:	0912      	lsrs	r2, r2, #4
 8000784:	f7ff ff3c 	bl	8000600 <XMC_DMA_EnableRequestLine>
          dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_SRC_Msk;
 8000788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800078a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800078e:	643b      	str	r3, [r7, #64]	; 0x40
        }
      }
      
      XMC_DMA_CH_ClearEventStatus(dma, channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE |
 8000790:	4628      	mov	r0, r5
 8000792:	4631      	mov	r1, r6
 8000794:	221f      	movs	r2, #31
 8000796:	f7ff ff75 	bl	8000684 <XMC_DMA_CH_ClearEventStatus>
                                                           (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
                                                           (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
                                                           (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE |
                                                           (uint32_t)XMC_DMA_CH_EVENT_ERROR));

      switch (config->transfer_type)
 800079a:	7ea3      	ldrb	r3, [r4, #26]
 800079c:	3b01      	subs	r3, #1
 800079e:	2b07      	cmp	r3, #7
 80007a0:	d859      	bhi.n	8000856 <XMC_DMA_CH_Init+0x1aa>
 80007a2:	e8df f003 	tbb	[pc, r3]
 80007a6:	0d04      	.short	0x0d04
 80007a8:	35281f16 	.word	0x35281f16
 80007ac:	4b3e      	.short	0x4b3e
      {
        case XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK:
          break;

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 80007ae:	2358      	movs	r3, #88	; 0x58
 80007b0:	fb03 5506 	mla	r5, r3, r6, r5
 80007b4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ba:	642b      	str	r3, [r5, #64]	; 0x40

        default:
          break;
      }

      status = XMC_DMA_CH_STATUS_OK;
 80007bc:	2000      	movs	r0, #0
        case XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK:
          break;

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
          break;
 80007be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 80007c0:	2358      	movs	r3, #88	; 0x58
 80007c2:	fb03 5506 	mla	r5, r3, r6, r5
 80007c6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80007cc:	642b      	str	r3, [r5, #64]	; 0x40

        default:
          break;
      }

      status = XMC_DMA_CH_STATUS_OK;
 80007ce:	2000      	movs	r0, #0
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
          break;

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
          break;
 80007d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)((uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk |
 80007d2:	2358      	movs	r3, #88	; 0x58
 80007d4:	fb03 5506 	mla	r5, r3, r6, r5
 80007d8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007da:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80007de:	642b      	str	r3, [r5, #64]	; 0x40

        default:
          break;
      }

      status = XMC_DMA_CH_STATUS_OK;
 80007e0:	2000      	movs	r0, #0
          break;

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)((uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk |
                                              (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
          break;
 80007e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED:
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 80007e4:	2358      	movs	r3, #88	; 0x58
 80007e6:	fb03 5506 	mla	r5, r3, r6, r5
 80007ea:	69ab      	ldr	r3, [r5, #24]
 80007ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80007f0:	61ab      	str	r3, [r5, #24]

        default:
          break;
      }

      status = XMC_DMA_CH_STATUS_OK;
 80007f2:	2000      	movs	r0, #0
                                              (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
          break;

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED:
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
          break;
 80007f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 80007f6:	2358      	movs	r3, #88	; 0x58
 80007f8:	fb03 5506 	mla	r5, r3, r6, r5
 80007fc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000802:	642b      	str	r3, [r5, #64]	; 0x40
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 8000804:	69ab      	ldr	r3, [r5, #24]
 8000806:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800080a:	61ab      	str	r3, [r5, #24]

        default:
          break;
      }

      status = XMC_DMA_CH_STATUS_OK;
 800080c:	2000      	movs	r0, #0
          break;

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
          break;
 800080e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS:
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 8000810:	2358      	movs	r3, #88	; 0x58
 8000812:	fb03 5506 	mla	r5, r3, r6, r5
 8000816:	69ab      	ldr	r3, [r5, #24]
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081c:	61ab      	str	r3, [r5, #24]

        default:
          break;
      }

      status = XMC_DMA_CH_STATUS_OK;
 800081e:	2000      	movs	r0, #0
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
          break;

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS:
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
          break;
 8000820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 8000822:	2358      	movs	r3, #88	; 0x58
 8000824:	fb03 5506 	mla	r5, r3, r6, r5
 8000828:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800082a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800082e:	642b      	str	r3, [r5, #64]	; 0x40
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 8000830:	69ab      	ldr	r3, [r5, #24]
 8000832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000836:	61ab      	str	r3, [r5, #24]

        default:
          break;
      }

      status = XMC_DMA_CH_STATUS_OK;
 8000838:	2000      	movs	r0, #0
          break;

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
          break;
 800083a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED:
          dma->CH[channel].CTLL |= (uint32_t)((uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk |
 800083c:	2358      	movs	r3, #88	; 0x58
 800083e:	fb03 5506 	mla	r5, r3, r6, r5
 8000842:	69ab      	ldr	r3, [r5, #24]
 8000844:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 8000848:	61ab      	str	r3, [r5, #24]

        default:
          break;
      }

      status = XMC_DMA_CH_STATUS_OK;
 800084a:	2000      	movs	r0, #0
          break;

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED:
          dma->CH[channel].CTLL |= (uint32_t)((uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk |
                                              (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
          break;
 800084c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      status = XMC_DMA_CH_STATUS_BUSY;
    }
  }
  else 
  {
    status = XMC_DMA_CH_STATUS_ERROR;
 800084e:	2001      	movs	r0, #1
 8000850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      status = XMC_DMA_CH_STATUS_OK;

    }
    else
    {
      status = XMC_DMA_CH_STATUS_BUSY;
 8000852:	2002      	movs	r0, #2
 8000854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

        default:
          break;
      }

      status = XMC_DMA_CH_STATUS_OK;
 8000856:	2000      	movs	r0, #0
  {
    status = XMC_DMA_CH_STATUS_ERROR;
  }
  
  return status;
}
 8000858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800085a:	bf00      	nop
 800085c:	50014000 	.word	0x50014000

08000860 <XMC_FCE_Init>:
 * Initialize the FCE peripheral:
 * Update FCE configuration and initialize seed value
 */
XMC_FCE_STATUS_t XMC_FCE_Init(const XMC_FCE_t *const engine)
{
  engine->kernel_ptr->CFG = engine->fce_cfg_update.regval;
 8000860:	6803      	ldr	r3, [r0, #0]
 8000862:	6842      	ldr	r2, [r0, #4]
 8000864:	609a      	str	r2, [r3, #8]
  engine->kernel_ptr->CRC = engine->seedvalue;
 8000866:	6803      	ldr	r3, [r0, #0]
 8000868:	6882      	ldr	r2, [r0, #8]
 800086a:	619a      	str	r2, [r3, #24]
  
  return XMC_FCE_STATUS_OK;
}
 800086c:	2000      	movs	r0, #0
 800086e:	4770      	bx	lr

08000870 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8000870:	b410      	push	{r4}
 8000872:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8000876:	4418      	add	r0, r3
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8000878:	6904      	ldr	r4, [r0, #16]
 800087a:	f001 0103 	and.w	r1, r1, #3
 800087e:	00c9      	lsls	r1, r1, #3
 8000880:	23f8      	movs	r3, #248	; 0xf8
 8000882:	408b      	lsls	r3, r1
 8000884:	ea24 0303 	bic.w	r3, r4, r3
 8000888:	6103      	str	r3, [r0, #16]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 800088a:	6903      	ldr	r3, [r0, #16]
 800088c:	408a      	lsls	r2, r1
 800088e:	4313      	orrs	r3, r2
 8000890:	6103      	str	r3, [r0, #16]
}
 8000892:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000896:	4770      	bx	lr

08000898 <_init>:
  }
}

/* Init */
void _init(void)
{}
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <GPDMA0_0_IRQHandler>:
};

volatile bool transfer_done = false;

void GPDMA0_0_IRQHandler(void)
{
 800089c:	b508      	push	{r3, lr}
  transfer_done = true;
 800089e:	2201      	movs	r2, #1
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <GPDMA0_0_IRQHandler+0x14>)
 80008a2:	701a      	strb	r2, [r3, #0]
  XMC_DMA_CH_ClearEventStatus(XMC_DMA0, 2, XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE);
 80008a4:	4803      	ldr	r0, [pc, #12]	; (80008b4 <GPDMA0_0_IRQHandler+0x18>)
 80008a6:	2102      	movs	r1, #2
 80008a8:	460a      	mov	r2, r1
 80008aa:	f7ff feeb 	bl	8000684 <XMC_DMA_CH_ClearEventStatus>
 80008ae:	bd08      	pop	{r3, pc}
 80008b0:	20000000 	.word	0x20000000
 80008b4:	50014000 	.word	0x50014000

080008b8 <main>:
}

int main(void)
{
 80008b8:	b510      	push	{r4, lr}
  XMC_GPIO_SetMode(LED1, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 80008ba:	482f      	ldr	r0, [pc, #188]	; (8000978 <main+0xc0>)
 80008bc:	2109      	movs	r1, #9
 80008be:	2280      	movs	r2, #128	; 0x80
 80008c0:	f7ff ffd6 	bl	8000870 <XMC_GPIO_SetMode>

  XMC_DMA_Init(XMC_DMA0);
 80008c4:	4c2d      	ldr	r4, [pc, #180]	; (800097c <main+0xc4>)
 80008c6:	4620      	mov	r0, r4
 80008c8:	f7ff fe7c 	bl	80005c4 <XMC_DMA_Init>
  XMC_DMA_CH_Init(XMC_DMA0, 2, &dma_ch_config);
 80008cc:	4620      	mov	r0, r4
 80008ce:	2102      	movs	r1, #2
 80008d0:	4a2b      	ldr	r2, [pc, #172]	; (8000980 <main+0xc8>)
 80008d2:	f7ff feeb 	bl	80006ac <XMC_DMA_CH_Init>
  XMC_DMA_CH_EnableEvent(XMC_DMA0, 2, XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE);
 80008d6:	4620      	mov	r0, r4
 80008d8:	2102      	movs	r1, #2
 80008da:	460a      	mov	r2, r1
 80008dc:	f7ff febe 	bl	800065c <XMC_DMA_CH_EnableEvent>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e0:	4b28      	ldr	r3, [pc, #160]	; (8000984 <main+0xcc>)
 80008e2:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e8:	f1c3 0107 	rsb	r1, r3, #7
 80008ec:	2906      	cmp	r1, #6
 80008ee:	bf28      	it	cs
 80008f0:	2106      	movcs	r1, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008f2:	1d9a      	adds	r2, r3, #6
 80008f4:	2a06      	cmp	r2, #6
 80008f6:	bf8c      	ite	hi
 80008f8:	f103 32ff 	addhi.w	r2, r3, #4294967295
 80008fc:	2200      	movls	r2, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008fe:	2301      	movs	r3, #1
 8000900:	408b      	lsls	r3, r1
 8000902:	3b01      	subs	r3, #1
 8000904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000908:	4093      	lsls	r3, r2
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	b2db      	uxtb	r3, r3
 800090e:	4a1e      	ldr	r2, [pc, #120]	; (8000988 <main+0xd0>)
 8000910:	f882 3369 	strb.w	r3, [r2, #873]	; 0x369
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000918:	60d3      	str	r3, [r2, #12]

  /* Enable DMA event handling */
  NVIC_SetPriority(GPDMA0_0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63, 0));
  NVIC_EnableIRQ(GPDMA0_0_IRQn);

  XMC_FCE_Init(&crc_engine);
 800091a:	481c      	ldr	r0, [pc, #112]	; (800098c <main+0xd4>)
 800091c:	f7ff ffa0 	bl	8000860 <XMC_FCE_Init>
 * message and proceed with the comparison of the result register (RES) value with
 * the CHECK register value.
 */
__STATIC_INLINE void XMC_FCE_UpdateCRCCheck(const XMC_FCE_t *const engine, const uint32_t checkvalue)
{
  engine->kernel_ptr->CHECK = 0xFACECAFEU;
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <main+0xd8>)
 8000922:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <main+0xdc>)
 8000924:	615a      	str	r2, [r3, #20]
  engine->kernel_ptr->CHECK = checkvalue;
 8000926:	491c      	ldr	r1, [pc, #112]	; (8000998 <main+0xe0>)
 8000928:	6159      	str	r1, [r3, #20]
 * the value of the LENGTH bit field. The LENGTH field shall be reloaded with its
 * configuration value at the end of the cycle where LENGTH reaches 0.
 */
__STATIC_INLINE void XMC_FCE_UpdateLength(const XMC_FCE_t *const engine, const uint32_t checklength)
{
  engine->kernel_ptr->LENGTH = 0xFACECAFEU;
 800092a:	611a      	str	r2, [r3, #16]
  engine->kernel_ptr->LENGTH = checklength;
 800092c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000930:	611a      	str	r2, [r3, #16]
 * Automatic reload of LENGTH field (at the end of message) can be enabled using the
 * ALR bit field.
 */
__STATIC_INLINE void XMC_FCE_EnableOperation(const XMC_FCE_t *const engine, uint32_t operation)
{
  engine->kernel_ptr->CFG |= operation;
 8000932:	689a      	ldr	r2, [r3, #8]
 8000934:	f042 0210 	orr.w	r2, r2, #16
 8000938:	609a      	str	r2, [r3, #8]
 * ensure that the GPDMA module itself is enabled before calling this function.
 * See ::XMC_DMA_Enable() for details.
 */
__STATIC_INLINE void XMC_DMA_CH_Enable(XMC_DMA_t *const dma, const uint8_t channel)
{
  dma->CHENREG = (uint32_t)(0x101UL << channel);   
 800093a:	f240 4204 	movw	r2, #1028	; 0x404
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <main+0xc4>)
 8000940:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
  /* Enable auto checking of the calculated CRC */
  XMC_FCE_EnableOperation(&crc_engine, XMC_FCE_CFG_CONFIG_CCE);

  XMC_DMA_CH_Enable(XMC_DMA0, 2);

  while (transfer_done == false);
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <main+0xe4>)
 8000946:	781a      	ldrb	r2, [r3, #0]
 8000948:	f012 0fff 	tst.w	r2, #255	; 0xff
 800094c:	d0fb      	beq.n	8000946 <main+0x8e>
 * The function returns the status of a single requested FCE event by reading the
 * appropriate bit-fields of the STS register.
 */
__STATIC_INLINE bool XMC_FCE_GetEventStatus(const XMC_FCE_t *const engine, XMC_FCE_STS_FLAG_t event)
{
  return (bool) (engine->kernel_ptr->STS & (uint32_t)event);
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <main+0xd8>)
 8000950:	68db      	ldr	r3, [r3, #12]

  if (XMC_FCE_GetEventStatus(&crc_engine, XMC_FCE_STS_MISMATCH_CRC) == false)
 8000952:	f013 0f01 	tst.w	r3, #1
 8000956:	d104      	bne.n	8000962 <main+0xaa>

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 8000958:	f04f 2202 	mov.w	r2, #33554944	; 0x2000200
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <main+0xc0>)
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	e009      	b.n	8000976 <main+0xbe>
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <main+0xc0>)
 8000964:	f04f 2102 	mov.w	r1, #33554944	; 0x2000200
 8000968:	4a0d      	ldr	r2, [pc, #52]	; (80009a0 <main+0xe8>)
 800096a:	6041      	str	r1, [r0, #4]
 800096c:	4613      	mov	r3, r2
	while(1)
	{
	  XMC_GPIO_ToggleOutput(LED1);
	  for (int32_t delay = 0; delay < 0x1fffff; ++delay)
	  {
		__NOP();
 800096e:	bf00      	nop
  else
  {
	while(1)
	{
	  XMC_GPIO_ToggleOutput(LED1);
	  for (int32_t delay = 0; delay < 0x1fffff; ++delay)
 8000970:	3b01      	subs	r3, #1
 8000972:	d1fc      	bne.n	800096e <main+0xb6>
 8000974:	e7f9      	b.n	800096a <main+0xb2>
		__NOP();
	  }
	}
  }

  while(1);
 8000976:	e7fe      	b.n	8000976 <main+0xbe>
 8000978:	48028300 	.word	0x48028300
 800097c:	50014000 	.word	0x50014000
 8000980:	08000df0 	.word	0x08000df0
 8000984:	e000ed00 	.word	0xe000ed00
 8000988:	e000e100 	.word	0xe000e100
 800098c:	08000e14 	.word	0x08000e14
 8000990:	50020020 	.word	0x50020020
 8000994:	facecafe 	.word	0xfacecafe
 8000998:	99f69cd9 	.word	0x99f69cd9
 800099c:	20000000 	.word	0x20000000
 80009a0:	001fffff 	.word	0x001fffff

080009a4 <__libc_init_array>:
 80009a4:	b570      	push	{r4, r5, r6, lr}
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <__libc_init_array+0x3c>)
 80009a8:	4c0e      	ldr	r4, [pc, #56]	; (80009e4 <__libc_init_array+0x40>)
 80009aa:	1ae4      	subs	r4, r4, r3
 80009ac:	10a4      	asrs	r4, r4, #2
 80009ae:	2500      	movs	r5, #0
 80009b0:	461e      	mov	r6, r3
 80009b2:	42a5      	cmp	r5, r4
 80009b4:	d004      	beq.n	80009c0 <__libc_init_array+0x1c>
 80009b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009ba:	4798      	blx	r3
 80009bc:	3501      	adds	r5, #1
 80009be:	e7f8      	b.n	80009b2 <__libc_init_array+0xe>
 80009c0:	f7ff ff6a 	bl	8000898 <_init>
 80009c4:	4c08      	ldr	r4, [pc, #32]	; (80009e8 <__libc_init_array+0x44>)
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <__libc_init_array+0x48>)
 80009c8:	1ae4      	subs	r4, r4, r3
 80009ca:	10a4      	asrs	r4, r4, #2
 80009cc:	2500      	movs	r5, #0
 80009ce:	461e      	mov	r6, r3
 80009d0:	42a5      	cmp	r5, r4
 80009d2:	d004      	beq.n	80009de <__libc_init_array+0x3a>
 80009d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009d8:	4798      	blx	r3
 80009da:	3501      	adds	r5, #1
 80009dc:	e7f8      	b.n	80009d0 <__libc_init_array+0x2c>
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	20000000 	.word	0x20000000
 80009e4:	20000000 	.word	0x20000000
 80009e8:	20000000 	.word	0x20000000
 80009ec:	20000000 	.word	0x20000000

080009f0 <data>:
 80009f0:	54ec0525 447135b2 6eed86f9 10b9ee76     %..T.5qD...nv...
 8000a00:	9c5c8f55 44c8f0a0 9f5c41d3 4a6c8ef3     U.\....D.A\...lJ
 8000a10:	3cb43ac2 9a9e6ca4 a296d5a0 2be2ef95     .:.<.l.........+
 8000a20:	7501b963 2906ad29 e695df1e a1e3c9e8     c..u)..)........
 8000a30:	907339c8 f205c7a7 d6de4d18 b6a9d7d5     .9s......M......
 8000a40:	79f98f63 467f7a6e 11b5b005 69b97842     c..ynz.F....Bx.i
 8000a50:	d1b9129c ddba1e26 42e421ef a8bedde7     ....&....!.B....
 8000a60:	33995d90 c639d14d ac58e5ed 5d71fe17     .].3M.9...X...q]
 8000a70:	ee1cdf08 3d5e0d81 acb04fa7 7fd4ce83     ......^=.O......
 8000a80:	6be85d52 02eb1a5a 24cc89dc 37f18392     R].kZ......$...7
 8000a90:	56c886e7 9c8bcc4c bb3475da 0424f800     ...VL....u4...$.
 8000aa0:	404a14f4 41d7b9a4 8f97d2b4 16d928c5     ..J@...A.....(..
 8000ab0:	2c059085 c1bacf2d e3a582fe 48ed877c     ...,-.......|..H
 8000ac0:	c2be6bbb 3f83c7ef 752ce9cb 0d1e01ca     .k.....?..,u....
 8000ad0:	02ecdf82 3d45f86b b359203d 611a60e6     ....k.E== Y..`.a
 8000ae0:	3fe3b879 34e81b39 5b761930 869ec1a5     y..?9..40.v[....
 8000af0:	bf58005d 8b9c20f5 058d22a3 11ab9e24     ].X.. ..."..$...
 8000b00:	cc534712 a268feb4 4ea7de22 34dc0414     .GS...h."..N...4
 8000b10:	f430cb9d 9069905b 3a9487e0 930c11ba     ..0.[.i....:....
 8000b20:	5d9d6ff3 9c3b5b26 d099a501 e55fc72e     .o.]&[;......._.
 8000b30:	76c54e09 11243967 3b952bd2 0617f2fc     .N.vg9$..+.;....
 8000b40:	2a14fa99 42b1c525 f9eef4a4 a090f1c3     ...*%..B........
 8000b50:	fa2480bd 548e7924 2623ce99 544299f4     ..$.$y.T..#&..BT
 8000b60:	b902da0e 71725f30 52016afb 95386417     ....0_rq.j.R.d8.
 8000b70:	9ad099ab 12f6e52d 618d04c7 d4ccd8a3     ....-......a....
 8000b80:	01ab1763 8893836d 3a2d270e 999c0ddf     c...m....'-:....
 8000b90:	06ed62be 887f8de5 20aa3875 22637f43     .b......u8. C.c"
 8000ba0:	85419b21 2e54855d c6d0d493 38e8f00c     !.A.].T........8
 8000bb0:	2f463851 a5930018 c108cea8 9d20ae8a     Q8F/.......... .
 8000bc0:	4ea42837 3db7ae94 da364f9b 256f506a     7(.N...=.O6.jPo%
 8000bd0:	78273ade 6ac3ce93 0b79a658 6ee19398     .:'x...jX.y....n
 8000be0:	a3c157a3 0f90187b eb4b6797 af834c40     .W..{....gK.@L..
 8000bf0:	cbd6bcbb c103bc69 5f2e65cc 472aad0b     ....i....e._..*G
 8000c00:	06911251 87692d91 999eca09 a8e1bf50     Q....-i.....P...
 8000c10:	68642547 0b8b4f7e b0731848 4ed787a3     G%dh~O..H.s....N
 8000c20:	a9af212e 8d105838 d4a1c0a3 dd03de66     .!..8X......f...
 8000c30:	5675cce7 2b0a99a5 4c2a3071 0635d4f3     ..uV...+q0*L..5.
 8000c40:	d5eba468 77b2cce7 b9b2722f 0457fcfa     h......w/r....W.
 8000c50:	c963d641 2401afca 5f29b15e 616a97d1     A.c....$^.)_..ja
 8000c60:	82415fa4 e7c0e4a8 2d7138e2 a4dff120     ._A......8q- ...
 8000c70:	1301a423 eab3a9b0 432dcefc dabd708b     #.........-C.p..
 8000c80:	832bd129 d7fa5ca1 607cf76c 8d9ea21d     ).+..\..l.|`....
 8000c90:	2dbe329b 7d6fe0b1 cff21250 ee449a83     .2.-..o}P.....D.
 8000ca0:	70b84c66 99882725 2487f50a 11dd0b02     fL.p%'.....$....
 8000cb0:	66c457b4 a310227d f0ef426f 557a1c16     .W.f}"..oB....zU
 8000cc0:	2b42e34d b2adf3cb 11430900 a768bc11     M.B+......C...h.
 8000cd0:	fb364887 150b6f3c 3d60cedd 7c54e784     .H6.<o....`=..T|
 8000ce0:	b1ac29ac c90ba26b dcd7775c fd9e7ff8     .)..k...\w......
 8000cf0:	d9cd97d1 4858f921 08feda90 2f7fde9e     ....!.XH......./
 8000d00:	035323c9 833e9235 7e183785 8de27d17     .#S.5.>..7.~.}..
 8000d10:	35e6c361 ead03ba8 3227d1b3 13a0bedf     a..5.;....'2....
 8000d20:	f77c1edd 61bdc1f3 5270b33b cd86c8ae     ..|....a;.pR....
 8000d30:	f4ed9d50 365a767d 0b048cba 8571e3cf     P...}vZ6......q.
 8000d40:	be7c1d76 677d748f 90c664c4 4a2b89c6     v.|..t}g.d....+J
 8000d50:	90748331 7d6ae589 fd8746d1 504b41da     1.t...j}.F...AKP
 8000d60:	4a98b9d2 d7073e19 f8ae5049 bdf25050     ...J.>..IP..PP..
 8000d70:	660b5035 0ffa4172 49cf273d 3c75f234     5P.frA..='.I4.u<
 8000d80:	199fc2a7 114a73a9 446a88be cd397931     .....sJ...jD1y9.
 8000d90:	4c9ac32b 1fd7d8eb 39672ba1 e352ed93     +..L.....+g9..R.
 8000da0:	baca029f d88b5bae e8a1ecb5 bf2df783     .....[........-.
 8000db0:	ddc77dfc 5ea152a1 e08bc11c 923ecdc6     .}...R.^......>.
 8000dc0:	75a7e9ef abab7297 7edbc951 38ce6f2a     ...u.r..Q..~*o.8
 8000dd0:	6e8392a8 88576db6 4124d40e d58ad161     ...n.mW...$Aa...
 8000de0:	d667dc29 c3bb310b b46ded73 fffb622d     ).g..1..s.m.-b..

08000df0 <dma_ch_config>:
 8000df0:	00009125 080009f0 50020020 00000000     %....... ..P....
	...
 8000e08:	00000100 00000800 00000400              ............

08000e14 <crc_engine>:
 8000e14:	50020020 00000700 ffffffff               ..P........
