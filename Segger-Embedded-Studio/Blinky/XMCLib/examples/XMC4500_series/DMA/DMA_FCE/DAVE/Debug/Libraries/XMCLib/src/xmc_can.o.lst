   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,1
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_can.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_CAN_NODE_NominalBitTimeConfigureEx,"ax",%progbits
  20              	 .align 2
  21              	 .global XMC_CAN_NODE_NominalBitTimeConfigureEx
  22              	 .thumb
  23              	 .thumb_func
  25              	XMC_CAN_NODE_NominalBitTimeConfigureEx:
  26              	.LFB235:
  27              	 .file 1 "C:/Files/Projects/Git/XMCLib/src/xmc_can.c"
   1:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /**
   2:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * @file xmc_can.c
   3:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * @date 2019-06-26
   4:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *
   5:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * @cond
   6:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  **************************************************************************************************
   7:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *
   9:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * All rights reserved.                        
  11:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *                                             
  12:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * following conditions are met:   
  14:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *                                                                              
  15:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * disclaimer.                        
  17:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * 
  18:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * 
  21:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * products derived from this software without specific prior written permission.                  
  23:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *                                                                              
  24:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *                                                                              
  32:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  **************************************************************************************************
  35:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *
  36:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * Change History
  37:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * --------------
  38:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *
  39:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * 2015-02-20:
  40:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *     - Initial draft <br>
  41:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *
  42:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * 2015-05-20:
  43:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *     - New API added: XMC_CAN_MO_ReceiveData() <br>
  44:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  45:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *     - Minor fix in XMC_CAN_TXFIFO_ConfigMOSlaveObject(). <br>
  46:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *
  47:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * 2015-06-20:
  48:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *     - Removed version macros and declaration of GetDriverVersion API
  49:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *
  50:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * 2015-09-01:
  51:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *     - Removed  fCANB clock support <br>
  52:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *
  53:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * 2015-09-08:
  54:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *     - Fixed bug in XMC_CAN_Init() <br>
  55:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *
  56:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * 2016-06-07:
  57:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *     - Changed XMC_CAN_AllocateMOtoNodeList to wait for ready status of list controller
  58:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *
  59:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * 2016-06-20:
  60:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *     - Fixed bug in XMC_CAN_MO_Config() <br> 
  61:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *
  62:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * 2017-11-09:
  63:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  64:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  65:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *     - Changed refactoring XMC_CAN_MO_Config() to configure MOCTR depending on transmit or receiv
  66:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *
  67:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * 2018-06-21:
  68:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *     - Fixed XMC_CAN_NODE_NominalBitTimeConfigureEx()
  69:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *
  70:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * 2018-11-12:
  71:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *     - Fixed assertion at XMC_CAN_InitEx()
  72:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *
  73:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * 2019-05-07:
  74:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *     - Fixed compilation warnings
  75:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *
  76:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * 2019-06-26:
  77:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *     - Fixed XMC_CAN_NODE_NominalBitTimeConfigureEx() non returning, decrementing ntq before cont
  78:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *
  79:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * @endcond
  80:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *
  81:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  */ 
  82:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
  83:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /*******************************************************************************
  84:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * HEADER FILES
  85:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *******************************************************************************/
  86:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #include "xmc_can.h"
  87:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
  88:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #if defined(CAN)
  89:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #include "xmc_scu.h"
  90:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
  91:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** __STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
  92:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
  93:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   return (a > b) ? a : b;
  94:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
  95:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
  96:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** __STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
  97:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
  98:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   return (a < b) ? a : b;
  99:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 100:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 101:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /*******************************************************************************
 102:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  * API IMPLEMENTATION
 103:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****  *******************************************************************************/
 104:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 105:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /* The max prescaler is the equal to max BRP setting (64) multiply by 8 (DIV8) */
 106:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #define XMC_CAN_NODE_MAX_PRESCALER 512
 107:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 108:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /* maximum TSEG1 is 16 and maximum TSEG2 is 8, plus one fix sync tq */
 109:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #define XMC_CAN_NODE_MAX_NTQ 25
 110:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #define XMC_CAN_NODE_MIN_NTQ 8
 111:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 112:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #define XMC_CAN_NODE_MIN_TSEG1 3
 113:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #define XMC_CAN_NODE_MIN_TSEG2 2
 114:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 115:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #define XMC_CAN_NODE_MAX_TSEG1 15
 116:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #define XMC_CAN_NODE_MAX_TSEG2 7
 117:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 118:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 119:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 120:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                                const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const 
 121:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
  28              	 .loc 1 121 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 2DE9F047 	 push {r4,r5,r6,r7,r8,r9,r10,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 32
  36              	 .cfi_offset 4,-32
  37              	 .cfi_offset 5,-28
  38              	 .cfi_offset 6,-24
  39              	 .cfi_offset 7,-20
  40              	 .cfi_offset 8,-16
  41              	 .cfi_offset 9,-12
  42              	 .cfi_offset 10,-8
  43              	 .cfi_offset 14,-4
 122:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /* Check that the CAN frequency is a multiple of the required baudrate */
 123:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
  44              	 .loc 1 123 0
  45 0004 0D68     	 ldr r5,[r1]
  46 0006 4A68     	 ldr r2,[r1,#4]
  47 0008 B5FBF2F3 	 udiv r3,r5,r2
  48 000c 02FB1353 	 mls r3,r2,r3,r5
  49 0010 002B     	 cmp r3,#0
  50 0012 63D1     	 bne .L7
  51              	.LVL1:
  52              	.LBB27:
 124:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 125:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     uint32_t prescaler;
 126:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     uint32_t div8 = 0;
 127:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 128:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     /* Calculate the factor between can frequency and required baudrate, this is equal to (prescale
 129:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
  53              	 .loc 1 129 0
  54 0014 B5FBF2F5 	 udiv r5,r5,r2
  55              	.LVL2:
  56 0018 1823     	 movs r3,#24
 130:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 131:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bi
 132:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 133:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     uint32_t tseg1 = 0;
 134:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     uint32_t tseg2 = 0;
 135:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 136:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     {
 137:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       /* consider this ntq, only if fcan_div is multiple of ntq */
 138:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       if ((fcan_div % ntq) == 0)
 139:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       {
 140:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     	  div8 = 0;
 141:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****         prescaler = fcan_div / ntq;
 142:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****         if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 143:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****         {
 144:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****           if (prescaler >= 64)
 145:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****           {
 146:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****             /* consider prescaler >=64, if it is integer divisible by 8*/
 147:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****             if ((prescaler & 0x7U) != 0)
 148:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****             {
 149:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****               --ntq;
 150:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****               continue;
 151:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****             }
 152:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****             else
 153:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****             {
 154:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****               div8 = 1;
 155:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****             }
 156:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****           }
 157:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 158:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****           tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
  57              	 .loc 1 158 0
  58 001a 334E     	 ldr r6,.L12
 140:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****         prescaler = fcan_div / ntq;
  59              	 .loc 1 140 0
  60 001c 0027     	 movs r7,#0
 154:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****             }
  61              	 .loc 1 154 0
  62 001e 4FF0010E 	 mov lr,#1
  63              	.LVL3:
  64              	.L6:
  65 0022 5C1C     	 adds r4,r3,#1
  66              	.LVL4:
 138:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       {
  67              	 .loc 1 138 0
  68 0024 B5FBF4F2 	 udiv r2,r5,r4
  69 0028 04FB1252 	 mls r2,r4,r2,r5
  70 002c 3ABB     	 cbnz r2,.L3
  71              	.LVL5:
 141:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****         if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
  72              	 .loc 1 141 0
  73 002e B5FBF4FC 	 udiv ip,r5,r4
  74              	.LVL6:
 142:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****         {
  75              	 .loc 1 142 0
  76 0032 0CF1FF32 	 add r2,ip,#-1
  77 0036 B2F5007F 	 cmp r2,#512
  78 003a 20D2     	 bcs .L3
 144:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****           {
  79              	 .loc 1 144 0
  80 003c BCF13F0F 	 cmp ip,#63
  81 0040 04D9     	 bls .L8
 147:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****             {
  82              	 .loc 1 147 0
  83 0042 1CF0070F 	 tst ip,#7
  84 0046 1AD1     	 bne .L3
 154:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****             }
  85              	 .loc 1 154 0
  86 0048 F046     	 mov r8,lr
  87 004a 00E0     	 b .L4
  88              	.L8:
 140:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****         prescaler = fcan_div / ntq;
  89              	 .loc 1 140 0
  90 004c B846     	 mov r8,r7
  91              	.L4:
  92              	.LVL7:
  93              	 .loc 1 158 0
  94 004e 0A89     	 ldrh r2,[r1,#8]
  95 0050 02FB03F2 	 mul r2,r2,r3
  96 0054 A6FB0292 	 umull r9,r2,r6,r2
  97 0058 520B     	 lsrs r2,r2,#13
  98              	.LVL8:
 159:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****           tseg2 = ntq - tseg1 - 1;
 160:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 161:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****           if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
  99              	 .loc 1 161 0
 100 005a A2F10309 	 sub r9,r2,#3
 101 005e B9F10C0F 	 cmp r9,#12
 102 0062 0CD8     	 bhi .L3
 159:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****           tseg2 = ntq - tseg1 - 1;
 103              	 .loc 1 159 0 discriminator 1
 104 0064 C2EB0409 	 rsb r9,r2,r4
 105              	.LVL9:
 106              	 .loc 1 161 0 discriminator 1
 107 0068 A9F1030A 	 sub r10,r9,#3
 108 006c BAF1040F 	 cmp r10,#4
 109 0070 05D8     	 bhi .L3
 159:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****           tseg2 = ntq - tseg1 - 1;
 110              	 .loc 1 159 0 discriminator 1
 111 0072 09F1FF39 	 add r9,r9,#-1
 112              	.LVL10:
 162:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****         		  (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_
 113              	 .loc 1 162 0 discriminator 1
 114 0076 B1F80AA0 	 ldrh r10,[r1,#10]
 115 007a D145     	 cmp r9,r10
 116 007c 05D2     	 bcs .L5
 117              	.LVL11:
 118              	.L3:
 119 007e 013B     	 subs r3,r3,#1
 120              	.LVL12:
 135:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     {
 121              	 .loc 1 135 0
 122 0080 062B     	 cmp r3,#6
 123 0082 CED1     	 bne .L6
 124              	.LBE27:
 163:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****           {
 164:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****             break;
 165:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****           }
 166:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 167:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 168:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****         }
 169:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       }
 170:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       --ntq;
 171:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     }
 172:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 173:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 174:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     {
 175:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 176:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 177:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       XMC_CAN_NODE_EnableConfigurationChange(can_node);
 178:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 179:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       /* Configure bit timing register */
 180:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_M
 181:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 182:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                         (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_
 183:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                         ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CA
 184:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                         ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 185:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 186:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       XMC_CAN_NODE_DisableConfigurationChange(can_node);
 187:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 188:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       return XMC_CAN_STATUS_SUCCESS;
 189:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     }
 190:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 191:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 192:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   return XMC_CAN_STATUS_ERROR;
 125              	 .loc 1 192 0
 126 0084 0120     	 movs r0,#1
 127              	.LVL13:
 128 0086 BDE8F087 	 pop {r4,r5,r6,r7,r8,r9,r10,pc}
 129              	.LVL14:
 130              	.L5:
 131              	.LBB32:
 173:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     {
 132              	 .loc 1 173 0
 133 008a 072C     	 cmp r4,#7
 134 008c 29D9     	 bls .L9
 135              	.LVL15:
 136              	.LBB28:
 137              	.LBB29:
 138              	 .file 2 "C:/Files/Projects/Git/XMCLib/inc/xmc_can.h"
   1:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
   2:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @file xmc_can.h
   3:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @date 2019-07-02
   4:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
   5:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @cond
   6:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
   7:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
   9:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * All rights reserved.                        
  11:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *                                             
  12:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * following conditions are met:   
  14:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *                                                                              
  15:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * disclaimer.                        
  17:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * 
  18:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * 
  21:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *                                                                              
  24:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *                                                                              
  32:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
  35:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
  36:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Change History
  37:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * --------------
  38:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
  39:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * 2015-02-20:
  40:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *     - Initial <br>
  41:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *     - Documentation improved <br>
  42:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
  43:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * 2015-05-20:
  44:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *     - New elements have added in XMC_CAN_MO_t data structure <br>
  45:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  46:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_STATUS_t enum structure has updated. <br>
  47:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
  48:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * 2015-06-20:
  49:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *     - New APIs added: XMC_CAN_NODE_ClearStatus(),XMC_CAN_MO_ReceiveData(), XMC_CAN_GATEWAY_InitD
  50:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  51:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *      
  52:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * 2015-07-09:
  53:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *     - New API added: XMC_CAN_NODE_Enable. <br>
  54:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
  55:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * 2015-09-01:
  56:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *     - Removed fCANB clock support <br>
  57:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
  58:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * 2015-09-15:
  59:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *     - Added "xmc_can_map.h" include <br>
  60:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
  61:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * 2016-06-07:
  62:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_IsPanelControlReady()
  63:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * 
  64:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * 2017-11-09:
  65:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  66:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  67:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
  68:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * 2019-07-02:
  69:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_GetClockFrequency()
  70:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * 
  71:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * <b>Details of use for node configuration related APIs</b><br>
  72:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Please use the XMC_CAN_NODE_SetInitBit() and XMC_CAN_NODE_EnableConfigurationChange() before cal
  73:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * related APIs.
  74:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange() and  XMC_CAN_NODE_ResetInitBit() can be called for dis
  75:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * change and enable the node for communication afterwards.
  76:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Do not use this when configuring the nominal bit time with XMC_CAN_NODE_NominalBitTimeConfigure(
  77:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Enable/Disable node configuration change is taken in account.
  78:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
  79:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * <b>Example Usage:</b>
  80:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @code
  81:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * //disabling the Node
  82:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetInitBit(CAN_NODE0)
  83:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * //allowing the configuration change
  84:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0)
  85:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * //Node configuration
  86:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_FrameCounterConfigure(CAN_NODE0,&can_node_frame_counter);
  87:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack(CAN_NODE0)
  88:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * //disable configuration
  89:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0)
  90:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * //Enabling node for communication
  91:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ResetInitBit(CAN_NODE0)
  92:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @endcode
  93:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
  94:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * 2016-06-20:
  95:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *     - Fixed bug in XMC_CAN_MO_Config() <br>  
  96:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @endcond
  97:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
  98:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
  99:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 100:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #ifndef XMC_CAN_H
 101:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #define XMC_CAN_H
 102:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 103:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 104:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * HEADER FILES
 105:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 106:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #include "xmc_common.h"
 107:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 108:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #if defined(CAN)
 109:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 110:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #include "xmc_scu.h"
 111:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #include "xmc_can_map.h"
 112:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #include <string.h>
 113:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 114:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 115:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @addtogroup XMClib XMC Peripheral Library
 116:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @{
 117:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 118:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 119:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 120:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @addtogroup CAN
 121:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @brief Controller Area Network Controller (CAN) driver for the XMC microcontroller family.
 122:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 123:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * CAN driver provides transfer of CAN frames in accordance with CAN specificetion V2.0 B (active).
 124:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * can receive and transmit standard frames with 11-bit identifiers as well as extended frames with
 125:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * All CAN nodes share a common set of message objects. Each message object can be individually all
 126:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * CAN nodes. 
 127:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Besides serving as a storage container for incoming and outgoing frames, message objects can be 
 128:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * gateways between 
 129:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * the CAN nodes or to setup a FIFO buffer. The CAN module provides Analyzer mode,Loop-back mode an
 130:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * node analysis.
 131:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * 
 132:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * The driver is divided into five sections:
 133:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par CAN Global features:
 134:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * -# Allows to configure module frequency using function XMC_CAN_Init().
 135:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Module interrupt using configuration structure XMC_CAN_NODE_INTERRUPT_TRI
 136:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_EventTrigger().
 137:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * 
 138:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par CAN_NODE features:
 139:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * -# Allows to set baud rate by configuration structure XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t and
 140:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *    function XMC_CAN_NODE_NominalBitTimeConfigure().
 141:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * -# Allows to configure loop-back mode using fuction XMC_CAN_NODE_EnableLoopBack().
 142:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * -# Allows to configure CAN Node analyzer using function XMC_CAN_NODE_SetAnalyzerMode().
 143:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * -# Allows CAN node events enable/ disable by enum structure XMC_CAN_NODE_EVENT_t and functions X
 144:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *    and XMC_CAN_NODE_DisableEvent().
 145:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * -# Provides bit timming analysis, configuration structure XMC_CAN_NODE_FRAME_COUNTER_t and funct
 146:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_NODE_FrameCounterConfigure(). 
 147:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 148:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par CAN_MO features:
 149:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * -# Allows message object initialization by configuration structure XMC_CAN_MO_t and function XMC
 150:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * -# Allows transfer of message objects using functions XMC_CAN_MO_Transmit() and XMC_CAN_MO_Recei
 151:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Single Data Transfer and Single Transmit Trial using functions 
 152:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_EnableSingleTransmitTrial() and XMC_CAN_MO_EnableSingleTransmitTrial().
 153:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * -# Allows to configure MO events using function XMC_CAN_MO_EnableEvent(). 
 154:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 155:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par CAN_FIFO features:
 156:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * -# Allows message object FIFO structure by configuration structure XMC_CAN_FIFO_CONFIG_t and fun
 157:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_TXFIFO_ConfigMOBaseObject() , XMC_CAN_RXFIFO_ConfigMOBaseObject() and XMC_CAN_TXFIFO_Tra
 158:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 159:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par CAN_GATEWAY features:
 160:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * -# Provides Gateway mode, configuration structure XMC_CAN_GATEWAY_CONFIG_t and function XMC_CAN_
 161:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 162:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @{
 163:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 164:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 165:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 166:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * MACROS
 167:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 168:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Pos (18U)   /**< Standard Identifier bitposition */
 169:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 170:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Msk ((0x000007FFUL) << XMC_CAN_MO_MOAR_STDID_Pos) /**< Standard Ident
 171:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 172:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #define CAN_NODE_NIPR_Msk         (0x7UL) /**< Node event mask */
 173:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 174:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #define CAN_MO_MOIPR_Msk          (0x7U)  /**< Message Object event mask */
 175:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 176:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 177:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * ENUMS
 178:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 179:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 180:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  Defines the status of CAN, to verify the CAN related API calls. Use type \a XMC_CAN_STATUS_t fo
 181:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** */
 182:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_STATUS
 183:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 184:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_SUCCESS,           /**< Driver accepted application request*/
 185:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_ERROR,             /**< Returned when unknown error occurred */
 186:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_BUSY,              /**< Driver is busy and can not handle request*/
 187:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_NOT_ACCEPTABLE, /**< Message object type not allowed*/
 188:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_DISABLED       /**< Returned if Message object is disabled */
 189:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_STATUS_t;
 190:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 191:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 192:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** * Defines CAN module Panel Commands . Use type \a XMC_CAN_PANCMD_t for this enum.
 193:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** */
 194:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_PANCMD
 195:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 196:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_INIT_LIST = 1U,              /**< Command to initialize a list */
 197:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_ALLOCATE = 2U,        /**< Command to activate static allocation */
 198:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_ALLOCATE = 3U,       /**< Command to activate dynamic allocation */
 199:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 200:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEFORE = 4U,   /**< Remove a message object from the list and insert
 201:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEFORE = 5U,  /**< Command to activate dynamic allocation */
 202:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEHIND = 6U,   /**< Command to activate dynamic allocation */
 203:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEHIND = 7U   /**< Command to activate dynamic allocation */
 204:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_PANCMD_t;
 205:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 206:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 207:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** * Defines loop Back Mode, to enable/disable an in-system test of the MultiCAN module .
 208:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** * Use type \a XMC_CAN_LOOKBACKMODE_t for this enum.
 209:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** */
 210:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_LOOKBACKMODE
 211:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 212:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_ENABLED,   /**< Each CAN node can be connected to the internal CAN bus  */
 213:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_DISABLED   /**< Each CAN node can be connected to the external CAN bus */
 214:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_LOOKBACKMODE_t;
 215:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 216:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 217:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Defines Message Object direction. Use type \a XMC_CAN_MO_TYPE_t for this enum.
 218:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 219:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_TYPE
 220:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 221:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_RECMSGOBJ,   /**< Receive Message Object selected */
 222:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_TRANSMSGOBJ  /**< Transmit Message Object selected */
 223:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_TYPE_t;
 224:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 225:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 226:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Defines Data frame types. Use type \a XMC_CAN_FRAME_TYPE_t for this enum.
 227:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 228:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_TYPE
 229:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 230:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_STANDARD_11BITS, /**< Standard type identifier*/
 231:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_EXTENDED_29BITS  /**< Extended type identifier*/
 232:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_TYPE_t;
 233:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 234:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 235:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 236:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Defines arbitration mode for transmit acceptance filtering. Use type \a XMC_CAN_ARBITRATION_MODE
 237:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 238:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_ARBITRATION_MODE
 239:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 240:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_1 = 1U,   /**< Transmit acceptance based in the order(p
 241:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_IDE_DIR_BASED_PRIO_2 = 2U, /**< Transmit acceptance filtering is based o
 242:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_3 = 3U    /**< Transmit acceptance based in the order *
 243:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_ARBITRATION_MODE_t;
 244:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 245:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 246:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Defines the operation mode of the frame counter. Use type \a XMC_CAN_FRAME_COUNT_MODE_t for this
 247:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 248:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_COUNT_MODE
 249:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 250:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE = 0U,       /**< Frame Count Mode */
 251:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_TIME_STAMP = 1U,  /**< The frame counter is incremented with the beginni
 252:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_BIT_TIMING = 2U   /**< Used for baud rate detection and analysis of the 
 253:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_COUNT_MODE_t;
 254:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 255:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 256:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Defines the Divider Modes. Use type \a XMC_CAN_DM_t for this enum.
 257:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 258:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_DM
 259:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 260:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_NORMAL = 1U,      /**< Normal divider mode */
 261:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_FRACTIONAL = 2U,  /**< Fractional divider mode */
 262:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_OFF = 3U          /**< Divider Mode in off-state*/
 263:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_DM_t;
 264:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 265:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 266:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object set status. Use type \a XMC_CAN_MO_SET_STATUS_t for th
 267:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 268:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_SET_STATUS
 269:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 270:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_PENDING = CAN_MO_MOCTR_SETRXPND_Msk,     /**< Set receive pending */
 271:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_PENDING = CAN_MO_MOCTR_SETTXPND_Msk,     /**< Set transmit pending */
 272:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_UPDATING = CAN_MO_MOCTR_SETRXUPD_Msk,    /**< Set receive updating */
 273:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_NEW_DATA = CAN_MO_MOCTR_SETNEWDAT_Msk,      /**< Set new data */
 274:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_SETMSGLST_Msk,  /**< Set message lost */
 275:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_SETMSGVAL_Msk, /**< Set message valid */
 276:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_SETRTSEL_Msk, /**< Set transmit/receive selec
 277:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_ENABLE = CAN_MO_MOCTR_SETRXEN_Msk,       /**< Set receive enable */
 278:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_REQUEST = CAN_MO_MOCTR_SETTXRQ_Msk,      /**< Set transmit request */
 279:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_SETTXEN0_Msk,     /**< Set transmit enable 0 */
 280:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_SETTXEN1_Msk,     /**< Set transmit enable 1 */
 281:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_SETDIR_Msk /**< Set message direction */
 282:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_SET_STATUS_t;
 283:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 284:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 285:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object reset status. Use type \a XMC_CAN_MO_RESET_STATUS_t fo
 286:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 287:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_RESET_STATUS
 288:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 289:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_PENDING = CAN_MO_MOCTR_RESRXPND_Msk,     /**< Reset receive pending */
 290:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_PENDING = CAN_MO_MOCTR_RESTXPND_Msk,     /**< Reset transmit pending *
 291:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_UPDATING = CAN_MO_MOCTR_RESRXUPD_Msk,    /**< Reset receive updating *
 292:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_NEW_DATA = CAN_MO_MOCTR_RESNEWDAT_Msk,      /**< Reset new data */
 293:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_RESMSGLST_Msk,  /**< Reset message lost */
 294:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_RESMSGVAL_Msk, /**< Reset message valid */
 295:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_RESRTSEL_Msk, /**< Reset transmit/receive s
 296:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_ENABLE = CAN_MO_MOCTR_RESRXEN_Msk,       /**< Reset receive enable */
 297:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_REQUEST = CAN_MO_MOCTR_RESTXRQ_Msk,      /**< Reset transmit request *
 298:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_RESTXEN0_Msk,     /**< Reset transmit enable 0 
 299:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_RESTXEN1_Msk,     /**< Reset transmit enable 1 
 300:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_RESDIR_Msk /**< Reset message direction 
 301:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_RESET_STATUS_t;
 302:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 303:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 304:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object status. Use type \a XMC_CAN_MO_STATUS_t for this enum.
 305:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 306:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_STATUS
 307:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 308:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_PENDING = CAN_MO_MOSTAT_RXPND_Msk,                   /**< Defines message ha
 309:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_PENDING = CAN_MO_MOSTAT_TXPND_Msk,                   /**< Defines message ha
 310:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_UPDATING = CAN_MO_MOSTAT_RXUPD_Msk,                  /**< Defines Message id
 311:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_NEW_DATA = CAN_MO_MOSTAT_NEWDAT_Msk,                    /**< Defines no update 
 312:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_LOST = CAN_MO_MOSTAT_MSGLST_Msk,                /**< CAN message is los
 313:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_VALID = CAN_MO_MOSTAT_MSGVAL_Msk,               /**< Message valid */
 314:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_TX_SELECTED = CAN_MO_MOSTAT_RTSEL_Msk,               /**< Transmit/Receive s
 315:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_ENABLE = CAN_MO_MOSTAT_RXEN_Msk,                     /**< Receive enable */
 316:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_REQUEST = CAN_MO_MOSTAT_TXRQ_Msk,                    /**< Transmit request *
 317:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE0 = CAN_MO_MOSTAT_TXEN0_Msk,                   /**< Transmit enable 0 
 318:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE1 = CAN_MO_MOSTAT_TXEN1_Msk,                   /**< Transmit enable 1 
 319:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_DIRECTION = CAN_MO_MOSTAT_DIR_Msk,              /**< Message direction 
 320:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_LIST = CAN_MO_MOSTAT_LIST_Msk,                          /**< List allocation */
 321:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_PREVIOUS_MO = CAN_MO_MOSTAT_PPREV_Msk,     /**< Pointer to previous 
 322:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_NEXT_MO = (int32_t)CAN_MO_MOSTAT_PNEXT_Msk   /**< Pointer to next Me
 323:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_STATUS_t;
 324:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 325:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 326:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node status. Use type \a XMC_CAN_NODE_STATUS_t for this enum.
 327:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 328:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_STATUS
 329:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 330:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LAST_ERROR_CODE = CAN_NODE_NSR_LEC_Msk,       /**< Last Error Code */
 331:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_TX_OK = CAN_NODE_NSR_TXOK_Msk,                /**< Message transmitted succes
 332:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_RX_OK = CAN_NODE_NSR_RXOK_Msk,                /**< Message received successfu
 333:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ALERT_WARNING = CAN_NODE_NSR_ALERT_Msk,       /**< Alert warning */
 334:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ERROR_WARNING_STATUS = CAN_NODE_NSR_EWRN_Msk, /**< Error warning status */
 335:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_BUS_OFF= CAN_NODE_NSR_BOFF_Msk,       /**< Bus-off status */
 336:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_LENGTH_ERROR = CAN_NODE_NSR_LLE_Msk,     /**< List length error */
 337:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_OBJECT_ERROR = CAN_NODE_NSR_LOE_Msk,     /**< List object error */
 338:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 339:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_SUSPENDED_ACK = CAN_NODE_NSR_SUSACK_Msk       /**< Suspend Acknowledge */
 340:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #endif
 341:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_STATUS_t;
 342:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 343:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 344:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node control like initialization, node disable and analyzer mode .
 345:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_NODE_CONTROL_t for this enum.
 346:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 347:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_CONTROL
 348:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 349:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_NODE_INIT = CAN_NODE_NCR_INIT_Msk,            /**< Node initialization */
 350:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_TX_INT_ENABLE = CAN_NODE_NCR_TRIE_Msk,        /**< Transfer event enable */
 351:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_LEC_INT_ENABLE = CAN_NODE_NCR_LECIE_Msk,      /**< LEC Indicated Error Event
 352:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_ALERT_INT_ENABLE = CAN_NODE_NCR_ALIE_Msk,     /**< Alert Event Enable */
 353:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_DISABLE = CAN_NODE_NCR_CANDIS_Msk,        /**< CAN disable */
 354:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CONF_CHANGE_ENABLE= CAN_NODE_NCR_CCE_Msk,     /**< Configuration change enab
 355:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_ANALYZER_NODEDE = CAN_NODE_NCR_CALM_Msk,  /**< CAN Analyzer mode */
 356:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 357:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_SUSPENDED_ENABLE = CAN_NODE_NCR_SUSEN_Msk     /**< Suspend Enable */
 358:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #endif
 359:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_CONTROL_t;
 360:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 361:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 362:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node events. Use type \a XMC_CAN_NODE_EVENT_t for this enum.
 363:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 364:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_EVENT
 365:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 366:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_TX_INT = CAN_NODE_NCR_TRIE_Msk,   /**< Node Transfer OK Event */
 367:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_ALERT = CAN_NODE_NCR_ALIE_Msk,    /**< Node Alert Event */
 368:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_LEC = CAN_NODE_NCR_LECIE_Msk,     /**< Last Error code Event */
 369:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_CFCIE = CAN_NODE_NFCR_CFCIE_Msk   /**< CAN Frame Count Event  */
 370:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_EVENT_t;
 371:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 372:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 373:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN node pointer events position. Use type \a XMC_CAN_NODE_POINTER_EVENT_
 374:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 375:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_POINTER_EVENT
 376:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 377:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_ALERT = CAN_NODE_NIPR_ALINP_Pos,           /**< Node Alert Event node 
 378:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_LEC = CAN_NODE_NIPR_LECINP_Pos,            /**< Last Error code Event 
 379:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK = CAN_NODE_NIPR_TRINP_Pos,     /**< Transmit Event node po
 380:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER = CAN_NODE_NIPR_CFCINP_Pos   /**< CAN Frame Count Event 
 381:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_POINTER_EVENT_t;
 382:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 383:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 384:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object event node pointer position. Use type \a XMC_CAN_MO_POINTER_EVENT_t f
 385:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 386:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_POINTER_EVENT
 387:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 388:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_TRANSMIT = CAN_MO_MOIPR_TXINP_Pos,     /**< Transmit Event node pointer 
 389:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_RECEIVE = CAN_MO_MOIPR_RXINP_Pos       /**< Receive Event node pointer *
 390:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_POINTER_EVENT_t;
 391:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 392:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 393:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object event type. Use type \a XMC_CAN_MO_EVENT_t for this en
 394:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 395:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_EVENT
 396:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 397:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_TRANSMIT = CAN_MO_MOFCR_TXIE_Msk,  /**< Message Object transmit event */
 398:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_RECEIVE = CAN_MO_MOFCR_RXIE_Msk,   /**< Message Object receive event */
 399:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_OVERFLOW = CAN_MO_MOFCR_OVIE_Msk,  /**< Message Object overflow event */
 400:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_EVENT_t;
 401:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 402:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 403:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Defines the possible receive inputs. Use type \a XMC_CAN_NODE_RECEIVE_INPUT_t for this enum.
 404:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 405:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_RECEIVE_INPUT
 406:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 407:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCA,   /**< CAN Receive Input A */
 408:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCB,   /**< CAN Receive Input B */
 409:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCC,   /**< CAN Receive Input C */
 410:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCD,   /**< CAN Receive Input D */
 411:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCE,   /**< CAN Receive Input E */
 412:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCF,   /**< CAN Receive Input F */
 413:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCG,   /**< CAN Receive Input G */
 414:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCH    /**< CAN Receive Input H */
 415:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_RECEIVE_INPUT_t;
 416:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 417:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 418:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Defines last error transfer direction. Use type \a XMC_CAN_NODE_LAST_ERROR_DIR_t for this enum.
 419:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 420:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_DIR
 421:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 422:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_RECEPCION,    /**< The last error occurred while the CAN n
 423:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_TRANSMISSION  /**< The last error occurred while the CAN n
 424:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_DIR_t;
 425:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 426:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 427:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 428:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Defines last error increment. Use type \a XMC_CAN_NODE_LAST_ERROR_INC_t for this enum.
 429:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 430:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_INC
 431:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 432:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_1, /**< The last error led to an error counter increment of 1. */
 433:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_8  /**< The last error led to an error counter increment of 8. */
 434:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_INC_t;
 435:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 436:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 437:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Defines interrupt request on interrupt output line INT_O[n]. Use type \a XMC_CAN_NODE_INTERRUPT_
 438:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 439:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_INTERRUPT_TRIGGER
 440:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 441:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_0 = 0x1U,
 442:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_1 = 0x2U,
 443:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_2 = 0x4U,
 444:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_3 = 0x8U,
 445:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_4 = 0x16U,
 446:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_5 = 0x32U,
 447:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_6 = 0x64U,
 448:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_7 = 0x128U,
 449:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_INTERRUPT_TRIGGER_t;
 450:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 451:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 452:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Defines the Clock source used for the MCAN baudrate generator 
 453:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 454:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_CANCLKSRC
 455:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {  
 456:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 457:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #if (UC_FAMILY == XMC4)
 458:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 459:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #else
 460:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_MCLK = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock. 
 461:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #endif
 462:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FOHP = 0x2U, /**< Use high performance oscillator (fOHP) as MCAN baudrate gener
 463:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #else
 464:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 465:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #endif
 466:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_CANCLKSRC_t;
 467:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 468:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 469:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * DATA STRUCTURES
 470:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 471:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 472:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Defines CAN node Nominal Bit Time. Use type \a XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t for this s
 473:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** */
 474:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG
 475:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 476:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   uint32_t can_frequency;       /**< Frequency of the CAN module(fCAN). \a can_frequency shall be r
 477:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   uint32_t baudrate;          /**< Specifies the node baud rate. Unit: baud \a baudrate shall be ra
 478:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   uint16_t sample_point;      /**< Sample point is used to compensate mismatch between transmitter 
 479:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****                    the synchronization segment. Sample point. Range = [0, 10000] with respect [0%, 
 480:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   uint16_t sjw;               /**< (Re) Synchronization Jump Width. Range:0-3 */
 481:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t;
 482:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 483:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 484:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Defines base, top and bottom of CAN Message Object FIFO Structure. Use type \a XMC_CAN_FIFO_CONF
 485:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * A FIFO consists of one base object and n slave objects.
 486:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 487:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_FIFO_CONFIG
 488:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 489:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   uint8_t fifo_bottom;    /**< points to the first element(slave object) in a FIFO structure.Range 
 490:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   uint8_t fifo_top;     /**< points to the last element(slave object) in a FIFO structure. Range :0
 491:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   uint8_t fifo_base;    /**< points to the actual target object(Base object) within a FIFO/Gateway 
 492:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_FIFO_CONFIG_t;
 493:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 494:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 495:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Defines CAN Gateway FIFO structure and provides additional options for gateway destination objec
 496:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_GATEWAY_CONFIG_t for this structure.
 497:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 498:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_GATEWAY_CONFIG
 499:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 500:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   uint8_t gateway_bottom;       /**< points to the first element(gateway destination object) in a F
 501:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   uint8_t gateway_top;        /**< points to the last element(gateway destination object) in a FIFO
 502:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   uint8_t gateway_base;       /**< points to the actual target object within a FIFO/Gateway structu
 503:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   bool gateway_data_frame_send;   /**< TXRQ updated in the gateway destination object after the int
 504:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object */
 505:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   bool gateway_identifier_copy;   /**< The identifier of the gateway source object (after storing t
 506:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object. */
 507:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 508:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   bool gateway_data_length_code_copy; /**< Data length code of the gateway source object (after sto
 509:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****                                            gateway destination object */
 510:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   bool gateway_data_copy;  /**< Data fields in registers MODATALn and MODATAHn of the gateway sourc
 511:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****                                 are copied to the gateway destination.*/
 512:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 513:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_GATEWAY_CONFIG_t;
 514:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 515:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 516:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** * Defines CAN Global Initialization structure
 517:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** */
 518:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef CAN_GLOBAL_TypeDef XMC_CAN_t;
 519:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 520:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard start*/
 521:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 522:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   #pragma push
 523:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   #pragma anon_unions
 524:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 525:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   #pragma warning 586
 526:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #endif
 527:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 528:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 529:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Defines frame counter configuration. Use type \a XMC_CAN_NODE_FRAME_COUNTER_t for this structure
 530:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * It provides configuration of frame counter that counts transmitted/received CAN frames or obtain
 531:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * when a frame has been started to transmit or be received by the CAN node.
 532:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** */
 533:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_FRAME_COUNTER
 534:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 535:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 536:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   union{
 537:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****     struct{
 538:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****       uint32_t : 16;
 539:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_selection:3;   /**<   Defines function of the frame counter  */
 540:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_mode:2;      /**<   Determines the operation mode of the frame count
 541:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****       uint32_t : 11;
 542:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****     };
 543:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****     uint32_t nfcr;
 544:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 545:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   };
 546:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_FRAME_COUNTER_t;
 547:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 548:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 549:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *Defines Node Runtime structure.
 550:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** */
 551:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef CAN_NODE_TypeDef  XMC_CAN_NODE_t;            /**<  pointer to the Node CAN register */
 552:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 553:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 554:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object runtime elements. Use type \a XMC_CAN_MO_t for this structure.
 555:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 556:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_MO
 557:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 558:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   CAN_MO_TypeDef *can_mo_ptr;                     /**< Pointer to the Message Object CAN register *
 559:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   union{
 560:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****     struct{
 561:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****       uint32_t can_identifier:29;            /**< standard (11 bit)/Extended (29 bit) message ident
 562:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mode:1;                /**< Standard/Extended identifier support */
 563:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****       uint32_t can_priority:2;               /**< Arbitration Mode/Priority */
 564:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****     };
 565:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****     uint32_t mo_ar;
 566:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   };
 567:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   union{
 568:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****     struct{
 569:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mask:29;              /**< CAN Identifier of Message Object */
 570:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****       uint32_t can_ide_mask:1;              /**< Identifier Extension Bit of Message Object */
 571:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****     };
 572:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****     uint32_t mo_amr;
 573:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   };
 574:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   uint8_t can_data_length;                        /**< Message data length, Range:0-8 */
 575:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 576:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   union{
 577:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 578:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****       uint8_t can_data_byte[8];                 /**< Each position of the array represents a data b
 579:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****       uint16_t can_data_word[4];                /**< Each position of the array represents a 16 bit
 580:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****       uint32_t can_data[2];                     /**< can_data[0] lower 4 bytes of the data. can_dat
 581:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****                               of the data */
 582:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****       uint64_t can_data_long;                   /** Data of the Message Object*/
 583:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****       };
 584:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 585:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_t can_mo_type;                  /**<  Message Type */
 586:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 587:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_t;
 588:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard end*/
 589:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 590:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   #pragma pop
 591:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 592:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   #pragma warning restore
 593:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #endif
 594:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 595:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * API Prototypes
 596:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 597:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #ifdef __cplusplus
 598:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** extern "C" {
 599:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #endif
 600:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 601:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 602:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 603:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 604:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *        for details.
 605:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 606:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return None
 607:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 608:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 609:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  Disables CAN module. In disabled state, no registers of CAN module can be read or written excep
 610:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 611:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 612:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_Enable()\n\n\n
 613:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 614:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 615:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 616:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** void XMC_CAN_Disable(XMC_CAN_t *const obj);
 617:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 618:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 619:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 620:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 621:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *         for details.
 622:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 623:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return None
 624:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 625:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 626:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  Enables CAN module and initializes all CAN registers to reset values. It is required to re-conf
 627:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  before any data transfer. It configures CAN_CLC.DISR bit.
 628:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 629:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 630:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_Disable()\n\n\n
 631:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 632:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 633:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 634:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** void XMC_CAN_Enable(XMC_CAN_t *const obj);
 635:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 636:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 637:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 638:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 639:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *       for details.
 640:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 641:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param node_num  CAN node number,Range : 0-2
 642:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param mo_num  CAN Message Object number,Range : 0-63
 643:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 644:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return None
 645:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 646:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 647:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  Allocates Message Object from free list to node list. Each \a node_num is linked to one unique 
 648:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  A CAN node performs message transfer only with the \a mo_num message objects that are allocated
 649:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  It configures PANCTR register.
 650:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 651:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 652:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  None
 653:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 654:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 655:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 656:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 657:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 658:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 659:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 660:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 661:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *       for details.
 662:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 663:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return Ready status of list controller
 664:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 665:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 666:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  Returns ready status of the list controller
 667:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 668:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 669:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_PanelControl()
 670:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 671:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 672:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** __STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
 673:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 674:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 675:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** }
 676:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 677:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 678:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 679:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 680:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *        for details.
 681:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 682:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param pancmd panal command selection. Refer @ref XMC_CAN_PANCMD_t for valid values.
 683:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param arg1   Panel Argument 1,Range : 0-2
 684:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param arg2   Panel Argument 2, Range : 0-63
 685:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 686:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return None
 687:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 688:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 689:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  Configures the panel command and panel arguments. A panel operation consists of a command code 
 690:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  panel arguments (PANAR1, PANAR2). Commands that have a return value deliver it to the PANAR1 bi
 691:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  return an error flag deliver it to bit 31 of the Panel Control Register, this means bit 7 of PA
 692:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  panel argument PANAR1,\a arg2 represents panel argument PANAR2 and \a pancmd represents command
 693:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  register.
 694:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 695:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 696:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  None
 697:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 698:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 699:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 700:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
 701:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_PANCMD_t pancmd,
 702:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg1,
 703:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg2)
 704:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 705:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 706:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 707:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 708:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** }
 709:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 710:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 711:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 712:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 713:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 714:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *        for details.
 715:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 716:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param service_requestr  Interrupt trigger number selection. Refer @ref XMC_CAN_NODE_INTERRUPT_T
 717:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *               Multiple interrupt trigger events can be ORed.
 718:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 719:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return None
 720:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 721:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 722:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  Configures multiple interrupt requests with a single write operation. \a service_requestr repre
 723:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  request or multiple.It configures MITR register.
 724:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 725:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 726:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  None
 727:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 728:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 729:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 730:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_EventTrigger(XMC_CAN_t *const obj,const XMC_CAN_NODE_INTERRUPT_TRIGGER
 731:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 732:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   obj->MITR = ((uint32_t)service_requestr << CAN_MITR_IT_Pos) & (uint32_t)CAN_MITR_IT_Msk;
 733:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** }
 734:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 735:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 736:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 737:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 738:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 739:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *        for details.
 740:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 741:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source
 742:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). 
 743:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *        The can_frequency shall be an integer divisor of the CAN clock source frequency (fPERI/fM
 744:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *        it should be selected such that if fulfills the minimum operating frequency specified in 
 745:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *        In addition the can_frequency shall be an integer multiple of the baudrate.
 746:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *        Max. value: Max. clock source frequency, i.e. if using fOHP and using a XTAL of 20MHz the
 747:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 748:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return Actual frequency
 749:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 750:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 751:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_Init() configures clock rate of the module timer clock fCAN. 
 752:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * The difference being that only the normal divider is used to avoid jitter.
 753:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * In addition the actual achievable frequency is returned.
 754:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 755:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 756:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Altering CAN module \a can_frequency shall affects baud rate, call XMC_CAN_NODE_NominalBitTimeCo
 757:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 758:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 759:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 760:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx()\n\n\n
 761:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 762:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 763:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 764:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 765:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 766:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 767:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *        for details.
 768:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 769:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return Baudrate generator clock source
 770:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 771:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 772:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Returns CAN baudrate generator clock source
 773:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 774:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj);
 775:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 776:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 777:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 778:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *        for details.
 779:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 780:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return None
 781:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * 
 782:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 783:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Sets CAN baudrate generator clock source
 784:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 785:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source);
 786:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 787:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 788:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 789:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *        for details.
 790:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 791:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return baudrate generator input clock frequency 
 792:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 793:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 794:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Gets CAN baudrate generator input clock frequency
 795:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 796:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj);
 797:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 798:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 799:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 800:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *        for details.
 801:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 802:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return fCAN clock frequency 
 803:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 804:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 805:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Gets CAN base clock frequency
 806:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 807:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 808:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_GetClockFrequency(XMC_CAN_t *const obj);
 809:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 810:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 811:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 812:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 813:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 814:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *        for details.
 815:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 816:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source.
 817:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). Max. value: Max. clock source frequency, i.e. i
 818:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @note Use clksrc parameter only for XMC1400 series and XMC47/4800 series projects, otherwise omi
 819:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 820:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return None
 821:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 822:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 823:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Configures clock rate of the module timer clock fCAN. Altering CAN module \a can_frequency shall
 824:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_NominalBitTimeConfigure() or XMC_CAN_NODE_NominalBitTimeConfigureEx() to confi
 825:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 826:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 827:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 828:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 829:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 830:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx(), XMC_CAN_InitEx
 831:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 832:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 833:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 834:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #else
 835:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency);
 836:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** #endif
 837:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 838:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 839:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 840:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
 841:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 842:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return None
 843:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 844:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 845:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Initializes CAN message object. Initialization includes configuring Message Object identifier ty
 846:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * identifier value, Message Object type, and transfer requests. It configures FDR register.
 847:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 848:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 849:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * None
 850:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 851:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 852:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo);
 853:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 854:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /* NODE APIs */
 855:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 856:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 857:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 858:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_node      Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers.
 859:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param ptr_event     CAN_NODE interrupt pointer position. Refer @ref XMC_CAN_NODE_POINTER_EVENT_
 860:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param service_request Interrupt service request number. Range : 0-7
 861:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 862:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return None
 863:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 864:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 865:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  Configures node interrupt pointer \a service_request for CAN Node events \a ptr_event. It confi
 866:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 867:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 868:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * None
 869:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 870:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 871:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 872:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
 873:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
 874:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****                                           const uint32_t service_request)
 875:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 876:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_eve
 877:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** }
 878:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 879:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 880:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 881:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 882:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 883:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 884:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 885:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return None
 886:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 887:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 888:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 889:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 890:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 891:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 892:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * None
 893:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 894:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 895:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_NominalBitTimeConfigure(XMC_CAN_NODE_t *const can_node,
 896:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_b
 897:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 898:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 899:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 900:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 901:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 902:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 903:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return Status on the sucess setting the desired bitrate XMC_CAN_STATUS_t
 904:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 905:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 906:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_NODE_NominalBitTimeConfigure() configures the CAN node baudrate. 
 907:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * The difference being that allows bitrates below 100kpbs.
 908:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @note Consider using the new API for new projects. XMC_CAN_NODE_NominalBitTimeConfigure() is kep
 909:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 910:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 911:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 912:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 913:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 914:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_InitEx()
 915:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 916:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 917:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 918:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****                                                const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const 
 919:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 920:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 921:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 922:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param input    CAN receive input selection. Refer @ref XMC_CAN_NODE_RECEIVE_INPUT_t for details
 923:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 924:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return None
 925:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 926:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 927:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \a input specifies CAN input receive pin. This API Configures NPCRx register,it is required to c
 928:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(), before configuring NPCRx register, call XMC_CAN_NODE_D
 929:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * API after configuring NPCRx register. CAN input receive pins which falls under analog port pins 
 930:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_GPIO_EnableDigitalInput(),to enable digital pad.
 931:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 932:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *\par<b>Related APIs:</b><BR>
 933:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * None
 934:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 935:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 936:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 937:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 938:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 939:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 940:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
 941:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****                                               const XMC_CAN_NODE_RECEIVE_INPUT_t input)
 942:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 943:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 944:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****                    (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Ms
 945:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** }
 946:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 947:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 948:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 949:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_node  Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_
 950:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 951:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return None
 952:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 953:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 954:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Enable Node \a can_node in Loop-Back Mode. A Node is connected to an internal (virtual) loop-bac
 955:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * nodes which are in Loop- Back Mode are connected to this virtual CAN bus so that they can commun
 956:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * other internally. The external transmit line is forced recessive in Loop-Back Mode. This API Con
 957:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 958:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration configuration.
 959:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 960:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 961:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_DisableLoopBack().
 962:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 963:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
 964:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  NPCRx can be written only if bit NCRx.CCE is set.
 965:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 966:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 967:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 968:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
 969:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 970:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 971:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** }
 972:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 973:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 974:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
 975:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 976:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 977:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return None
 978:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 979:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 980:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Disable Node Loop-Back Mode, disables internal (virtual) loop-back CAN bus. This API Configures 
 981:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 982:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration.
 983:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 984:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 985:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack()
 986:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 987:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 988:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 989:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 990:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
 991:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
 992:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 993:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableLoopBack(XMC_CAN_NODE_t *const can_node)
 994:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
 995:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   can_node->NPCR &= ~(uint32_t)CAN_NODE_NPCR_LBM_Msk;
 996:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** }
 997:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 998:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
 999:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
1000:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1001:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1002:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
1003:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
1004:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1005:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return None
1006:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1007:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1008:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  Enable CAN Node events. It configures NFCR register.
1009:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1010:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1011:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableEvent()
1012:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1013:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
1014:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1015:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1016:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1017:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1018:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
1019:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1020:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1021:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
1022:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
1023:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1024:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return None
1025:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1026:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1027:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  Disable CAN Node events. It configures NFCR register.
1028:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1029:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1030:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableEvent()
1031:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1032:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
1033:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1034:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1035:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1036:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1037:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
1038:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1039:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1040:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1041:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_DIR_t Last error transfer direction. Refer @ref XMC_CAN_NODE_LAS
1042:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1043:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1044:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Returns NODE Last Error occurred during Transmit/receive direction. It returns value of NFCR reg
1045:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1046:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1047:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferInc()\n\n\n
1048:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1049:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
1050:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1051:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_DIR_t XMC_CAN_NODE_GetLastErrTransferDir(XMC_CAN_NODE_t *co
1052:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
1053:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_DIR_t)(((node->NECNT) & CAN_NODE_NECNT_LETD_Msk) >> CAN_NODE_NECN
1054:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** }
1055:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1056:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1057:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
1058:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1059:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1060:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1061:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_INC_t Last error transfer increment. Refer @ref XMC_CAN_NODE_LAS
1062:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1063:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1064:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  Returns NODE Last Error Transfer Increment. It returns value of NFCR register.
1065:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1066:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1067:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferDir()\n\n\n
1068:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1069:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
1070:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1071:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_INC_t XMC_CAN_NODE_GetLastErrTransferInc(XMC_CAN_NODE_t *co
1072:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
1073:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_INC_t)(((node->NECNT) & CAN_NODE_NECNT_LEINC_Msk)>> CAN_NODE_NECN
1074:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** }
1075:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1076:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1077:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
1078:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1079:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1080:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param  error_warning_level  Error Warning level value. Range :0-255.
1081:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1082:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return None
1083:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1084:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1085:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Configures error warning level in order to set the corresponding error warning bit EWRN. It conf
1086:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * into NECNT register. Before this configuration call XMC_CAN_NODE_EnableConfigurationChange() API
1087:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1088:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1089:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetErrorWarningLevel()\n\n\n
1090:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1091:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1092:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1093:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1094:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
1095:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1096:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetErrorWarningLevel(XMC_CAN_NODE_t *const can_node, uint8_t erro
1097:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
1098:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_EWRNLVL_Msk)) |
1099:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****                     (((uint32_t)error_warning_level << CAN_NODE_NECNT_EWRNLVL_Pos) & (uint32_t)CAN_
1100:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** }
1101:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1102:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1103:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
1104:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1105:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1106:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_tec  transmit error counter value. Range :0-255
1107:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1108:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return None
1109:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1110:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1111:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  Configures Transmit error counter. It configures \a can_tec into NECNT register. Before this co
1112:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_EnableConfigurationChange() API.
1113:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1114:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1115:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetTransmitErrorCounter()\n\n\n
1116:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1117:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
1118:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1119:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1120:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
1121:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1122:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1123:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t c
1124:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
1125:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_TEC_Msk)) |
1126:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****                     (((uint32_t)can_tec << CAN_NODE_NECNT_TEC_Pos) & (uint32_t)CAN_NODE_NECNT_TEC_M
1127:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** }
1128:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1129:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1130:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
1131:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1132:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1133:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_rec  receive error counter value. Range :0-255
1134:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1135:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return None
1136:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1137:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1138:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Configures Receive Error Counter. It configures \a can_rec into NECNT register. Before this conf
1139:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange() API.
1140:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1141:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1142:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetReceiveErrorCounter()\n\n\n
1143:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1144:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1145:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1146:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1147:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
1148:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1149:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t ca
1150:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
1151:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_REC_Msk)) |
1152:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****                    (((uint32_t)can_rec << CAN_NODE_NECNT_REC_Pos) & (uint32_t)CAN_NODE_NECNT_REC_Ms
1153:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** }
1154:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1155:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1156:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
1157:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1158:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1159:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1160:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return uint8_t Error Warning Level. Range :0 - 255
1161:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1162:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1163:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  Returns error warning level. This determines the threshold value (warning level, default 96) to
1164:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  to set the corresponding error warning bit EWRN. It reads NECNT register.
1165:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1166:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1167:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetErrorWarningLevel()\n\n\n
1168:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1169:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
1170:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1171:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1172:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetErrorWarningLevel(XMC_CAN_NODE_t *const can_node)
1173:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
1174:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_EWRNLVL_Msk) >> CAN_NODE_NECNT_EWR
1175:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** }
1176:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1177:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1178:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
1179:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1180:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1181:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1182:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return uint8_t transmit error counter value. Range :0 - 255
1183:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1184:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1185:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  Returns Transmit Error Counter value. If the Bitstream Processor detects an error while a trans
1186:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  running, the Transmit Error Counter is incremented by 8. An increment of 1 is used when the err
1187:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  reported by an external CAN node via an Error Frame generation. It reads NECNT register.
1188:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1189:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1190:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetTransmitErrorCounter()
1191:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1192:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1193:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1194:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1195:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
1196:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1197:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node)
1198:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
1199:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_TEC_Msk) >> CAN_NODE_NECNT_TEC_Po
1200:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** }
1201:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1202:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1203:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
1204:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1205:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1206:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1207:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return uint8_t  receive error counter value.
1208:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1209:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1210:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  Returns Receive Error Counter value. It reads NECNT register.
1211:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1212:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1213:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetReceiveErrorCounter()
1214:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1215:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
1216:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1217:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node)
1218:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
1219:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_REC_Msk) >> CAN_NODE_NECNT_REC_Po
1220:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** }
1221:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1222:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1223:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
1224:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1225:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1226:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1227:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return uint32_t Current status of the node.
1228:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1229:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1230:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Returns errors status as well as successfully transferred CAN frames status.
1231:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1232:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1233:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_ClearStatus()
1234:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1235:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
1236:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1237:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint32_t XMC_CAN_NODE_GetStatus(XMC_CAN_NODE_t *const can_node)
1238:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
1239:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   return ((can_node->NSR));
1240:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** }
1241:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1242:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
1243:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1244:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1245:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_node_status Status to clear.Refer @ref XMC_CAN_NODE_STATUS_t for valid values.
1246:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1247:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return None
1248:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1249:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1250:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Clear errors status as well as successfully transferred CAN frames status.
1251:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1252:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1253:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetStatus()
1254:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1255:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
1256:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1257:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ClearStatus(XMC_CAN_NODE_t *const can_node,XMC_CAN_NODE_STATUS_t 
1258:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
1259:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****    can_node->NSR &= ~(uint32_t)can_node_status;
1260:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** }
1261:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1262:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1263:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
1264:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1265:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1266:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1267:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return None
1268:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1269:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1270:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * Allow to change the configuration of the CAN node, like bit timing, CAN bus transmit/receive por
1271:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * counters read. It configures NCRx.CCE bit.
1272:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1273:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1274:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange()
1275:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1276:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
1277:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1278:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1279:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
1280:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 139              	 .loc 2 1280 0
 140 008e 0368     	 ldr r3,[r0]
 141 0090 43F04003 	 orr r3,r3,#64
 142 0094 0360     	 str r3,[r0]
 143              	.LBE29:
 144              	.LBE28:
 181:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                         (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_
 145              	 .loc 1 181 0
 146 0096 4989     	 ldrh r1,[r1,#10]
 147              	.LVL16:
 148 0098 0139     	 subs r1,r1,#1
 149 009a 8901     	 lsls r1,r1,#6
 150 009c C9B2     	 uxtb r1,r1
 151 009e 41EAC831 	 orr r1,r1,r8,lsl#15
 180:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 152              	 .loc 1 180 0
 153 00a2 09F1FF33 	 add r3,r9,#-1
 154 00a6 1B03     	 lsls r3,r3,#12
 155 00a8 03F4E043 	 and r3,r3,#28672
 156 00ac 1943     	 orrs r1,r1,r3
 182:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                         ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CA
 157              	 .loc 1 182 0
 158 00ae 013A     	 subs r2,r2,#1
 159              	.LVL17:
 160 00b0 1202     	 lsls r2,r2,#8
 161              	.LVL18:
 162 00b2 02F47063 	 and r3,r2,#3840
 163 00b6 41EA0302 	 orr r2,r1,r3
 183:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                         ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 164              	 .loc 1 183 0
 165 00ba 4FEA4803 	 lsl r3,r8,#1
 166 00be 9844     	 add r8,r8,r3
 167              	.LVL19:
 168 00c0 2CFA08F3 	 lsr r3,ip,r8
 169 00c4 013B     	 subs r3,r3,#1
 170 00c6 03F03F03 	 and r3,r3,#63
 171 00ca 1343     	 orrs r3,r3,r2
 180:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 172              	 .loc 1 180 0
 173 00cc 0361     	 str r3,[r0,#16]
 174              	.LVL20:
 175              	.LBB30:
 176              	.LBB31:
1281:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** }
1282:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1283:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1284:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** /**
1285:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1286:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1287:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1288:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * @return None
1289:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1290:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1291:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *  Forbid to change the configuration of the CAN node. It configures NCRx.CCE bit.
1292:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1293:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1294:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange()
1295:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  *
1296:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****  */
1297:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** 
1298:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1299:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** {
1300:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 177              	 .loc 2 1300 0
 178 00ce 0368     	 ldr r3,[r0]
 179 00d0 23F04003 	 bic r3,r3,#64
 180 00d4 0360     	 str r3,[r0]
 181              	.LBE31:
 182              	.LBE30:
 188:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     }
 183              	 .loc 1 188 0
 184 00d6 0020     	 movs r0,#0
 185              	.LVL21:
 186 00d8 BDE8F087 	 pop {r4,r5,r6,r7,r8,r9,r10,pc}
 187              	.LVL22:
 188              	.L7:
 189              	.LBE32:
 190              	 .loc 1 192 0
 191 00dc 0120     	 movs r0,#1
 192              	.LVL23:
 193 00de BDE8F087 	 pop {r4,r5,r6,r7,r8,r9,r10,pc}
 194              	.LVL24:
 195              	.L9:
 196 00e2 0120     	 movs r0,#1
 197              	.LVL25:
 193:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 198              	 .loc 1 193 0
 199 00e4 BDE8F087 	 pop {r4,r5,r6,r7,r8,r9,r10,pc}
 200              	.LVL26:
 201              	.L13:
 202              	 .align 2
 203              	.L12:
 204 00e8 5917B7D1 	 .word -776530087
 205              	 .cfi_endproc
 206              	.LFE235:
 208              	 .section .text.XMC_CAN_NODE_NominalBitTimeConfigure,"ax",%progbits
 209              	 .align 2
 210              	 .global XMC_CAN_NODE_NominalBitTimeConfigure
 211              	 .thumb
 212              	 .thumb_func
 214              	XMC_CAN_NODE_NominalBitTimeConfigure:
 215              	.LFB236:
 194:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 195:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /* Baudrate Configuration */
 196:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** void XMC_CAN_NODE_NominalBitTimeConfigure (XMC_CAN_NODE_t *const can_node,
 197:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                            const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_
 198:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 216              	 .loc 1 198 0
 217              	 .cfi_startproc
 218              	 
 219              	 
 220              	.LVL27:
 221 0000 2DE9F04F 	 push {r4,r5,r6,r7,r8,r9,r10,fp,lr}
 222              	.LCFI1:
 223              	 .cfi_def_cfa_offset 36
 224              	 .cfi_offset 4,-36
 225              	 .cfi_offset 5,-32
 226              	 .cfi_offset 6,-28
 227              	 .cfi_offset 7,-24
 228              	 .cfi_offset 8,-20
 229              	 .cfi_offset 9,-16
 230              	 .cfi_offset 10,-12
 231              	 .cfi_offset 11,-8
 232              	 .cfi_offset 14,-4
 233              	.LVL28:
 234              	.LBB33:
 199:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t temp_brp = 12U ;
 200:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t temp_tseg1 = 12U;
 201:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t best_brp = 0U;
 202:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t best_tseg1 = 1U;
 203:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t best_tseg2 = 0U;
 204:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t best_tbaud = 0U;
 205:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t best_error = 10000U;
 206:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 207:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: rate not supported", (can_bit_time->baudrate
 208:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****              (can_bit_time->baudrate >= 100000U));
 209:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: fCAN not supported",
 210:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****              can_bit_time->can_frequency <= 120000000U);
 211:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: fCAN not supported",
 212:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****              can_bit_time->can_frequency > 5000000U);
 213:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: sample point not supported",
 214:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****              (can_bit_time->sample_point < 10000U) && ((can_bit_time->sample_point > 0U)));
 215:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****        
 216:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /*
 217:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****    * Bit timing & sampling
 218:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****    * Tq = (BRP+1)/Fcan if DIV8 = 0
 219:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****    * Tq = 8*(BRP+1)/Fcan if DIV8 = 1
 220:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****    * TSync = 1.Tq
 221:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****    * TSeg1 = (TSEG1+1)*Tq                >= 3Tq
 222:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****    * TSeg2 = (TSEG2+1)*Tq                >= 2Tq
 223:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****    * Bit Time = TSync + TSeg1 + TSeg2    >= 8Tq
 224:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****    *
 225:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****    * Resynchronization:
 226:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****    *
 227:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****    * Tsjw = (SJW + 1)*Tq
 228:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****    * TSeg1 >= Tsjw + Tprop
 229:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****    * TSeg2 >= Tsjw
 230:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****    */
 231:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /* search for best baudrate */
 232:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 233:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 234:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 235:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     uint32_t f_quanta = (uint32_t)((can_bit_time->can_frequency * 10U) / temp_brp);
 235              	 .loc 1 235 0
 236 0004 0B68     	 ldr r3,[r1]
 237 0006 03EB8303 	 add r3,r3,r3,lsl#2
 238 000a 4FEA430E 	 lsl lr,r3,#1
 236:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
 239              	 .loc 1 236 0
 240 000e 4E68     	 ldr r6,[r1,#4]
 241              	.LBE33:
 205:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 242              	 .loc 1 205 0
 243 0010 42F21078 	 movw r8,#10000
 204:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t best_error = 10000U;
 244              	 .loc 1 204 0
 245 0014 4FF0000C 	 mov ip,#0
 201:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t best_tseg1 = 1U;
 246              	 .loc 1 201 0
 247 0018 E246     	 mov r10,ip
 232:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 248              	 .loc 1 232 0
 249 001a 0125     	 movs r5,#1
 250              	.LBB34:
 237:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     uint32_t temp_baudrate;
 238:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     uint32_t error;
 239:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 240:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   if((temp_tbaud % 10U) > 5U)
 251              	 .loc 1 240 0
 252 001c 384F     	 ldr r7,.L33
 241:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 242:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 243:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   temp_tbaud++;
 244:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 245:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   else
 246:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 247:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 248:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 249:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 250:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   if(temp_tbaud > 0U)
 251:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 252:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     temp_baudrate = (uint32_t) (f_quanta / (temp_tbaud * 10U));
 253:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 254:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   else
 255:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 256:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     temp_baudrate = f_quanta / 10U;
 257:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   temp_tbaud = 1;
 253              	 .loc 1 257 0
 254 001e A946     	 mov r9,r5
 255              	.LVL29:
 256              	.L23:
 235:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
 257              	 .loc 1 235 0
 258 0020 BEFBF5F4 	 udiv r4,lr,r5
 259              	.LVL30:
 236:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     uint32_t temp_baudrate;
 260              	 .loc 1 236 0
 261 0024 B4FBF6F3 	 udiv r3,r4,r6
 262              	.LVL31:
 240:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 263              	 .loc 1 240 0
 264 0028 A7FB03B2 	 umull fp,r2,r7,r3
 265 002c D208     	 lsrs r2,r2,#3
 266 002e 02EB8202 	 add r2,r2,r2,lsl#2
 267 0032 A3EB4202 	 sub r2,r3,r2,lsl#1
 268 0036 052A     	 cmp r2,#5
 269              	.LVL32:
 242:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   temp_tbaud++;
 270              	 .loc 1 242 0
 271 0038 A7FB0323 	 umull r2,r3,r7,r3
 272              	.LVL33:
 273 003c 4FEAD303 	 lsr r3,r3,#3
 243:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 274              	 .loc 1 243 0
 275 0040 88BF     	 it hi
 276 0042 0133     	 addhi r3,r3,#1
 277              	.LVL34:
 250:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 278              	 .loc 1 250 0
 279 0044 2BB1     	 cbz r3,.L17
 252:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 280              	 .loc 1 252 0
 281 0046 03EB8302 	 add r2,r3,r3,lsl#2
 282 004a 5200     	 lsls r2,r2,#1
 283 004c B4FBF2F4 	 udiv r4,r4,r2
 284              	.LVL35:
 285 0050 03E0     	 b .L18
 286              	.LVL36:
 287              	.L17:
 256:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   temp_tbaud = 1;
 288              	 .loc 1 256 0
 289 0052 A7FB0434 	 umull r3,r4,r7,r4
 290              	.LVL37:
 291 0056 E408     	 lsrs r4,r4,#3
 292              	.LVL38:
 293              	 .loc 1 257 0
 294 0058 4B46     	 mov r3,r9
 295              	.LVL39:
 296              	.L18:
 258:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 259:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 260:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   if(temp_baudrate >= can_bit_time->baudrate)
 297              	 .loc 1 260 0
 298 005a B442     	 cmp r4,r6
 261:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 262:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   error = temp_baudrate - can_bit_time->baudrate;
 299              	 .loc 1 262 0
 300 005c 2CBF     	 ite cs
 301 005e A41B     	 subcs r4,r4,r6
 302              	.LVL40:
 263:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 264:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   else
 265:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 266:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   error = can_bit_time->baudrate - temp_baudrate;
 303              	 .loc 1 266 0
 304 0060 341B     	 subcc r4,r6,r4
 305              	.LVL41:
 267:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 268:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 269:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   if ((temp_tbaud <= 20U) && (best_error > error))
 306              	 .loc 1 269 0
 307 0062 142B     	 cmp r3,#20
 308 0064 07D8     	 bhi .L21
 309              	 .loc 1 269 0 is_stmt 0 discriminator 1
 310 0066 4445     	 cmp r4,r8
 311 0068 05D2     	 bcs .L21
 312              	.LVL42:
 270:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 271:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     best_brp = temp_brp;
 272:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     best_tbaud = temp_tbaud;
 273:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     best_error = (error);
 274:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 275:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     if (error < 1000U)
 313              	 .loc 1 275 0 is_stmt 1
 314 006a B4F57A7F 	 cmp r4,#1000
 315 006e 06D3     	 bcc .L29
 273:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 316              	 .loc 1 273 0
 317 0070 A046     	 mov r8,r4
 318 0072 9C46     	 mov ip,r3
 319 0074 AA46     	 mov r10,r5
 320              	.LVL43:
 321              	.L21:
 322              	.LBE34:
 232:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 323              	 .loc 1 232 0 discriminator 2
 324 0076 0135     	 adds r5,r5,#1
 325              	.LVL44:
 326 0078 412D     	 cmp r5,#65
 327 007a D1D1     	 bne .L23
 328 007c 01E0     	 b .L22
 329              	.LVL45:
 330              	.L29:
 331 007e 9C46     	 mov ip,r3
 332 0080 AA46     	 mov r10,r5
 333              	.LVL46:
 334              	.L22:
 335              	.LBB35:
 276:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     {
 277:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       break;
 278:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     }
 279:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****    }
 280:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 281:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /* search for best sample point */
 282:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   best_error = 10000U;
 283:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 284:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 285:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 286:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     uint32_t tempSamplePoint = ((temp_tseg1 + 1U) * 10000U) / best_tbaud;
 287:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t error;
 288:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   if (tempSamplePoint >= can_bit_time->sample_point)
 336              	 .loc 1 288 0
 337 0082 0D89     	 ldrh r5,[r1,#8]
 338              	.LVL47:
 339 0084 1F4B     	 ldr r3,.L33+4
 340              	.LVL48:
 341              	.LBE35:
 282:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 342              	 .loc 1 282 0
 343 0086 42F21076 	 movw r6,#10000
 202:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t best_tseg2 = 0U;
 344              	 .loc 1 202 0
 345 008a 0127     	 movs r7,#1
 284:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 346              	 .loc 1 284 0
 347 008c 4022     	 movs r2,#64
 348              	.LVL49:
 349              	.L28:
 350              	.LBB36:
 286:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t error;
 351              	 .loc 1 286 0
 352 008e B3FBFCF4 	 udiv r4,r3,ip
 353              	.LVL50:
 354              	 .loc 1 288 0
 355 0092 AC42     	 cmp r4,r5
 356 0094 03D3     	 bcc .L24
 289:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 290:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       error = tempSamplePoint  - can_bit_time->sample_point;
 357              	 .loc 1 290 0
 358 0096 641B     	 subs r4,r4,r5
 359              	.LVL51:
 291:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 292:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   else
 293:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 294:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     error = can_bit_time->sample_point  - tempSamplePoint;
 295:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 296:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     if (best_error > error)
 360              	 .loc 1 296 0
 361 0098 B442     	 cmp r4,r6
 362 009a 05D3     	 bcc .L25
 363 009c 06E0     	 b .L26
 364              	.LVL52:
 365              	.L24:
 294:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 366              	 .loc 1 294 0
 367 009e 2C1B     	 subs r4,r5,r4
 368              	.LVL53:
 369              	 .loc 1 296 0
 370 00a0 B442     	 cmp r4,r6
 371 00a2 28BF     	 it cs
 372 00a4 3A46     	 movcs r2,r7
 373              	.LVL54:
 374 00a6 08E0     	 b .L27
 375              	.LVL55:
 376              	.L25:
 290:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 377              	 .loc 1 290 0
 378 00a8 2646     	 mov r6,r4
 379              	.LVL56:
 380              	 .loc 1 296 0
 381 00aa 1746     	 mov r7,r2
 382              	.L26:
 383              	.LVL57:
 384              	.LBE36:
 284:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 385              	 .loc 1 284 0 discriminator 2
 386 00ac 013A     	 subs r2,r2,#1
 387              	.LVL58:
 388 00ae A3F51C53 	 sub r3,r3,#9984
 389              	.LVL59:
 390 00b2 103B     	 subs r3,r3,#16
 391              	.LVL60:
 392 00b4 022A     	 cmp r2,#2
 393 00b6 EAD1     	 bne .L28
 394 00b8 3A46     	 mov r2,r7
 395              	.LVL61:
 396              	.L27:
 397              	.LBB37:
 398              	.LBB38:
1280:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** }
 399              	 .loc 2 1280 0
 400 00ba 0368     	 ldr r3,[r0]
 401 00bc 43F04003 	 orr r3,r3,#64
 402 00c0 0360     	 str r3,[r0]
 403              	.LBE38:
 404              	.LBE37:
 297:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     {
 298:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       best_tseg1 = temp_tseg1;
 299:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       best_error = error;
 300:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     }
 301:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     if (tempSamplePoint < (can_bit_time->sample_point))
 302:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     {
 303:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       break;
 304:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     }
 305:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 306:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 307:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   best_tseg2 = best_tbaud - best_tseg1 - 1U;
 308:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 309:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_CAN_NODE_EnableConfigurationChange(can_node);
 310:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /* Configure bit timing register */
 311:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_N
 312:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 313:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                    (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBT
 314:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                    (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_
 405              	 .loc 1 314 0
 406 00c2 0AF1FF3A 	 add r10,r10,#-1
 407              	.LVL62:
 408 00c6 0AF03F0A 	 and r10,r10,#63
 409              	.LVL63:
 312:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                    (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBT
 410              	 .loc 1 312 0
 411 00ca 4B89     	 ldrh r3,[r1,#10]
 412 00cc 013B     	 subs r3,r3,#1
 413 00ce 9B01     	 lsls r3,r3,#6
 414 00d0 DBB2     	 uxtb r3,r3
 415 00d2 4AEA030A 	 orr r10,r10,r3
 313:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                    (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_
 416              	 .loc 1 313 0
 417 00d6 531E     	 subs r3,r2,#1
 418 00d8 1B02     	 lsls r3,r3,#8
 419 00da 03F47063 	 and r3,r3,#3840
 420 00de 4AEA030A 	 orr r10,r10,r3
 421 00e2 ACF10203 	 sub r3,ip,#2
 311:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 422              	 .loc 1 311 0
 423 00e6 9B1A     	 subs r3,r3,r2
 424 00e8 1B03     	 lsls r3,r3,#12
 425 00ea 03F4E043 	 and r3,r3,#28672
 426              	 .loc 1 314 0
 427 00ee 4AEA0303 	 orr r3,r10,r3
 311:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 428              	 .loc 1 311 0
 429 00f2 0361     	 str r3,[r0,#16]
 430              	.LVL64:
 431              	.LBB39:
 432              	.LBB40:
 433              	 .loc 2 1300 0
 434 00f4 0368     	 ldr r3,[r0]
 435 00f6 23F04003 	 bic r3,r3,#64
 436 00fa 0360     	 str r3,[r0]
 437 00fc BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,r10,fp,pc}
 438              	.LVL65:
 439              	.L34:
 440              	 .align 2
 441              	.L33:
 442 0100 CDCCCCCC 	 .word -858993459
 443 0104 10EB0900 	 .word 650000
 444              	.LBE40:
 445              	.LBE39:
 446              	 .cfi_endproc
 447              	.LFE236:
 449              	 .section .text.XMC_CAN_AllocateMOtoNodeList,"ax",%progbits
 450              	 .align 2
 451              	 .global XMC_CAN_AllocateMOtoNodeList
 452              	 .thumb
 453              	 .thumb_func
 455              	XMC_CAN_AllocateMOtoNodeList:
 456              	.LFB237:
 315:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                    (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 316:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_CAN_NODE_DisableConfigurationChange(can_node);
 317:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 318:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /* Function to allocate message object from free list to node list */
 319:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 320:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 457              	 .loc 1 320 0
 458              	 .cfi_startproc
 459              	 
 460              	 
 461              	 
 462              	.LVL66:
 463              	.L36:
 464              	.LBB41:
 465              	.LBB42:
 674:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h **** }
 466              	 .loc 2 674 0 discriminator 1
 467 0000 D0F8C431 	 ldr r3,[r0,#452]
 468              	.LBE42:
 469              	.LBE41:
 321:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /* wait while panel operation is in progress. */
 322:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   while (XMC_CAN_IsPanelControlReady(obj) == false)
 470              	 .loc 1 322 0 discriminator 1
 471 0004 13F4407F 	 tst r3,#768
 472 0008 FAD1     	 bne .L36
 473              	.LVL67:
 474              	.LBB43:
 475              	.LBB44:
 706:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 476              	 .loc 2 706 0
 477 000a 1204     	 lsls r2,r2,#16
 478              	.LVL68:
 705:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 479              	 .loc 2 705 0
 480 000c 42F00202 	 orr r2,r2,#2
 481              	.LBE44:
 482              	.LBE43:
 323:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 324:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     /*Do nothing*/
 325:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   };
 326:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 327:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /* Panel Command for  allocation of MO to node list */
 328:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
 483              	 .loc 1 328 0
 484 0010 0131     	 adds r1,r1,#1
 485              	.LVL69:
 486              	.LBB46:
 487              	.LBB45:
 706:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 488              	 .loc 2 706 0
 489 0012 42EA0161 	 orr r1,r2,r1,lsl#24
 705:C:/Files/Projects/Git/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 490              	 .loc 2 705 0
 491 0016 C0F8C411 	 str r1,[r0,#452]
 492 001a 7047     	 bx lr
 493              	.LBE45:
 494              	.LBE46:
 495              	 .cfi_endproc
 496              	.LFE237:
 498              	 .section .text.XMC_CAN_Disable,"ax",%progbits
 499              	 .align 2
 500              	 .global XMC_CAN_Disable
 501              	 .thumb
 502              	 .thumb_func
 504              	XMC_CAN_Disable:
 505              	.LFB238:
 329:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 330:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 331:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /* Disable XMC_CAN Peripheral */
 332:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** void XMC_CAN_Disable(XMC_CAN_t *const obj)
 333:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 506              	 .loc 1 333 0
 507              	 .cfi_startproc
 508              	 
 509              	 
 510              	.LVL70:
 511 0000 08B5     	 push {r3,lr}
 512              	.LCFI2:
 513              	 .cfi_def_cfa_offset 8
 514              	 .cfi_offset 3,-8
 515              	 .cfi_offset 14,-4
 334:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /* Disable CAN Module */
 335:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   obj->CLC = CAN_CLC_DISR_Msk;
 516              	 .loc 1 335 0
 517 0002 0123     	 movs r3,#1
 518 0004 0360     	 str r3,[r0]
 336:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 337:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 519              	 .loc 1 337 0
 520 0006 0248     	 ldr r0,.L40
 521              	.LVL71:
 522 0008 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 523              	.LVL72:
 524 000c 08BD     	 pop {r3,pc}
 525              	.L41:
 526 000e 00BF     	 .align 2
 527              	.L40:
 528 0010 10000010 	 .word 268435472
 529              	 .cfi_endproc
 530              	.LFE238:
 532              	 .section .text.XMC_CAN_Enable,"ax",%progbits
 533              	 .align 2
 534              	 .global XMC_CAN_Enable
 535              	 .thumb
 536              	 .thumb_func
 538              	XMC_CAN_Enable:
 539              	.LFB239:
 338:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #endif
 339:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #if defined(CLOCK_GATING_SUPPORTED)
 340:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 341:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #endif
 342:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 343:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 344:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /* Enable XMC_CAN Peripheral */
 345:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** void XMC_CAN_Enable(XMC_CAN_t *const obj)
 346:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 540              	 .loc 1 346 0
 541              	 .cfi_startproc
 542              	 
 543              	 
 544              	.LVL73:
 545 0000 10B5     	 push {r4,lr}
 546              	.LCFI3:
 547              	 .cfi_def_cfa_offset 8
 548              	 .cfi_offset 4,-8
 549              	 .cfi_offset 14,-4
 550 0002 0446     	 mov r4,r0
 347:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #if defined(CLOCK_GATING_SUPPORTED)
 348:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 349:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #endif
 350:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 351:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 551              	 .loc 1 351 0
 552 0004 0548     	 ldr r0,.L46
 553              	.LVL74:
 554 0006 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 555              	.LVL75:
 352:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #endif
 353:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /* Enable CAN Module */
 354:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 556              	 .loc 1 354 0
 557 000a 2368     	 ldr r3,[r4]
 558 000c 23F00103 	 bic r3,r3,#1
 559 0010 2360     	 str r3,[r4]
 560              	.L43:
 355:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   while (obj->CLC & CAN_CLC_DISS_Msk)
 561              	 .loc 1 355 0 discriminator 1
 562 0012 2368     	 ldr r3,[r4]
 563 0014 13F0020F 	 tst r3,#2
 564 0018 FBD1     	 bne .L43
 356:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 357:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     /*Do nothing*/
 358:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   };
 359:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 565              	 .loc 1 359 0
 566 001a 10BD     	 pop {r4,pc}
 567              	.LVL76:
 568              	.L47:
 569              	 .align 2
 570              	.L46:
 571 001c 10000010 	 .word 268435472
 572              	 .cfi_endproc
 573              	.LFE239:
 575              	 .section .text.XMC_CAN_Init,"ax",%progbits
 576              	 .align 2
 577              	 .global XMC_CAN_Init
 578              	 .thumb
 579              	 .thumb_func
 581              	XMC_CAN_Init:
 582              	.LFB240:
 360:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 361:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #if defined(MULTICAN_PLUS)
 362:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
 363:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 364:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t  step_n, step_f;
 365:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   bool normal_divider;
 366:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t freq_n, freq_f;
 367:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t step;
 368:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t can_frequency_khz;
 369:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t peripheral_frequency_khz;
 370:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_CAN_DM_t can_divider_mode;
 371:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 372:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t peripheral_frequency;
 373:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /*Enabling the module*/
 374:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_CAN_Enable(obj);
 375:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 376:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 377:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 378:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 379:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 380:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 381:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 382:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /* Normal divider mode */
 383:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 384:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 385:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 386:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /* Fractional divider mode */
 387:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   can_frequency_khz = (uint32_t) (can_frequency >> 6);
 388:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 389:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 390:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 391:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 392:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   freq_f = freq_f << 6;
 393:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 394:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 395:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 396:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   step   = (normal_divider != 0U) ? step_n : step_f;
 397:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 398:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 399:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 400:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos)
 401:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 402:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 403:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 404:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #else
 405:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /* Initialization of XMC_CAN GLOBAL Object */
 406:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency)
 407:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 583              	 .loc 1 407 0
 584              	 .cfi_startproc
 585              	 
 586              	 
 587              	.LVL77:
 588 0000 70B5     	 push {r4,r5,r6,lr}
 589              	.LCFI4:
 590              	 .cfi_def_cfa_offset 16
 591              	 .cfi_offset 4,-16
 592              	 .cfi_offset 5,-12
 593              	 .cfi_offset 6,-8
 594              	 .cfi_offset 14,-4
 595 0002 0546     	 mov r5,r0
 596 0004 0E46     	 mov r6,r1
 408:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t  step_n, step_f;
 409:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   bool normal_divider;
 410:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t freq_n, freq_f;
 411:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t step;
 412:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t can_frequency_khz;
 413:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t peripheral_frequency_khz;
 414:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_CAN_DM_t can_divider_mode;
 415:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 416:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t peripheral_frequency = (XMC_SCU_CLOCK_GetPeripheralClockFrequency());
 597              	 .loc 1 416 0
 598 0006 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 599              	.LVL78:
 600 000a 0446     	 mov r4,r0
 601              	.LVL79:
 417:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 418:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 419:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 420:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /*Enabling the module*/
 421:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_CAN_Enable(obj);
 602              	 .loc 1 421 0
 603 000c 2846     	 mov r0,r5
 604              	.LVL80:
 605 000e FFF7FEFF 	 bl XMC_CAN_Enable
 606              	.LVL81:
 422:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 423:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /* Normal divider mode */
 424:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 607              	 .loc 1 424 0
 608 0012 B4FBF6F1 	 udiv r1,r4,r6
 609 0016 C1F58061 	 rsb r1,r1,#1024
 610              	.LVL82:
 611              	.LBB47:
 612              	.LBB48:
  93:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 613              	 .loc 1 93 0
 614 001a 0029     	 cmp r1,#0
 615 001c 38BF     	 it cc
 616 001e 0021     	 movcc r1,#0
 617              	.LVL83:
 618              	.LBE48:
 619              	.LBE47:
 620              	.LBB49:
 621              	.LBB50:
  98:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 622              	 .loc 1 98 0
 623 0020 40F2FF30 	 movw r0,#1023
 624 0024 8142     	 cmp r1,r0
 625 0026 28BF     	 it cs
 626 0028 0146     	 movcs r1,r0
 627              	.LVL84:
 628              	.LBE50:
 629              	.LBE49:
 425:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 426:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 427:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /* Fractional divider mode */
 428:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   can_frequency_khz = (uint32_t) (can_frequency >> 6);
 429:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 630              	 .loc 1 429 0
 631 002a A209     	 lsrs r2,r4,#6
 632              	.LVL85:
 428:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 633              	 .loc 1 428 0
 634 002c B309     	 lsrs r3,r6,#6
 635              	.LVL86:
 430:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 431:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 636              	 .loc 1 431 0
 637 002e 9B02     	 lsls r3,r3,#10
 638              	.LVL87:
 639 0030 B3FBF2F3 	 udiv r3,r3,r2
 640              	.LVL88:
 641              	.LBB51:
 642              	.LBB52:
  98:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 643              	 .loc 1 98 0
 644 0034 8342     	 cmp r3,r0
 645 0036 28BF     	 it cs
 646 0038 0346     	 movcs r3,r0
 647              	.LVL89:
 648              	.LBE52:
 649              	.LBE51:
 432:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 650              	 .loc 1 432 0
 651 003a 02FB03F2 	 mul r2,r2,r3
 652              	.LVL90:
 653 003e 920A     	 lsrs r2,r2,#10
 654              	.LVL91:
 425:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 655              	 .loc 1 425 0
 656 0040 C1F58060 	 rsb r0,r1,#1024
 433:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   freq_f = freq_f << 6;
 434:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 435:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 657              	 .loc 1 435 0
 658 0044 B4FBF0F0 	 udiv r0,r4,r0
 659              	.LVL92:
 660 0048 A6EB8212 	 sub r2,r6,r2,lsl#6
 661              	.LVL93:
 436:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 437:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   step   = (normal_divider != 0U) ? step_n : step_f;
 662              	 .loc 1 437 0
 663 004c 301A     	 subs r0,r6,r0
 664              	.LVL94:
 665 004e 9042     	 cmp r0,r2
 666 0050 98BF     	 it ls
 667 0052 0B46     	 movls r3,r1
 668              	.LVL95:
 438:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 439:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 440:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 669              	 .loc 1 440 0
 670 0054 E968     	 ldr r1,[r5,#12]
 671              	.LVL96:
 672 0056 21F44341 	 bic r1,r1,#49920
 673 005a 21F0FF01 	 bic r1,r1,#255
 674 005e E960     	 str r1,[r5,#12]
 441:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos)
 675              	 .loc 1 441 0
 676 0060 E968     	 ldr r1,[r5,#12]
 677 0062 0B43     	 orrs r3,r3,r1
 678 0064 9042     	 cmp r0,r2
 679 0066 8CBF     	 ite hi
 680 0068 4FF40040 	 movhi r0,#32768
 681 006c 4FF48040 	 movls r0,#16384
 682              	.LVL97:
 683 0070 1843     	 orrs r0,r0,r3
 684 0072 E860     	 str r0,[r5,#12]
 685 0074 70BD     	 pop {r4,r5,r6,pc}
 686              	 .cfi_endproc
 687              	.LFE240:
 689 0076 00BF     	 .section .text.XMC_CAN_SetBaudrateClockSource,"ax",%progbits
 690              	 .align 2
 691              	 .global XMC_CAN_SetBaudrateClockSource
 692              	 .thumb
 693              	 .thumb_func
 695              	XMC_CAN_SetBaudrateClockSource:
 696              	.LFB241:
 442:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 443:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #endif
 444:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 445:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source)
 446:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 697              	 .loc 1 446 0
 698              	 .cfi_startproc
 699              	 
 700              	 
 701              	 
 702              	.LVL98:
 703 0000 7047     	 bx lr
 704              	 .cfi_endproc
 705              	.LFE241:
 707 0002 00BF     	 .section .text.XMC_CAN_GetBaudrateClockSource,"ax",%progbits
 708              	 .align 2
 709              	 .global XMC_CAN_GetBaudrateClockSource
 710              	 .thumb
 711              	 .thumb_func
 713              	XMC_CAN_GetBaudrateClockSource:
 714              	.LFB242:
 447:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #if defined(MULTICAN_PLUS)
 448:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
 449:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #else
 450:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_UNUSED_ARG(obj);
 451:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_UNUSED_ARG(source);
 452:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #endif
 453:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 454:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 455:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
 456:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 715              	 .loc 1 456 0
 716              	 .cfi_startproc
 717              	 
 718              	 
 719              	 
 720              	.LVL99:
 457:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #if defined(MULTICAN_PLUS)
 458:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
 459:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #elif (UC_FAMILY == XMC4) 
 460:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_UNUSED_ARG(obj);
 461:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   return XMC_CAN_CANCLKSRC_FPERI;
 462:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #endif    
 463:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 721              	 .loc 1 463 0
 722 0000 0120     	 movs r0,#1
 723              	.LVL100:
 724 0002 7047     	 bx lr
 725              	 .cfi_endproc
 726              	.LFE242:
 728              	 .section .text.XMC_CAN_GetBaudrateClockFrequency,"ax",%progbits
 729              	 .align 2
 730              	 .global XMC_CAN_GetBaudrateClockFrequency
 731              	 .thumb
 732              	 .thumb_func
 734              	XMC_CAN_GetBaudrateClockFrequency:
 735              	.LFB243:
 464:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 465:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
 466:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 736              	 .loc 1 466 0
 737              	 .cfi_startproc
 738              	 
 739              	 
 740              	.LVL101:
 741 0000 08B5     	 push {r3,lr}
 742              	.LCFI5:
 743              	 .cfi_def_cfa_offset 8
 744              	 .cfi_offset 3,-8
 745              	 .cfi_offset 14,-4
 467:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t frequency;
 468:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 469:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #if defined(MULTICAN_PLUS)
 470:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   switch(XMC_CAN_GetBaudrateClockSource(obj))
 471:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 472:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #if UC_FAMILY == XMC4
 473:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     case XMC_CAN_CANCLKSRC_FPERI:
 474:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 475:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       break;
 476:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #else
 477:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     case XMC_CAN_CANCLKSRC_MCLK:
 478:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 479:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       break;
 480:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #endif
 481:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     case XMC_CAN_CANCLKSRC_FOHP:
 482:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       frequency = OSCHP_GetFrequency();
 483:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       break;
 484:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 485:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     default:
 486:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       frequency = 0;
 487:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       break;
 488:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 489:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #else
 490:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_UNUSED_ARG(obj);
 491:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 746              	 .loc 1 491 0
 747 0002 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 748              	.LVL102:
 492:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #endif  
 493:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 494:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   return frequency;
 495:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 749              	 .loc 1 495 0
 750 0006 08BD     	 pop {r3,pc}
 751              	 .cfi_endproc
 752              	.LFE243:
 754              	 .section .text.XMC_CAN_InitEx,"ax",%progbits
 755              	 .align 2
 756              	 .global XMC_CAN_InitEx
 757              	 .thumb
 758              	 .thumb_func
 760              	XMC_CAN_InitEx:
 761              	.LFB244:
 496:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 497:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
 498:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 762              	 .loc 1 498 0
 763              	 .cfi_startproc
 764              	 
 765              	 
 766              	.LVL103:
 767 0000 38B5     	 push {r3,r4,r5,lr}
 768              	.LCFI6:
 769              	 .cfi_def_cfa_offset 16
 770              	 .cfi_offset 3,-16
 771              	 .cfi_offset 4,-12
 772              	 .cfi_offset 5,-8
 773              	 .cfi_offset 14,-4
 774 0002 0546     	 mov r5,r0
 775 0004 1446     	 mov r4,r2
 499:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t step_n;
 500:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t freq_n;
 501:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t peripheral_frequency;
 502:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 503:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /*Enabling the module*/
 504:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_CAN_Enable(obj);
 776              	 .loc 1 504 0
 777 0006 FFF7FEFF 	 bl XMC_CAN_Enable
 778              	.LVL104:
 779              	.LBB59:
 780              	.LBB60:
 491:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #endif  
 781              	 .loc 1 491 0
 782 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 783              	.LVL105:
 784              	.LBE60:
 785              	.LBE59:
 505:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 506:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 507:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 508:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 509:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 510:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /* Normal divider mode */
 511:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 786              	 .loc 1 511 0
 787 000e B0FBF4F3 	 udiv r3,r0,r4
 788 0012 C3F58063 	 rsb r3,r3,#1024
 789              	.LVL106:
 790              	.LBB61:
 791              	.LBB62:
  93:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 792              	 .loc 1 93 0
 793 0016 002B     	 cmp r3,#0
 794 0018 38BF     	 it cc
 795 001a 0023     	 movcc r3,#0
 796              	.LVL107:
 797              	.LBE62:
 798              	.LBE61:
 799              	.LBB63:
 800              	.LBB64:
  98:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 801              	 .loc 1 98 0
 802 001c 40F2FF32 	 movw r2,#1023
 803 0020 9342     	 cmp r3,r2
 804 0022 28BF     	 it cs
 805 0024 1346     	 movcs r3,r2
 806              	.LVL108:
 807              	.LBE64:
 808              	.LBE63:
 512:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 513:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 514:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 809              	 .loc 1 514 0
 810 0026 EA68     	 ldr r2,[r5,#12]
 811 0028 22F44342 	 bic r2,r2,#49920
 812 002c 22F0FF02 	 bic r2,r2,#255
 813 0030 EA60     	 str r2,[r5,#12]
 515:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_P
 814              	 .loc 1 515 0
 815 0032 EA68     	 ldr r2,[r5,#12]
 816 0034 42F48042 	 orr r2,r2,#16384
 817 0038 1A43     	 orrs r2,r2,r3
 818 003a EA60     	 str r2,[r5,#12]
 512:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 819              	 .loc 1 512 0
 820 003c C3F58063 	 rsb r3,r3,#1024
 821              	.LVL109:
 516:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 517:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   return freq_n;
 518:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 822              	 .loc 1 518 0
 823 0040 B0FBF3F0 	 udiv r0,r0,r3
 824              	.LVL110:
 825 0044 38BD     	 pop {r3,r4,r5,pc}
 826              	 .cfi_endproc
 827              	.LFE244:
 829 0046 00BF     	 .section .text.XMC_CAN_GetClockFrequency,"ax",%progbits
 830              	 .align 2
 831              	 .global XMC_CAN_GetClockFrequency
 832              	 .thumb
 833              	 .thumb_func
 835              	XMC_CAN_GetClockFrequency:
 836              	.LFB245:
 519:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 520:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** uint32_t XMC_CAN_GetClockFrequency(XMC_CAN_t *const obj)
 521:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 837              	 .loc 1 521 0
 838              	 .cfi_startproc
 839              	 
 840              	 
 841              	.LVL111:
 842 0000 10B5     	 push {r4,lr}
 843              	.LCFI7:
 844              	 .cfi_def_cfa_offset 8
 845              	 .cfi_offset 4,-8
 846              	 .cfi_offset 14,-4
 522:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t step_n = (obj->FDR & CAN_FDR_STEP_Msk) >> CAN_FDR_STEP_Pos;
 847              	 .loc 1 522 0
 848 0002 C468     	 ldr r4,[r0,#12]
 849              	.LVL112:
 850              	.LBB67:
 851              	.LBB68:
 491:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** #endif  
 852              	 .loc 1 491 0
 853 0004 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 854              	.LVL113:
 855              	.LBE68:
 856              	.LBE67:
 857              	 .loc 1 522 0
 858 0008 C4F30904 	 ubfx r4,r4,#0,#10
 859              	.LVL114:
 523:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   return (XMC_CAN_GetBaudrateClockFrequency(obj) * (1024U - step_n));
 860              	 .loc 1 523 0
 861 000c C4F58064 	 rsb r4,r4,#1024
 524:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 862              	 .loc 1 524 0
 863 0010 04FB00F0 	 mul r0,r4,r0
 864              	.LVL115:
 865 0014 10BD     	 pop {r4,pc}
 866              	 .cfi_endproc
 867              	.LFE245:
 869 0016 00BF     	 .section .text.XMC_CAN_MO_SetIdentifier,"ax",%progbits
 870              	 .align 2
 871              	 .global XMC_CAN_MO_SetIdentifier
 872              	 .thumb
 873              	 .thumb_func
 875              	XMC_CAN_MO_SetIdentifier:
 876              	.LFB246:
 525:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 526:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /* Sets the Identifier of the MO */
 527:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** void XMC_CAN_MO_SetIdentifier(XMC_CAN_MO_t *const can_mo, const uint32_t can_identifier)
 528:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 877              	 .loc 1 528 0
 878              	 .cfi_startproc
 879              	 
 880              	 
 881              	 
 882              	.LVL116:
 883 0000 10B4     	 push {r4}
 884              	.LCFI8:
 885              	 .cfi_def_cfa_offset 4
 886              	 .cfi_offset 4,-4
 529:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 887              	 .loc 1 529 0
 888 0002 0368     	 ldr r3,[r0]
 889 0004 9A69     	 ldr r2,[r3,#24]
 890 0006 12F0005F 	 tst r2,#536870912
 891 000a 08D1     	 bne .L61
 530:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 531:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 892              	 .loc 1 531 0
 893 000c 9A69     	 ldr r2,[r3,#24]
 532:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                              ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR
 894              	 .loc 1 532 0
 895 000e 8C04     	 lsls r4,r1,#18
 896 0010 24F06044 	 bic r4,r4,#-536870912
 531:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                              ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR
 897              	 .loc 1 531 0
 898 0014 02F06042 	 and r2,r2,#-536870912
 899 0018 2243     	 orrs r2,r2,r4
 900 001a 9A61     	 str r2,[r3,#24]
 901 001c 06E0     	 b .L62
 902              	.L61:
 533:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 534:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   else
 535:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 536:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 903              	 .loc 1 536 0
 904 001e 9C69     	 ldr r4,[r3,#24]
 537:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                            (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 905              	 .loc 1 537 0
 906 0020 21F06042 	 bic r2,r1,#-536870912
 536:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                            (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 907              	 .loc 1 536 0
 908 0024 04F06044 	 and r4,r4,#-536870912
 909 0028 2243     	 orrs r2,r2,r4
 910 002a 9A61     	 str r2,[r3,#24]
 911              	.L62:
 538:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 539:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   can_mo->can_identifier = can_identifier;
 912              	 .loc 1 539 0
 913 002c 4368     	 ldr r3,[r0,#4]
 914 002e 61F31C03 	 bfi r3,r1,#0,#29
 915 0032 4360     	 str r3,[r0,#4]
 540:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 916              	 .loc 1 540 0
 917 0034 5DF8044B 	 ldr r4,[sp],#4
 918              	.LCFI9:
 919              	 .cfi_restore 4
 920              	 .cfi_def_cfa_offset 0
 921 0038 7047     	 bx lr
 922              	 .cfi_endproc
 923              	.LFE246:
 925 003a 00BF     	 .section .text.XMC_CAN_MO_GetIdentifier,"ax",%progbits
 926              	 .align 2
 927              	 .global XMC_CAN_MO_GetIdentifier
 928              	 .thumb
 929              	 .thumb_func
 931              	XMC_CAN_MO_GetIdentifier:
 932              	.LFB247:
 541:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 542:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 543:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /* Gets the Identifier of the MO */
 544:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** uint32_t XMC_CAN_MO_GetIdentifier(const XMC_CAN_MO_t *const can_mo)
 545:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 933              	 .loc 1 545 0
 934              	 .cfi_startproc
 935              	 
 936              	 
 937              	 
 938              	.LVL117:
 546:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t identifier;
 547:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 939              	 .loc 1 547 0
 940 0000 0368     	 ldr r3,[r0]
 941 0002 9A69     	 ldr r2,[r3,#24]
 942 0004 12F0005F 	 tst r2,#536870912
 548:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 549:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk)) >> XMC_CAN_MO_MOAR_STD
 943              	 .loc 1 549 0
 944 0008 9869     	 ldr r0,[r3,#24]
 945              	.LVL118:
 946 000a 0CBF     	 ite eq
 947 000c C0F38A40 	 ubfxeq r0,r0,#18,#11
 948              	.LVL119:
 550:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 551:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   else
 552:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 553:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk));
 949              	 .loc 1 553 0
 950 0010 20F06040 	 bicne r0,r0,#-536870912
 951              	.LVL120:
 554:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 555:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   return identifier;
 556:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 952              	 .loc 1 556 0
 953 0014 7047     	 bx lr
 954              	 .cfi_endproc
 955              	.LFE247:
 957 0016 00BF     	 .section .text.XMC_CAN_MO_GetAcceptanceMask,"ax",%progbits
 958              	 .align 2
 959              	 .global XMC_CAN_MO_GetAcceptanceMask
 960              	 .thumb
 961              	 .thumb_func
 963              	XMC_CAN_MO_GetAcceptanceMask:
 964              	.LFB248:
 557:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 558:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /* Gets the acceptance mask for the CAN MO. */
 559:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** uint32_t XMC_CAN_MO_GetAcceptanceMask(const XMC_CAN_MO_t *const can_mo)
 560:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 965              	 .loc 1 560 0
 966              	 .cfi_startproc
 967              	 
 968              	 
 969              	 
 970              	.LVL121:
 561:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t identifier_mask;
 562:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 971              	 .loc 1 562 0
 972 0000 0368     	 ldr r3,[r0]
 973 0002 DA68     	 ldr r2,[r3,#12]
 974 0004 12F0005F 	 tst r2,#536870912
 975 0008 07D1     	 bne .L68
 563:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****             && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
 976              	 .loc 1 563 0
 977 000a 9A69     	 ldr r2,[r3,#24]
 978 000c 12F0005F 	 tst r2,#536870912
 979 0010 03D1     	 bne .L68
 564:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 565:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk)) >> XMC_CAN_MO
 980              	 .loc 1 565 0
 981 0012 D868     	 ldr r0,[r3,#12]
 982              	.LVL122:
 983 0014 C0F38A40 	 ubfx r0,r0,#18,#11
 984              	.LVL123:
 985 0018 7047     	 bx lr
 986              	.LVL124:
 987              	.L68:
 566:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 567:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   else
 568:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 569:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk));
 988              	 .loc 1 569 0
 989 001a D868     	 ldr r0,[r3,#12]
 990              	.LVL125:
 991 001c 20F06040 	 bic r0,r0,#-536870912
 992              	.LVL126:
 570:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 571:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   return identifier_mask;
 572:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 993              	 .loc 1 572 0
 994 0020 7047     	 bx lr
 995              	 .cfi_endproc
 996              	.LFE248:
 998 0022 00BF     	 .section .text.XMC_CAN_MO_SetAcceptanceMask,"ax",%progbits
 999              	 .align 2
 1000              	 .global XMC_CAN_MO_SetAcceptanceMask
 1001              	 .thumb
 1002              	 .thumb_func
 1004              	XMC_CAN_MO_SetAcceptanceMask:
 1005              	.LFB249:
 573:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 574:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /* Gets the acceptance mask of the MO */
 575:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** void XMC_CAN_MO_SetAcceptanceMask(XMC_CAN_MO_t *const can_mo,const uint32_t can_id_mask)
 576:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 1006              	 .loc 1 576 0
 1007              	 .cfi_startproc
 1008              	 
 1009              	 
 1010              	 
 1011              	.LVL127:
 1012 0000 10B4     	 push {r4}
 1013              	.LCFI10:
 1014              	 .cfi_def_cfa_offset 4
 1015              	 .cfi_offset 4,-4
 577:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 1016              	 .loc 1 577 0
 1017 0002 0468     	 ldr r4,[r0]
 1018 0004 E368     	 ldr r3,[r4,#12]
 1019 0006 13F0005F 	 tst r3,#536870912
 1020 000a 0AD1     	 bne .L71
 578:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****           && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
 1021              	 .loc 1 578 0
 1022 000c A369     	 ldr r3,[r4,#24]
 1023 000e 13F0005F 	 tst r3,#536870912
 1024 0012 06D1     	 bne .L71
 579:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 580:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 1025              	 .loc 1 580 0
 1026 0014 E368     	 ldr r3,[r4,#12]
 1027 0016 03F06043 	 and r3,r3,#-536870912
 1028 001a 43EA8143 	 orr r3,r3,r1,lsl#18
 1029 001e E360     	 str r3,[r4,#12]
 1030 0020 06E0     	 b .L72
 1031              	.L71:
 581:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                   (can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 582:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 583:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   else
 584:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 585:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 1032              	 .loc 1 585 0
 1033 0022 E268     	 ldr r2,[r4,#12]
 586:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                   (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 1034              	 .loc 1 586 0
 1035 0024 21F06043 	 bic r3,r1,#-536870912
 585:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                   (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 1036              	 .loc 1 585 0
 1037 0028 02F06042 	 and r2,r2,#-536870912
 1038 002c 1343     	 orrs r3,r3,r2
 1039 002e E360     	 str r3,[r4,#12]
 1040              	.L72:
 587:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 588:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   can_mo->can_id_mask = can_id_mask;
 1041              	 .loc 1 588 0
 1042 0030 8368     	 ldr r3,[r0,#8]
 1043 0032 61F31C03 	 bfi r3,r1,#0,#29
 1044 0036 8360     	 str r3,[r0,#8]
 589:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 1045              	 .loc 1 589 0
 1046 0038 5DF8044B 	 ldr r4,[sp],#4
 1047              	.LCFI11:
 1048              	 .cfi_restore 4
 1049              	 .cfi_def_cfa_offset 0
 1050 003c 7047     	 bx lr
 1051              	 .cfi_endproc
 1052              	.LFE249:
 1054 003e 00BF     	 .section .text.XMC_CAN_MO_UpdateData,"ax",%progbits
 1055              	 .align 2
 1056              	 .global XMC_CAN_MO_UpdateData
 1057              	 .thumb
 1058              	 .thumb_func
 1060              	XMC_CAN_MO_UpdateData:
 1061              	.LFB251:
 590:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 591:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /* Initialization of XMC_CAN MO Object */
 592:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
 593:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 594:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t reg;
 595:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   
 596:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /* Configure MPN */
 597:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
 598:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_
 599:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 600:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   can_mo->can_mo_ptr->MOIPR |= set;
 601:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   
 602:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 603:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 604:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 605:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****        (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 606:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 607:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     ; /*Do nothing*/
 608:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 609:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   else
 610:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 611:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 612:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     /* Disable Message object */
 613:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 614:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 615:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     {
 616:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       reg = can_mo->mo_ar;
 617:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 618:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 619:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       can_mo->can_mo_ptr->MOAR = reg;
 620:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 621:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       reg = can_mo->mo_amr;
 622:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 623:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 624:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = reg;
 625:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     }
 626:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     else
 627:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     {
 628:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 629:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 630:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     }
 631:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     /* Check whether message object is transmit message object */
 632:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 633:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     {
 634:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       /* Set MO as Transmit message object  */
 635:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       XMC_CAN_MO_UpdateData(can_mo);
 636:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 637:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 638:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
 639:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_M
 640:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                    CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
 641:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     }
 642:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     else
 643:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     {
 644:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       /* Set MO as Receive message object and set RXEN bit */
 645:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 646:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 647:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
 648:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_M
 649:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                    CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
 650:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     }
 651:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 652:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 653:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 654:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 655:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /* Update of XMC_CAN Object */
 656:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
 657:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 1062              	 .loc 1 657 0
 1063              	 .cfi_startproc
 1064              	 
 1065              	 
 1066              	 
 1067              	.LVL128:
 658:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 659:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /* Check whether message object is transmit message object */
 660:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 1068              	 .loc 1 660 0
 1069 0000 037E     	 ldrb r3,[r0,#24]
 1070 0002 012B     	 cmp r3,#1
 1071 0004 17D1     	 bne .L76
 661:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 662:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 1072              	 .loc 1 662 0
 1073 0006 0368     	 ldr r3,[r0]
 1074 0008 2022     	 movs r2,#32
 1075 000a DA61     	 str r2,[r3,#28]
 663:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     /* Configure data length */
 664:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 1076              	 .loc 1 664 0
 1077 000c 0168     	 ldr r1,[r0]
 1078 000e 0B68     	 ldr r3,[r1]
 665:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 1079              	 .loc 1 665 0
 1080 0010 027B     	 ldrb r2,[r0,#12]
 1081 0012 1206     	 lsls r2,r2,#24
 1082 0014 02F07062 	 and r2,r2,#251658240
 664:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 1083              	 .loc 1 664 0
 1084 0018 23F07063 	 bic r3,r3,#251658240
 1085 001c 1343     	 orrs r3,r3,r2
 1086 001e 0B60     	 str r3,[r1]
 666:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     /* Configure Data registers*/
 667:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 1087              	 .loc 1 667 0
 1088 0020 0368     	 ldr r3,[r0]
 1089 0022 0269     	 ldr r2,[r0,#16]
 1090 0024 1A61     	 str r2,[r3,#16]
 668:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 1091              	 .loc 1 668 0
 1092 0026 0368     	 ldr r3,[r0]
 1093 0028 4269     	 ldr r2,[r0,#20]
 1094 002a 5A61     	 str r2,[r3,#20]
 669:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
 670:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOC
 1095              	 .loc 1 670 0
 1096 002c 0368     	 ldr r3,[r0]
 1097 002e 034A     	 ldr r2,.L77
 1098 0030 DA61     	 str r2,[r3,#28]
 1099              	.LVL129:
 671:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 1100              	 .loc 1 671 0
 1101 0032 0020     	 movs r0,#0
 1102              	.LVL130:
 1103 0034 7047     	 bx lr
 1104              	.LVL131:
 1105              	.L76:
 672:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 673:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   else
 674:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 675:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 1106              	 .loc 1 675 0
 1107 0036 0320     	 movs r0,#3
 1108              	.LVL132:
 676:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 677:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   return error;
 678:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 1109              	 .loc 1 678 0
 1110 0038 7047     	 bx lr
 1111              	.L78:
 1112 003a 00BF     	 .align 2
 1113              	.L77:
 1114 003c 40002800 	 .word 2621504
 1115              	 .cfi_endproc
 1116              	.LFE251:
 1118              	 .section .text.XMC_CAN_MO_Config,"ax",%progbits
 1119              	 .align 2
 1120              	 .global XMC_CAN_MO_Config
 1121              	 .thumb
 1122              	 .thumb_func
 1124              	XMC_CAN_MO_Config:
 1125              	.LFB250:
 593:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t reg;
 1126              	 .loc 1 593 0
 1127              	 .cfi_startproc
 1128              	 
 1129              	 
 1130              	.LVL133:
 1131 0000 38B5     	 push {r3,r4,r5,lr}
 1132              	.LCFI12:
 1133              	 .cfi_def_cfa_offset 16
 1134              	 .cfi_offset 3,-16
 1135              	 .cfi_offset 4,-12
 1136              	 .cfi_offset 5,-8
 1137              	 .cfi_offset 14,-4
 597:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_
 1138              	 .loc 1 597 0
 1139 0002 0268     	 ldr r2,[r0]
 1140 0004 02F13843 	 add r3,r2,#-1207959552
 1141 0008 A3F5A833 	 sub r3,r3,#86016
 1142              	.LVL134:
 599:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   can_mo->can_mo_ptr->MOIPR |= set;
 1143              	 .loc 1 599 0
 1144 000c 9168     	 ldr r1,[r2,#8]
 1145 000e 21F47F41 	 bic r1,r1,#65280
 1146 0012 9160     	 str r1,[r2,#8]
 600:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   
 1147              	 .loc 1 600 0
 1148 0014 0468     	 ldr r4,[r0]
 1149 0016 A168     	 ldr r1,[r4,#8]
 598:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 1150              	 .loc 1 598 0
 1151 0018 9D0A     	 lsrs r5,r3,#10
 1152 001a C3F34413 	 ubfx r3,r3,#5,#5
 1153              	.LVL135:
 1154 001e 1A02     	 lsls r2,r3,#8
 1155              	.LVL136:
 1156 0020 42EA4533 	 orr r3,r2,r5,lsl#13
 600:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   
 1157              	 .loc 1 600 0
 1158 0024 0B43     	 orrs r3,r3,r1
 1159 0026 A360     	 str r3,[r4,#8]
 602:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1160              	 .loc 1 602 0
 1161 0028 037E     	 ldrb r3,[r0,#24]
 1162 002a 012B     	 cmp r3,#1
 1163 002c 30D8     	 bhi .L79
 613:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 1164              	 .loc 1 613 0
 1165 002e 0368     	 ldr r3,[r0]
 1166 0030 2022     	 movs r2,#32
 1167 0032 DA61     	 str r2,[r3,#28]
 614:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     {
 1168              	 .loc 1 614 0
 1169 0034 C379     	 ldrb r3,[r0,#7]
 1170 0036 13F0200F 	 tst r3,#32
 1171 003a 0ED1     	 bne .L81
 616:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 1172              	 .loc 1 616 0
 1173 003c 4268     	 ldr r2,[r0,#4]
 1174              	.LVL137:
 617:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 1175              	 .loc 1 617 0
 1176 003e 02F06043 	 and r3,r2,#-536870912
 1177              	.LVL138:
 618:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       can_mo->can_mo_ptr->MOAR = reg;
 1178              	 .loc 1 618 0
 1179 0042 43EA8243 	 orr r3,r3,r2,lsl#18
 1180              	.LVL139:
 619:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 1181              	 .loc 1 619 0
 1182 0046 0268     	 ldr r2,[r0]
 1183 0048 9361     	 str r3,[r2,#24]
 621:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 1184              	 .loc 1 621 0
 1185 004a 8268     	 ldr r2,[r0,#8]
 1186              	.LVL140:
 622:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1187              	 .loc 1 622 0
 1188 004c 02F06043 	 and r3,r2,#-536870912
 1189              	.LVL141:
 623:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = reg;
 1190              	 .loc 1 623 0
 1191 0050 43EA8243 	 orr r3,r3,r2,lsl#18
 1192              	.LVL142:
 624:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     }
 1193              	 .loc 1 624 0
 1194 0054 0268     	 ldr r2,[r0]
 1195 0056 D360     	 str r3,[r2,#12]
 1196 0058 05E0     	 b .L82
 1197              	.LVL143:
 1198              	.L81:
 628:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 1199              	 .loc 1 628 0
 1200 005a 0368     	 ldr r3,[r0]
 1201 005c 4268     	 ldr r2,[r0,#4]
 1202 005e 9A61     	 str r2,[r3,#24]
 629:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     }
 1203              	 .loc 1 629 0
 1204 0060 0368     	 ldr r3,[r0]
 1205 0062 8268     	 ldr r2,[r0,#8]
 1206 0064 DA60     	 str r2,[r3,#12]
 1207              	.L82:
 632:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     {
 1208              	 .loc 1 632 0
 1209 0066 037E     	 ldrb r3,[r0,#24]
 1210 0068 012B     	 cmp r3,#1
 1211 006a 0AD1     	 bne .L83
 1212 006c 0446     	 mov r4,r0
 635:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 1213              	 .loc 1 635 0
 1214 006e FFF7FEFF 	 bl XMC_CAN_MO_UpdateData
 1215              	.LVL144:
 636:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 1216              	 .loc 1 636 0
 1217 0072 2368     	 ldr r3,[r4]
 1218 0074 4FF00062 	 mov r2,#134217728
 1219 0078 DA61     	 str r2,[r3,#28]
 639:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                    CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
 1220              	 .loc 1 639 0
 1221 007a 2368     	 ldr r3,[r4]
 1222 007c 054A     	 ldr r2,.L85
 1223 007e DA61     	 str r2,[r3,#28]
 1224 0080 38BD     	 pop {r3,r4,r5,pc}
 1225              	.LVL145:
 1226              	.L83:
 645:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 1227              	 .loc 1 645 0
 1228 0082 0368     	 ldr r3,[r0]
 1229 0084 4FF40062 	 mov r2,#2048
 1230 0088 DA61     	 str r2,[r3,#28]
 648:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                    CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
 1231              	 .loc 1 648 0
 1232 008a 0368     	 ldr r3,[r0]
 1233 008c 024A     	 ldr r2,.L85+4
 1234 008e DA61     	 str r2,[r3,#28]
 1235              	.L79:
 1236 0090 38BD     	 pop {r3,r4,r5,pc}
 1237              	.L86:
 1238 0092 00BF     	 .align 2
 1239              	.L85:
 1240 0094 C0002006 	 .word 102760640
 1241 0098 4006A000 	 .word 10487360
 1242              	 .cfi_endproc
 1243              	.LFE250:
 1245              	 .section .text.XMC_CAN_MO_Transmit,"ax",%progbits
 1246              	 .align 2
 1247              	 .global XMC_CAN_MO_Transmit
 1248              	 .thumb
 1249              	 .thumb_func
 1251              	XMC_CAN_MO_Transmit:
 1252              	.LFB252:
 679:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 680:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /* This function is will put a transmit request to transmit message object */
 681:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
 682:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 1253              	 .loc 1 682 0
 1254              	 .cfi_startproc
 1255              	 
 1256              	 
 1257              	 
 1258              	.LVL146:
 683:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 684:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO
 1259              	 .loc 1 684 0
 1260 0000 0368     	 ldr r3,[r0]
 1261 0002 DA69     	 ldr r2,[r3,#28]
 1262              	.LVL147:
 685:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_
 1263              	 .loc 1 685 0
 1264 0004 D969     	 ldr r1,[r3,#28]
 1265              	.LVL148:
 686:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /* check if message is disabled */
 687:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   if (mo_type == 0U)
 1266              	 .loc 1 687 0
 1267 0006 12F0200F 	 tst r2,#32
 1268 000a 07D0     	 beq .L89
 688:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 689:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     error = XMC_CAN_STATUS_MO_DISABLED;
 690:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 691:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /* check if transmission is ongoing on message object */
 692:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   else if (mo_transmission_ongoing == 1U)
 1269              	 .loc 1 692 0
 1270 000c 11F4807F 	 tst r1,#256
 1271 0010 06D1     	 bne .L90
 693:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 694:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 695:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 696:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   else
 697:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 698:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     /* set TXRQ bit */
 699:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCT
 1272              	 .loc 1 699 0
 1273 0012 4FF0E062 	 mov r2,#117440512
 1274              	.LVL149:
 1275 0016 DA61     	 str r2,[r3,#28]
 1276              	.LVL150:
 700:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 1277              	 .loc 1 700 0
 1278 0018 0020     	 movs r0,#0
 1279              	.LVL151:
 1280 001a 7047     	 bx lr
 1281              	.LVL152:
 1282              	.L89:
 689:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 1283              	 .loc 1 689 0
 1284 001c 0420     	 movs r0,#4
 1285              	.LVL153:
 1286 001e 7047     	 bx lr
 1287              	.LVL154:
 1288              	.L90:
 694:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 1289              	 .loc 1 694 0
 1290 0020 0220     	 movs r0,#2
 1291              	.LVL155:
 701:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 702:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   return error;
 703:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 1292              	 .loc 1 703 0
 1293 0022 7047     	 bx lr
 1294              	 .cfi_endproc
 1295              	.LFE252:
 1297              	 .section .text.XMC_CAN_MO_ReceiveData,"ax",%progbits
 1298              	 .align 2
 1299              	 .global XMC_CAN_MO_ReceiveData
 1300              	 .thumb
 1301              	 .thumb_func
 1303              	XMC_CAN_MO_ReceiveData:
 1304              	.LFB253:
 704:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 705:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /* This function is will read the message object data bytes */
 706:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_ReceiveData (XMC_CAN_MO_t *can_mo)
 707:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 1305              	 .loc 1 707 0
 1306              	 .cfi_startproc
 1307              	 
 1308              	 
 1309              	 
 1310              	.LVL156:
 708:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 709:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint8_t rx_pnd = 0U;
 710:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint8_t new_data = 0U;
 711:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOS
 1311              	 .loc 1 711 0
 1312 0000 0368     	 ldr r3,[r0]
 1313 0002 DA69     	 ldr r2,[r3,#28]
 1314              	.LVL157:
 712:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk
 1315              	 .loc 1 712 0
 1316 0004 D969     	 ldr r1,[r3,#28]
 1317              	.LVL158:
 713:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /* check if message object is a receive message object */
 714:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 1318              	 .loc 1 714 0
 1319 0006 12F4006F 	 tst r2,#2048
 1320 000a 11D1     	 bne .L94
 715:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 716:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 717:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 718:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /* check if reception is ongoing on message object */
 719:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   else if (mo_recepcion_ongoing == 1U)
 1321              	 .loc 1 719 0
 1322 000c 11F0040F 	 tst r1,#4
 1323 0010 10D1     	 bne .L95
 1324              	.LVL159:
 1325              	.L97:
 720:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 721:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 722:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 723:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   else
 724:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 725:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     /* read message parameters */
 726:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     do
 727:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     {
 728:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 1326              	 .loc 1 728 0 discriminator 2
 1327 0012 1A69     	 ldr r2,[r3,#16]
 1328 0014 0261     	 str r2,[r0,#16]
 729:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 1329              	 .loc 1 729 0 discriminator 2
 1330 0016 5A69     	 ldr r2,[r3,#20]
 1331 0018 4261     	 str r2,[r0,#20]
 730:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 731:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_
 1332              	 .loc 1 731 0 discriminator 2
 1333 001a D969     	 ldr r1,[r3,#28]
 1334              	.LVL160:
 732:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 1335              	 .loc 1 732 0 discriminator 2
 1336 001c DA69     	 ldr r2,[r3,#28]
 1337 001e C2F3C002 	 ubfx r2,r2,#3,#1
 1338              	.LVL161:
 733:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     } while ((rx_pnd != 0U) && (new_data != 0U));
 1339              	 .loc 1 733 0 discriminator 2
 1340 0022 11F0040F 	 tst r1,#4
 1341 0026 07D0     	 beq .L96
 1342              	 .loc 1 733 0 is_stmt 0 discriminator 1
 1343 0028 002A     	 cmp r2,#0
 1344 002a F2D1     	 bne .L97
 734:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 735:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 1345              	 .loc 1 735 0 is_stmt 1
 1346 002c 0020     	 movs r0,#0
 1347              	.LVL162:
 1348 002e 7047     	 bx lr
 1349              	.LVL163:
 1350              	.L94:
 716:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 1351              	 .loc 1 716 0
 1352 0030 0320     	 movs r0,#3
 1353              	.LVL164:
 1354 0032 7047     	 bx lr
 1355              	.LVL165:
 1356              	.L95:
 721:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 1357              	 .loc 1 721 0
 1358 0034 0220     	 movs r0,#2
 1359              	.LVL166:
 1360 0036 7047     	 bx lr
 1361              	.LVL167:
 1362              	.L96:
 1363              	 .loc 1 735 0
 1364 0038 0020     	 movs r0,#0
 1365              	.LVL168:
 736:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 737:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   return error;
 738:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 1366              	 .loc 1 738 0
 1367 003a 7047     	 bx lr
 1368              	 .cfi_endproc
 1369              	.LFE253:
 1371              	 .section .text.XMC_CAN_MO_Receive,"ax",%progbits
 1372              	 .align 2
 1373              	 .global XMC_CAN_MO_Receive
 1374              	 .thumb
 1375              	 .thumb_func
 1377              	XMC_CAN_MO_Receive:
 1378              	.LFB254:
 739:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 740:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 741:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /* This function is will read the message object data bytes */
 742:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
 743:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 1379              	 .loc 1 743 0
 1380              	 .cfi_startproc
 1381              	 
 1382              	 
 1383              	 
 1384              	.LVL169:
 744:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 745:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint8_t rx_pnd = 0U;
 746:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint8_t new_data = 0U;
 747:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOS
 1385              	 .loc 1 747 0
 1386 0000 0368     	 ldr r3,[r0]
 1387 0002 DA69     	 ldr r2,[r3,#28]
 1388              	.LVL170:
 748:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk
 1389              	 .loc 1 748 0
 1390 0004 DB69     	 ldr r3,[r3,#28]
 1391              	.LVL171:
 749:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /* check if message object is a receive message object */
 750:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 1392              	 .loc 1 750 0
 1393 0006 12F4006F 	 tst r2,#2048
 1394 000a 59D1     	 bne .L106
 751:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 752:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 753:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 754:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /* check if reception is ongoing on message object */
 755:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   else if (mo_recepcion_ongoing == 1U)
 1395              	 .loc 1 755 0
 1396 000c 13F0040F 	 tst r3,#4
 1397 0010 58D1     	 bne .L107
 743:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 1398              	 .loc 1 743 0
 1399 0012 10B4     	 push {r4}
 1400              	.LCFI13:
 1401              	 .cfi_def_cfa_offset 4
 1402              	 .cfi_offset 4,-4
 756:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 757:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 758:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 759:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   else
 760:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 761:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     /* read message parameters */
 762:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     do
 763:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     {
 764:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 1403              	 .loc 1 764 0
 1404 0014 0821     	 movs r1,#8
 1405              	.LVL172:
 1406              	.L108:
 1407 0016 0368     	 ldr r3,[r0]
 1408 0018 D961     	 str r1,[r3,#28]
 765:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 1409              	 .loc 1 765 0
 1410 001a 0368     	 ldr r3,[r0]
 1411 001c 9A69     	 ldr r2,[r3,#24]
 1412 001e 12F0005F 	 tst r2,#536870912
 1413 0022 22D1     	 bne .L101
 766:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       {
 767:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****         can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 1414              	 .loc 1 767 0
 1415 0024 C279     	 ldrb r2,[r0,#7]
 1416 0026 6FF34512 	 bfc r2,#5,#1
 1417 002a C271     	 strb r2,[r0,#7]
 768:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****         can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_
 1418              	 .loc 1 768 0
 1419 002c 9A69     	 ldr r2,[r3,#24]
 1420 002e C2F38A42 	 ubfx r2,r2,#18,#11
 1421 0032 4468     	 ldr r4,[r0,#4]
 1422 0034 62F31C04 	 bfi r4,r2,#0,#29
 1423 0038 4460     	 str r4,[r0,#4]
 769:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****         can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN
 1424              	 .loc 1 769 0
 1425 003a DC68     	 ldr r4,[r3,#12]
 1426 003c C4F34074 	 ubfx r4,r4,#29,#1
 1427 0040 C27A     	 ldrb r2,[r0,#11]
 1428 0042 64F34512 	 bfi r2,r4,#5,#1
 1429 0046 C272     	 strb r2,[r0,#11]
 770:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****         if(can_mo->can_ide_mask == 1U)
 1430              	 .loc 1 770 0
 1431 0048 12F0200F 	 tst r2,#32
 1432 004c 07D0     	 beq .L102
 771:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****         {
 772:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****           can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >
 1433              	 .loc 1 772 0
 1434 004e DB68     	 ldr r3,[r3,#12]
 1435 0050 C3F38A43 	 ubfx r3,r3,#18,#11
 1436 0054 8268     	 ldr r2,[r0,#8]
 1437 0056 63F31C02 	 bfi r2,r3,#0,#29
 1438 005a 8260     	 str r2,[r0,#8]
 1439 005c 1AE0     	 b .L103
 1440              	.L102:
 773:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****         }
 774:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****         else
 775:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****         {
 776:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****           can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 1441              	 .loc 1 776 0
 1442 005e DA68     	 ldr r2,[r3,#12]
 1443 0060 8368     	 ldr r3,[r0,#8]
 1444 0062 62F31C03 	 bfi r3,r2,#0,#29
 1445 0066 8360     	 str r3,[r0,#8]
 1446 0068 14E0     	 b .L103
 1447              	.L101:
 777:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****         }
 778:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       }
 779:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       else
 780:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       {
 781:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****         can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 1448              	 .loc 1 781 0
 1449 006a C279     	 ldrb r2,[r0,#7]
 1450 006c 42F02002 	 orr r2,r2,#32
 1451 0070 C271     	 strb r2,[r0,#7]
 782:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****         can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 1452              	 .loc 1 782 0
 1453 0072 9C69     	 ldr r4,[r3,#24]
 1454 0074 4268     	 ldr r2,[r0,#4]
 1455 0076 64F31C02 	 bfi r2,r4,#0,#29
 1456 007a 4260     	 str r2,[r0,#4]
 783:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****         can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 1457              	 .loc 1 783 0
 1458 007c DC68     	 ldr r4,[r3,#12]
 1459 007e 8268     	 ldr r2,[r0,#8]
 1460 0080 64F31C02 	 bfi r2,r4,#0,#29
 1461 0084 8260     	 str r2,[r0,#8]
 784:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****         can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN
 1462              	 .loc 1 784 0
 1463 0086 DB68     	 ldr r3,[r3,#12]
 1464 0088 C3F34073 	 ubfx r3,r3,#29,#1
 1465 008c C27A     	 ldrb r2,[r0,#11]
 1466 008e 63F34512 	 bfi r2,r3,#5,#1
 1467 0092 C272     	 strb r2,[r0,#11]
 1468              	.L103:
 785:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       }
 786:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC
 1469              	 .loc 1 786 0
 1470 0094 0368     	 ldr r3,[r0]
 1471 0096 1A68     	 ldr r2,[r3]
 1472 0098 C2F30362 	 ubfx r2,r2,#24,#4
 1473 009c 0273     	 strb r2,[r0,#12]
 787:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 788:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 1474              	 .loc 1 788 0
 1475 009e 1A69     	 ldr r2,[r3,#16]
 1476 00a0 0261     	 str r2,[r0,#16]
 789:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 1477              	 .loc 1 789 0
 1478 00a2 5A69     	 ldr r2,[r3,#20]
 1479 00a4 4261     	 str r2,[r0,#20]
 790:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 791:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_
 1480              	 .loc 1 791 0
 1481 00a6 DA69     	 ldr r2,[r3,#28]
 1482              	.LVL173:
 792:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 1483              	 .loc 1 792 0
 1484 00a8 DB69     	 ldr r3,[r3,#28]
 1485 00aa C3F3C003 	 ubfx r3,r3,#3,#1
 1486              	.LVL174:
 793:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     } while ((rx_pnd != 0U) && (new_data != 0U));
 1487              	 .loc 1 793 0
 1488 00ae 12F0040F 	 tst r2,#4
 1489 00b2 01D0     	 beq .L104
 1490              	 .loc 1 793 0 is_stmt 0 discriminator 1
 1491 00b4 002B     	 cmp r3,#0
 1492 00b6 AED1     	 bne .L108
 1493              	.L104:
 794:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 795:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 1494              	 .loc 1 795 0 is_stmt 1
 1495 00b8 0023     	 movs r3,#0
 1496              	.LVL175:
 1497 00ba 0376     	 strb r3,[r0,#24]
 1498              	.LVL176:
 796:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 1499              	 .loc 1 796 0
 1500 00bc 1846     	 mov r0,r3
 1501              	.LVL177:
 1502 00be 03E0     	 b .L100
 1503              	.LVL178:
 1504              	.L106:
 1505              	.LCFI14:
 1506              	 .cfi_def_cfa_offset 0
 1507              	 .cfi_restore 4
 752:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 1508              	 .loc 1 752 0
 1509 00c0 0320     	 movs r0,#3
 1510              	.LVL179:
 1511 00c2 7047     	 bx lr
 1512              	.LVL180:
 1513              	.L107:
 757:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 1514              	 .loc 1 757 0
 1515 00c4 0220     	 movs r0,#2
 1516              	.LVL181:
 1517 00c6 7047     	 bx lr
 1518              	.LVL182:
 1519              	.L100:
 1520              	.LCFI15:
 1521              	 .cfi_def_cfa_offset 4
 1522              	 .cfi_offset 4,-4
 797:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 798:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   return error;
 799:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 1523              	 .loc 1 799 0
 1524 00c8 5DF8044B 	 ldr r4,[sp],#4
 1525              	.LCFI16:
 1526              	 .cfi_restore 4
 1527              	 .cfi_def_cfa_offset 0
 1528 00cc 7047     	 bx lr
 1529              	 .cfi_endproc
 1530              	.LFE254:
 1532 00ce 00BF     	 .section .text.XMC_CAN_NODE_EnableEvent,"ax",%progbits
 1533              	 .align 2
 1534              	 .global XMC_CAN_NODE_EnableEvent
 1535              	 .thumb
 1536              	 .thumb_func
 1538              	XMC_CAN_NODE_EnableEvent:
 1539              	.LFB255:
 800:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 801:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /* Function to enable node event */
 802:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
 803:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 1540              	 .loc 1 803 0
 1541              	 .cfi_startproc
 1542              	 
 1543              	 
 1544              	 
 1545              	.LVL183:
 804:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   if(event != XMC_CAN_NODE_EVENT_CFCIE)
 1546              	 .loc 1 804 0
 1547 0000 B1F5800F 	 cmp r1,#4194304
 1548 0004 03D0     	 beq .L113
 805:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 806:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     can_node->NCR |= (uint32_t)event;
 1549              	 .loc 1 806 0
 1550 0006 0368     	 ldr r3,[r0]
 1551 0008 1943     	 orrs r1,r1,r3
 1552              	.LVL184:
 1553 000a 0160     	 str r1,[r0]
 1554 000c 7047     	 bx lr
 1555              	.LVL185:
 1556              	.L113:
 807:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 808:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   else
 809:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 810:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     can_node->NFCR |= (uint32_t)event;
 1557              	 .loc 1 810 0
 1558 000e 8369     	 ldr r3,[r0,#24]
 1559 0010 43F48003 	 orr r3,r3,#4194304
 1560 0014 8361     	 str r3,[r0,#24]
 1561 0016 7047     	 bx lr
 1562              	 .cfi_endproc
 1563              	.LFE255:
 1565              	 .section .text.XMC_CAN_NODE_DisableEvent,"ax",%progbits
 1566              	 .align 2
 1567              	 .global XMC_CAN_NODE_DisableEvent
 1568              	 .thumb
 1569              	 .thumb_func
 1571              	XMC_CAN_NODE_DisableEvent:
 1572              	.LFB256:
 811:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 812:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 813:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 814:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /* Function to disable node event */
 815:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
 816:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 1573              	 .loc 1 816 0
 1574              	 .cfi_startproc
 1575              	 
 1576              	 
 1577              	 
 1578              	.LVL186:
 817:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   if(event != XMC_CAN_NODE_EVENT_CFCIE)
 1579              	 .loc 1 817 0
 1580 0000 B1F5800F 	 cmp r1,#4194304
 1581 0004 04D0     	 beq .L116
 818:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 819:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     can_node->NCR &= ~(uint32_t)event;
 1582              	 .loc 1 819 0
 1583 0006 0368     	 ldr r3,[r0]
 1584 0008 23EA0101 	 bic r1,r3,r1
 1585              	.LVL187:
 1586 000c 0160     	 str r1,[r0]
 1587 000e 7047     	 bx lr
 1588              	.LVL188:
 1589              	.L116:
 820:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 821:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   else
 822:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 823:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     can_node->NFCR &= ~(uint32_t)event;
 1590              	 .loc 1 823 0
 1591 0010 8369     	 ldr r3,[r0,#24]
 1592 0012 23F48003 	 bic r3,r3,#4194304
 1593 0016 8361     	 str r3,[r0,#24]
 1594 0018 7047     	 bx lr
 1595              	 .cfi_endproc
 1596              	.LFE256:
 1598 001a 00BF     	 .section .text.XMC_CAN_TXFIFO_Transmit,"ax",%progbits
 1599              	 .align 2
 1600              	 .global XMC_CAN_TXFIFO_Transmit
 1601              	 .thumb
 1602              	 .thumb_func
 1604              	XMC_CAN_TXFIFO_Transmit:
 1605              	.LFB257:
 824:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 825:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 826:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /* Function to transmit MO from the FIFO */
 827:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_TXFIFO_Transmit(const XMC_CAN_MO_t *const can_mo)
 828:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 1606              	 .loc 1 828 0
 1607              	 .cfi_startproc
 1608              	 
 1609              	 
 1610              	 
 1611              	.LVL189:
 829:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 830:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t mo_type = ((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO
 1612              	 .loc 1 830 0
 1613 0000 0368     	 ldr r3,[r0]
 1614 0002 DA69     	 ldr r2,[r3,#28]
 1615              	.LVL190:
 831:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t mo_transmission_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_M
 1616              	 .loc 1 831 0
 1617 0004 D969     	 ldr r1,[r3,#28]
 1618              	.LVL191:
 832:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   uint32_t mo_cur =  (uint32_t)(can_mo->can_mo_ptr-> MOFGPR & CAN_MO_MOFGPR_CUR_Msk) >> CAN_MO_MOFG
 1619              	 .loc 1 832 0
 1620 0006 5B68     	 ldr r3,[r3,#4]
 1621              	.LVL192:
 833:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   CAN_MO_TypeDef*  mo = (CAN_MO_TypeDef *)(CAN_BASE + 0x1000UL + (mo_cur * 0x0020UL));
 834:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /* check if message is disabled */
 835:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   if (mo_type == 0U)
 1622              	 .loc 1 835 0
 1623 0008 12F0200F 	 tst r2,#32
 1624 000c 0ED0     	 beq .L120
 836:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 837:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     error = XMC_CAN_STATUS_MO_DISABLED;
 838:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 839:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   /* check if transmission is ongoing on message object */
 840:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   else if (mo_transmission_ongoing == 1U)
 1625              	 .loc 1 840 0
 1626 000e 11F4807F 	 tst r1,#256
 1627 0012 0DD1     	 bne .L121
 832:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   CAN_MO_TypeDef*  mo = (CAN_MO_TypeDef *)(CAN_BASE + 0x1000UL + (mo_cur * 0x0020UL));
 1628              	 .loc 1 832 0
 1629 0014 C3F30743 	 ubfx r3,r3,#16,#8
 1630              	.LVL193:
 833:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   CAN_MO_TypeDef*  mo = (CAN_MO_TypeDef *)(CAN_BASE + 0x1000UL + (mo_cur * 0x0020UL));
 1631              	 .loc 1 833 0
 1632 0018 03F11073 	 add r3,r3,#37748736
 1633 001c 03F52863 	 add r3,r3,#2688
 1634 0020 5B01     	 lsls r3,r3,#5
 841:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 842:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 843:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 844:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   else
 845:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   {
 846:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     mo->MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 1635              	 .loc 1 846 0
 1636 0022 4FF0E062 	 mov r2,#117440512
 1637              	.LVL194:
 1638 0026 DA61     	 str r2,[r3,#28]
 1639              	.LVL195:
 847:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 1640              	 .loc 1 847 0
 1641 0028 0020     	 movs r0,#0
 1642              	.LVL196:
 1643 002a 7047     	 bx lr
 1644              	.LVL197:
 1645              	.L120:
 837:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 1646              	 .loc 1 837 0
 1647 002c 0420     	 movs r0,#4
 1648              	.LVL198:
 1649 002e 7047     	 bx lr
 1650              	.LVL199:
 1651              	.L121:
 842:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 1652              	 .loc 1 842 0
 1653 0030 0220     	 movs r0,#2
 1654              	.LVL200:
 848:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   }
 849:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   return error;
 850:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 1655              	 .loc 1 850 0
 1656 0032 7047     	 bx lr
 1657              	 .cfi_endproc
 1658              	.LFE257:
 1660              	 .section .text.XMC_CAN_TXFIFO_ConfigMOBaseObject,"ax",%progbits
 1661              	 .align 2
 1662              	 .global XMC_CAN_TXFIFO_ConfigMOBaseObject
 1663              	 .thumb
 1664              	 .thumb_func
 1666              	XMC_CAN_TXFIFO_ConfigMOBaseObject:
 1667              	.LFB258:
 851:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 852:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /* Function to initialize the transmit FIFO MO base object */
 853:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** void XMC_CAN_TXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t
 854:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 1668              	 .loc 1 854 0
 1669              	 .cfi_startproc
 1670              	 
 1671              	 
 1672              	 
 1673              	.LVL201:
 1674 0000 82B0     	 sub sp,sp,#8
 1675              	.LCFI17:
 1676              	 .cfi_def_cfa_offset 8
 1677 0002 0191     	 str r1,[sp,#4]
 855:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 1678              	 .loc 1 855 0
 1679 0004 0268     	 ldr r2,[r0]
 1680 0006 1368     	 ldr r3,[r2]
 1681 0008 23F00F03 	 bic r3,r3,#15
 1682 000c 43F00203 	 orr r3,r3,#2
 1683 0010 1360     	 str r3,[r2]
 856:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                               (((uint32_t)0x2U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 857:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_BOT_Msk |
 1684              	 .loc 1 857 0
 1685 0012 0268     	 ldr r2,[r0]
 1686 0014 5368     	 ldr r3,[r2,#4]
 858:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 859:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                                                   CAN_MO_MOFGPR_CUR_Msk)) |
 860:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 1687              	 .loc 1 860 0
 1688 0016 9DF80410 	 ldrb r1,[sp,#4]
 857:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 1689              	 .loc 1 857 0
 1690 001a 03F07F43 	 and r3,r3,#-16777216
 859:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 1691              	 .loc 1 859 0
 1692 001e 0B43     	 orrs r3,r3,r1
 861:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 1693              	 .loc 1 861 0
 1694 0020 9DF80610 	 ldrb r1,[sp,#6]
 860:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 1695              	 .loc 1 860 0
 1696 0024 43EA0143 	 orr r3,r3,r1,lsl#16
 862:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)
 1697              	 .loc 1 862 0
 1698 0028 9DF80510 	 ldrb r1,[sp,#5]
 861:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 1699              	 .loc 1 861 0
 1700 002c 43EA0123 	 orr r3,r3,r1,lsl#8
 857:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 1701              	 .loc 1 857 0
 1702 0030 5360     	 str r3,[r2,#4]
 863:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 1703              	 .loc 1 863 0
 1704 0032 02B0     	 add sp,sp,#8
 1705              	.LCFI18:
 1706              	 .cfi_def_cfa_offset 0
 1707              	 
 1708 0034 7047     	 bx lr
 1709              	 .cfi_endproc
 1710              	.LFE258:
 1712 0036 00BF     	 .section .text.XMC_CAN_RXFIFO_ConfigMOBaseObject,"ax",%progbits
 1713              	 .align 2
 1714              	 .global XMC_CAN_RXFIFO_ConfigMOBaseObject
 1715              	 .thumb
 1716              	 .thumb_func
 1718              	XMC_CAN_RXFIFO_ConfigMOBaseObject:
 1719              	.LFB259:
 864:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /* Function to Initialize the receive FIFO MO base object */
 865:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** void XMC_CAN_RXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t
 866:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 1720              	 .loc 1 866 0
 1721              	 .cfi_startproc
 1722              	 
 1723              	 
 1724              	 
 1725              	.LVL202:
 1726 0000 82B0     	 sub sp,sp,#8
 1727              	.LCFI19:
 1728              	 .cfi_def_cfa_offset 8
 1729 0002 0191     	 str r1,[sp,#4]
 867:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 1730              	 .loc 1 867 0
 1731 0004 0268     	 ldr r2,[r0]
 1732 0006 1368     	 ldr r3,[r2]
 1733 0008 23F00F03 	 bic r3,r3,#15
 1734 000c 43F00103 	 orr r3,r3,#1
 1735 0010 1360     	 str r3,[r2]
 868:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                               (((uint32_t)0x1U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 869:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~( uint32_t)(CAN_MO_MOFGPR_BOT_Msk 
 1736              	 .loc 1 869 0
 1737 0012 0268     	 ldr r2,[r0]
 1738 0014 5368     	 ldr r3,[r2,#4]
 870:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 871:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                                                   CAN_MO_MOFGPR_CUR_Msk)) |
 872:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 1739              	 .loc 1 872 0
 1740 0016 9DF80410 	 ldrb r1,[sp,#4]
 869:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 1741              	 .loc 1 869 0
 1742 001a 03F07F43 	 and r3,r3,#-16777216
 871:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 1743              	 .loc 1 871 0
 1744 001e 0B43     	 orrs r3,r3,r1
 873:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 1745              	 .loc 1 873 0
 1746 0020 9DF80610 	 ldrb r1,[sp,#6]
 872:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 1747              	 .loc 1 872 0
 1748 0024 43EA0143 	 orr r3,r3,r1,lsl#16
 874:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)
 1749              	 .loc 1 874 0
 1750 0028 9DF80510 	 ldrb r1,[sp,#5]
 873:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 1751              	 .loc 1 873 0
 1752 002c 43EA0123 	 orr r3,r3,r1,lsl#8
 869:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 1753              	 .loc 1 869 0
 1754 0030 5360     	 str r3,[r2,#4]
 875:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 1755              	 .loc 1 875 0
 1756 0032 02B0     	 add sp,sp,#8
 1757              	.LCFI20:
 1758              	 .cfi_def_cfa_offset 0
 1759              	 
 1760 0034 7047     	 bx lr
 1761              	 .cfi_endproc
 1762              	.LFE259:
 1764 0036 00BF     	 .section .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject,"ax",%progbits
 1765              	 .align 2
 1766              	 .global XMC_CAN_TXFIFO_ConfigMOSlaveObject
 1767              	 .thumb
 1768              	 .thumb_func
 1770              	XMC_CAN_TXFIFO_ConfigMOSlaveObject:
 1771              	.LFB260:
 876:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 877:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /* Function to Initialize the FIFO MO slave object */
 878:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** void XMC_CAN_TXFIFO_ConfigMOSlaveObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_
 879:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 1772              	 .loc 1 879 0
 1773              	 .cfi_startproc
 1774              	 
 1775              	 
 1776              	 
 1777              	.LVL203:
 1778 0000 82B0     	 sub sp,sp,#8
 1779              	.LCFI21:
 1780              	 .cfi_def_cfa_offset 8
 1781 0002 0191     	 str r1,[sp,#4]
 880:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 1782              	 .loc 1 880 0
 1783 0004 0268     	 ldr r2,[r0]
 1784 0006 1368     	 ldr r3,[r2]
 1785 0008 23F00F03 	 bic r3,r3,#15
 1786 000c 43F00303 	 orr r3,r3,#3
 1787 0010 1360     	 str r3,[r2]
 881:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                               (((uint32_t)0x3U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 882:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_CUR_Msk))
 1788              	 .loc 1 882 0
 1789 0012 0268     	 ldr r2,[r0]
 1790 0014 5368     	 ldr r3,[r2,#4]
 883:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 1791              	 .loc 1 883 0
 1792 0016 9DF80610 	 ldrb r1,[sp,#6]
 882:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 1793              	 .loc 1 882 0
 1794 001a 23F47F03 	 bic r3,r3,#16711680
 1795 001e 43EA0143 	 orr r3,r3,r1,lsl#16
 1796 0022 5360     	 str r3,[r2,#4]
 884:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 885:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   can_mo->can_mo_ptr->MOCTR  = CAN_MO_MOCTR_SETTXEN0_Msk|
 1797              	 .loc 1 885 0
 1798 0024 0368     	 ldr r3,[r0]
 1799 0026 024A     	 ldr r2,.L128
 1800 0028 DA61     	 str r2,[r3,#28]
 886:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                CAN_MO_MOCTR_RESTXEN1_Msk;
 887:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 1801              	 .loc 1 887 0
 1802 002a 02B0     	 add sp,sp,#8
 1803              	.LCFI22:
 1804              	 .cfi_def_cfa_offset 0
 1805              	 
 1806 002c 7047     	 bx lr
 1807              	.L129:
 1808 002e 00BF     	 .align 2
 1809              	.L128:
 1810 0030 00040002 	 .word 33555456
 1811              	 .cfi_endproc
 1812              	.LFE260:
 1814              	 .section .text.XMC_CAN_GATEWAY_InitSourceObject,"ax",%progbits
 1815              	 .align 2
 1816              	 .global XMC_CAN_GATEWAY_InitSourceObject
 1817              	 .thumb
 1818              	 .thumb_func
 1820              	XMC_CAN_GATEWAY_InitSourceObject:
 1821              	.LFB261:
 888:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** 
 889:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** /* Function to Initialize the Gateway Source Object */
 890:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** void XMC_CAN_GATEWAY_InitSourceObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_GATEWAY_CONFIG
 891:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** {
 1822              	 .loc 1 891 0
 1823              	 .cfi_startproc
 1824              	 
 1825              	 
 1826              	 
 1827              	.LVL204:
 1828 0000 82B0     	 sub sp,sp,#8
 1829              	.LCFI23:
 1830              	 .cfi_def_cfa_offset 8
 1831 0002 02AB     	 add r3,sp,#8
 1832 0004 03E90600 	 stmdb r3,{r1,r2}
 892:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = (((uint32_t)0x4U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 1833              	 .loc 1 892 0
 1834 0008 0168     	 ldr r1,[r0]
 893:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 1835              	 .loc 1 893 0
 1836 000a 9DF80330 	 ldrb r3,[sp,#3]
 1837 000e 1B02     	 lsls r3,r3,#8
 1838 0010 03F48072 	 and r2,r3,#256
 894:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOF
 1839              	 .loc 1 894 0
 1840 0014 9DF80530 	 ldrb r3,[sp,#5]
 1841 0018 9B02     	 lsls r3,r3,#10
 1842 001a 03F48063 	 and r3,r3,#1024
 893:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 1843              	 .loc 1 893 0
 1844 001e 1343     	 orrs r3,r3,r2
 1845 0020 43F00403 	 orr r3,r3,#4
 895:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC
 1846              	 .loc 1 895 0
 1847 0024 9DF80420 	 ldrb r2,[sp,#4]
 1848 0028 5202     	 lsls r2,r2,#9
 1849 002a 02F40072 	 and r2,r2,#512
 1850 002e 1343     	 orrs r3,r3,r2
 896:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_copy) << CAN_MO_MOFCR_DATC_Pos)
 1851              	 .loc 1 896 0
 1852 0030 9DF80620 	 ldrb r2,[sp,#6]
 1853 0034 D202     	 lsls r2,r2,#11
 1854 0036 02F40062 	 and r2,r2,#2048
 895:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC
 1855              	 .loc 1 895 0
 1856 003a 1343     	 orrs r3,r3,r2
 892:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 1857              	 .loc 1 892 0
 1858 003c 0B60     	 str r3,[r1]
 897:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 1859              	 .loc 1 897 0
 1860 003e 0168     	 ldr r1,[r0]
 898:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                (((uint32_t)can_gateway.gateway_base << CAN_MO_MOFGPR_CUR_Pos) & (ui
 1861              	 .loc 1 898 0
 1862 0040 9DF80220 	 ldrb r2,[sp,#2]
 899:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****                                (((uint32_t)can_gateway.gateway_top << CAN_MO_MOFGPR_TOP_Pos) & (uin
 1863              	 .loc 1 899 0
 1864 0044 9DF80130 	 ldrb r3,[sp,#1]
 1865 0048 1B02     	 lsls r3,r3,#8
 1866 004a 43EA0243 	 orr r3,r3,r2,lsl#16
 897:C:/Files/Projects/Git/XMCLib/src\xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 1867              	 .loc 1 897 0
 1868 004e 9DF80020 	 ldrb r2,[sp]
 1869 0052 1343     	 orrs r3,r3,r2
 1870 0054 4B60     	 str r3,[r1,#4]
 900:C:/Files/Projects/Git/XMCLib/src\xmc_can.c **** }
 1871              	 .loc 1 900 0
 1872 0056 02B0     	 add sp,sp,#8
 1873              	.LCFI24:
 1874              	 .cfi_def_cfa_offset 0
 1875              	 
 1876 0058 7047     	 bx lr
 1877              	 .cfi_endproc
 1878              	.LFE261:
 1880 005a 00BF     	 .text
 1881              	.Letext0:
 1882              	 .file 3 "c:\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1883              	 .file 4 "c:\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1884              	 .file 5 "C:/Files/Projects/Git/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 1885              	 .file 6 "C:/Files/Projects/Git/XMCLib/inc/xmc4_scu.h"
 1886              	 .file 7 "C:/Files/Projects/Git/CMSIS/Include/cmsis_gcc.h"
 1887              	 .file 8 "C:/Files/Projects/Git/CMSIS/Include/core_cm4.h"
 1888              	 .file 9 "C:/Files/Projects/Git/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 1889              	 .file 10 "C:/Files/Projects/Git/XMCLib/inc/xmc_scu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_can.c
    {standard input}:20     .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000000 $t
    {standard input}:25     .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000000 XMC_CAN_NODE_NominalBitTimeConfigureEx
    {standard input}:204    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:000000e8 $d
    {standard input}:209    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000000 $t
    {standard input}:214    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000000 XMC_CAN_NODE_NominalBitTimeConfigure
    {standard input}:442    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000100 $d
    {standard input}:450    .text.XMC_CAN_AllocateMOtoNodeList:00000000 $t
    {standard input}:455    .text.XMC_CAN_AllocateMOtoNodeList:00000000 XMC_CAN_AllocateMOtoNodeList
    {standard input}:499    .text.XMC_CAN_Disable:00000000 $t
    {standard input}:504    .text.XMC_CAN_Disable:00000000 XMC_CAN_Disable
    {standard input}:528    .text.XMC_CAN_Disable:00000010 $d
    {standard input}:533    .text.XMC_CAN_Enable:00000000 $t
    {standard input}:538    .text.XMC_CAN_Enable:00000000 XMC_CAN_Enable
    {standard input}:571    .text.XMC_CAN_Enable:0000001c $d
    {standard input}:576    .text.XMC_CAN_Init:00000000 $t
    {standard input}:581    .text.XMC_CAN_Init:00000000 XMC_CAN_Init
    {standard input}:690    .text.XMC_CAN_SetBaudrateClockSource:00000000 $t
    {standard input}:695    .text.XMC_CAN_SetBaudrateClockSource:00000000 XMC_CAN_SetBaudrateClockSource
    {standard input}:708    .text.XMC_CAN_GetBaudrateClockSource:00000000 $t
    {standard input}:713    .text.XMC_CAN_GetBaudrateClockSource:00000000 XMC_CAN_GetBaudrateClockSource
    {standard input}:729    .text.XMC_CAN_GetBaudrateClockFrequency:00000000 $t
    {standard input}:734    .text.XMC_CAN_GetBaudrateClockFrequency:00000000 XMC_CAN_GetBaudrateClockFrequency
    {standard input}:755    .text.XMC_CAN_InitEx:00000000 $t
    {standard input}:760    .text.XMC_CAN_InitEx:00000000 XMC_CAN_InitEx
    {standard input}:830    .text.XMC_CAN_GetClockFrequency:00000000 $t
    {standard input}:835    .text.XMC_CAN_GetClockFrequency:00000000 XMC_CAN_GetClockFrequency
    {standard input}:870    .text.XMC_CAN_MO_SetIdentifier:00000000 $t
    {standard input}:875    .text.XMC_CAN_MO_SetIdentifier:00000000 XMC_CAN_MO_SetIdentifier
    {standard input}:926    .text.XMC_CAN_MO_GetIdentifier:00000000 $t
    {standard input}:931    .text.XMC_CAN_MO_GetIdentifier:00000000 XMC_CAN_MO_GetIdentifier
    {standard input}:958    .text.XMC_CAN_MO_GetAcceptanceMask:00000000 $t
    {standard input}:963    .text.XMC_CAN_MO_GetAcceptanceMask:00000000 XMC_CAN_MO_GetAcceptanceMask
    {standard input}:999    .text.XMC_CAN_MO_SetAcceptanceMask:00000000 $t
    {standard input}:1004   .text.XMC_CAN_MO_SetAcceptanceMask:00000000 XMC_CAN_MO_SetAcceptanceMask
    {standard input}:1055   .text.XMC_CAN_MO_UpdateData:00000000 $t
    {standard input}:1060   .text.XMC_CAN_MO_UpdateData:00000000 XMC_CAN_MO_UpdateData
    {standard input}:1114   .text.XMC_CAN_MO_UpdateData:0000003c $d
    {standard input}:1119   .text.XMC_CAN_MO_Config:00000000 $t
    {standard input}:1124   .text.XMC_CAN_MO_Config:00000000 XMC_CAN_MO_Config
    {standard input}:1240   .text.XMC_CAN_MO_Config:00000094 $d
    {standard input}:1246   .text.XMC_CAN_MO_Transmit:00000000 $t
    {standard input}:1251   .text.XMC_CAN_MO_Transmit:00000000 XMC_CAN_MO_Transmit
    {standard input}:1298   .text.XMC_CAN_MO_ReceiveData:00000000 $t
    {standard input}:1303   .text.XMC_CAN_MO_ReceiveData:00000000 XMC_CAN_MO_ReceiveData
    {standard input}:1372   .text.XMC_CAN_MO_Receive:00000000 $t
    {standard input}:1377   .text.XMC_CAN_MO_Receive:00000000 XMC_CAN_MO_Receive
    {standard input}:1533   .text.XMC_CAN_NODE_EnableEvent:00000000 $t
    {standard input}:1538   .text.XMC_CAN_NODE_EnableEvent:00000000 XMC_CAN_NODE_EnableEvent
    {standard input}:1566   .text.XMC_CAN_NODE_DisableEvent:00000000 $t
    {standard input}:1571   .text.XMC_CAN_NODE_DisableEvent:00000000 XMC_CAN_NODE_DisableEvent
    {standard input}:1599   .text.XMC_CAN_TXFIFO_Transmit:00000000 $t
    {standard input}:1604   .text.XMC_CAN_TXFIFO_Transmit:00000000 XMC_CAN_TXFIFO_Transmit
    {standard input}:1661   .text.XMC_CAN_TXFIFO_ConfigMOBaseObject:00000000 $t
    {standard input}:1666   .text.XMC_CAN_TXFIFO_ConfigMOBaseObject:00000000 XMC_CAN_TXFIFO_ConfigMOBaseObject
    {standard input}:1713   .text.XMC_CAN_RXFIFO_ConfigMOBaseObject:00000000 $t
    {standard input}:1718   .text.XMC_CAN_RXFIFO_ConfigMOBaseObject:00000000 XMC_CAN_RXFIFO_ConfigMOBaseObject
    {standard input}:1765   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000000 $t
    {standard input}:1770   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000000 XMC_CAN_TXFIFO_ConfigMOSlaveObject
    {standard input}:1810   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000030 $d
    {standard input}:1815   .text.XMC_CAN_GATEWAY_InitSourceObject:00000000 $t
    {standard input}:1820   .text.XMC_CAN_GATEWAY_InitSourceObject:00000000 XMC_CAN_GATEWAY_InitSourceObject
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_CLOCK_GetPeripheralClockFrequency
