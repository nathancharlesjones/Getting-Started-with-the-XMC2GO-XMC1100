   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,1
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_dma.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_DMA_Enable,"ax",%progbits
  20              	 .align 2
  21              	 .global XMC_DMA_Enable
  22              	 .thumb
  23              	 .thumb_func
  25              	XMC_DMA_Enable:
  26              	.LFB190:
  27              	 .file 1 "C:/Files/Projects/Git/XMCLib/src/xmc_dma.c"
   1:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
   2:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /**
   3:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * @file xmc_dma.c
   4:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * @date 2019-05-07
   5:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *
   6:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * @cond
   7:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  **************************************************************************************************
   8:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   9:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *
  10:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  11:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * All rights reserved.                        
  12:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *                                             
  13:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * following conditions are met:   
  15:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *                                                                              
  16:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * disclaimer.                        
  18:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * 
  19:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  21:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * 
  22:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * products derived from this software without specific prior written permission.                  
  24:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *                                                                              
  25:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *                                                                              
  33:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  **************************************************************************************************
  36:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *
  37:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * Change History
  38:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * --------------
  39:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *
  40:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * 2015-02-20:
  41:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *     - Initial <br>
  42:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *
  43:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * 2015-05-20:
  44:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *     - Add the declarations for the following APIs: <br>
  45:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *       XMC_DMA_DisableRequestLine, XMC_DMA_ClearRequestLine, <br>
  46:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *       XMC_DMA_CH_ClearSourcePeripheralRequest, <br>
  47:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *       XMC_DMA_CH_ClearDestinationPeripheralRequest <br>
  48:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *     - Remove PRIOARRAY <br>
  49:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *     - Documentation updates <br>
  50:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *
  51:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * 2015-06-20:
  52:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *     - Removed GetDriverVersion API <br>
  53:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *     - Updated XMC_DMA_CH_Init() to support scatter/gather functionality (only
  54:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *       on advanced DMA channels) <br>
  55:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *     - Updated XMC_DMA_CH_Disable() <br>
  56:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *
  57:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * 2016-03-09:
  58:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *     - Optimize write only registers
  59:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *
  60:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * 2016-04-08:
  61:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *     - Update XMC_DMA_CH_EnableEvent and XMC_DMA_CH_DisableEvent.
  62:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *       Write optimization of MASKCHEV 
  63:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *     - Fix XMC_DMA_IRQHandler, clear channel event status before processing the event handler.
  64:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *       It corrects event losses if the DMA triggered in the event handler finished before returni
  65:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *
  66:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * 2018-02-08:
  67:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *     - Fix XMC_DMA_CH_RequestLastMultiblockTransfer() clearing CTLL_LLP_SRC_EN and CTLL_LLP_DST_E
  68:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *
  69:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * 2019-05-07:
  70:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *     - Fixed compilation warnings
  71:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *
  72:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * @endcond
  73:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  */
  74:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
  75:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /*******************************************************************************
  76:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * HEADER FILES
  77:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *******************************************************************************/
  78:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
  79:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #include "xmc_dma.h"
  80:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
  81:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined (GPDMA0)
  82:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
  83:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #include "xmc_scu.h"
  84:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
  85:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /*******************************************************************************
  86:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * MACROS
  87:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *******************************************************************************/
  88:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
  89:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #define DLR_SRSEL_RS_MSK (0xfUL)
  90:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #define DLR_SRSEL_RS_BITSIZE (4UL)
  91:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #define DMA_EVENT_MAX (5UL)
  92:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #define GPDMA_CH_CFGH_DEST_PER_Pos GPDMA0_CH_CFGH_DEST_PER_Pos
  93:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #define GPDMA_CH_CFGH_SRC_PER_Pos GPDMA0_CH_CFGH_SRC_PER_Pos
  94:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #define GPDMA0_CH_CFGH_PER_Msk (0x7U)
  95:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #define GPDMA1_CH_CFGH_PER_Msk (0x3U)
  96:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #define GPDMA_CH_CFGH_PER_BITSIZE (4U)
  97:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #define GPDMA_CH_CTLL_INT_EN_Msk GPDMA0_CH_CTLL_INT_EN_Msk
  98:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
  99:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /*******************************************************************************
 100:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * LOCAL DATA
 101:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *******************************************************************************/
 102:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 103:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined (GPDMA0)
 104:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** XMC_DMA_CH_EVENT_HANDLER_t dma0_event_handlers[XMC_DMA0_NUM_CHANNELS];
 105:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 106:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 107:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined (GPDMA1)
 108:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** XMC_DMA_CH_EVENT_HANDLER_t dma1_event_handlers[XMC_DMA1_NUM_CHANNELS];
 109:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 110:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  
 111:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /*******************************************************************************
 112:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  * API IMPLEMENTATION
 113:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****  *******************************************************************************/
 114:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 115:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Initialize GPDMA */
 116:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_Init(XMC_DMA_t *const dma)
 117:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 118:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   XMC_DMA_Enable(dma);
 119:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 120:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 121:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Enable GPDMA module */
 122:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_Enable(XMC_DMA_t *const dma)
 123:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
  28              	 .loc 1 123 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 10B5     	 push {r4,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 8
  36              	 .cfi_offset 4,-8
  37              	 .cfi_offset 14,-4
  38 0002 0446     	 mov r4,r0
 124:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 125:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   if (dma == XMC_DMA0)
  39              	 .loc 1 125 0
  40 0004 054B     	 ldr r3,.L5
  41 0006 9842     	 cmp r0,r3
 126:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 127:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 128:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 129:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 130:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 131:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
  42              	 .loc 1 131 0
  43 0008 0CBF     	 ite eq
  44 000a 0548     	 ldreq r0,.L5+4
  45              	.LVL1:
 132:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 133:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 134:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   else
 135:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 136:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 137:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 138:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 139:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
  46              	 .loc 1 139 0
  47 000c 0548     	 ldrne r0,.L5+8
  48 000e FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
  49              	.LVL2:
 140:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 141:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 142:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 143:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   dma->DMACFGREG = 0x1U;
  50              	 .loc 1 143 0
  51 0012 0123     	 movs r3,#1
  52 0014 C4F89833 	 str r3,[r4,#920]
  53 0018 10BD     	 pop {r4,pc}
  54              	.LVL3:
  55              	.L6:
  56 001a 00BF     	 .align 2
  57              	.L5:
  58 001c 00400150 	 .word 1342259200
  59 0020 10000020 	 .word 536870928
  60 0024 20000020 	 .word 536870944
  61              	 .cfi_endproc
  62              	.LFE190:
  64              	 .section .text.XMC_DMA_Init,"ax",%progbits
  65              	 .align 2
  66              	 .global XMC_DMA_Init
  67              	 .thumb
  68              	 .thumb_func
  70              	XMC_DMA_Init:
  71              	.LFB189:
 117:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   XMC_DMA_Enable(dma);
  72              	 .loc 1 117 0
  73              	 .cfi_startproc
  74              	 
  75              	 
  76              	.LVL4:
  77 0000 08B5     	 push {r3,lr}
  78              	.LCFI1:
  79              	 .cfi_def_cfa_offset 8
  80              	 .cfi_offset 3,-8
  81              	 .cfi_offset 14,-4
 118:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
  82              	 .loc 1 118 0
  83 0002 FFF7FEFF 	 bl XMC_DMA_Enable
  84              	.LVL5:
  85 0006 08BD     	 pop {r3,pc}
  86              	 .cfi_endproc
  87              	.LFE189:
  89              	 .section .text.XMC_DMA_Disable,"ax",%progbits
  90              	 .align 2
  91              	 .global XMC_DMA_Disable
  92              	 .thumb
  93              	 .thumb_func
  95              	XMC_DMA_Disable:
  96              	.LFB191:
 144:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 145:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 146:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Disable GPDMA module */
 147:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_Disable(XMC_DMA_t *const dma)
 148:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
  97              	 .loc 1 148 0
  98              	 .cfi_startproc
  99              	 
 100              	 
 101              	.LVL6:
 102 0000 08B5     	 push {r3,lr}
 103              	.LCFI2:
 104              	 .cfi_def_cfa_offset 8
 105              	 .cfi_offset 3,-8
 106              	 .cfi_offset 14,-4
 149:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   dma->DMACFGREG = 0x0U;
 107              	 .loc 1 149 0
 108 0002 0023     	 movs r3,#0
 109 0004 C0F89833 	 str r3,[r0,#920]
 150:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 151:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 152:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   if (dma == XMC_DMA0)
 110              	 .loc 1 152 0
 111 0008 034B     	 ldr r3,.L13
 112 000a 9842     	 cmp r0,r3
 153:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 154:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 155:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 113              	 .loc 1 155 0
 114 000c 0CBF     	 ite eq
 115 000e 0348     	 ldreq r0,.L13+4
 116              	.LVL7:
 156:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 157:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 158:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 159:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 160:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 161:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   else
 162:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 163:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 117              	 .loc 1 163 0
 118 0010 0348     	 ldrne r0,.L13+8
 119 0012 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 120              	.LVL8:
 121 0016 08BD     	 pop {r3,pc}
 122              	.L14:
 123              	 .align 2
 124              	.L13:
 125 0018 00400150 	 .word 1342259200
 126 001c 10000020 	 .word 536870928
 127 0020 20000020 	 .word 536870944
 128              	 .cfi_endproc
 129              	.LFE191:
 131              	 .section .text.XMC_DMA_IsEnabled,"ax",%progbits
 132              	 .align 2
 133              	 .global XMC_DMA_IsEnabled
 134              	 .thumb
 135              	 .thumb_func
 137              	XMC_DMA_IsEnabled:
 138              	.LFB192:
 164:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 165:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 166:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 167:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 168:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 169:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 170:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 171:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Check is the GPDMA peripheral is enabled */
 172:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma)
 173:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 139              	 .loc 1 173 0
 140              	 .cfi_startproc
 141              	 
 142              	 
 143              	.LVL9:
 144 0000 10B5     	 push {r4,lr}
 145              	.LCFI3:
 146              	 .cfi_def_cfa_offset 8
 147              	 .cfi_offset 4,-8
 148              	 .cfi_offset 14,-4
 149 0002 0446     	 mov r4,r0
 174:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   bool status;
 175:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 176:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 177:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   if (dma == XMC_DMA0)
 150              	 .loc 1 177 0
 151 0004 084B     	 ldr r3,.L20
 152 0006 9842     	 cmp r0,r3
 178:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 179:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 180:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 153              	 .loc 1 180 0
 154 0008 0CBF     	 ite eq
 155 000a 0848     	 ldreq r0,.L20+4
 156              	.LVL10:
 181:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 182:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 183:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 184:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 185:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 186:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   else
 187:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 188:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 157              	 .loc 1 188 0
 158 000c 0848     	 ldrne r0,.L20+8
 159 000e FFF7FEFF 	 bl XMC_SCU_RESET_IsPeripheralResetAsserted
 160              	.LVL11:
 161 0012 80F00100 	 eor r0,r0,#1
 162 0016 C0B2     	 uxtb r0,r0
 163              	.LVL12:
 189:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 190:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 191:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 192:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 193:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 194:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 195:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   /* DMA reset is not asserted and peripheral clock is not gated */
 196:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   if (status == true)
 164              	 .loc 1 196 0
 165 0018 20B1     	 cbz r0,.L18
 197:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 198:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     status = status && (dma->DMACFGREG != 0U);
 166              	 .loc 1 198 0 discriminator 1
 167 001a D4F89803 	 ldr r0,[r4,#920]
 168              	.LVL13:
 169 001e 0030     	 adds r0,r0,#0
 170 0020 18BF     	 it ne
 171 0022 0120     	 movne r0,#1
 172              	.LVL14:
 173              	.L18:
 199:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 200:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 201:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   return status;
 202:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 174              	 .loc 1 202 0
 175 0024 10BD     	 pop {r4,pc}
 176              	.LVL15:
 177              	.L21:
 178 0026 00BF     	 .align 2
 179              	.L20:
 180 0028 00400150 	 .word 1342259200
 181 002c 10000020 	 .word 536870928
 182 0030 20000020 	 .word 536870944
 183              	 .cfi_endproc
 184              	.LFE192:
 186              	 .section .text.XMC_DMA_EnableRequestLine,"ax",%progbits
 187              	 .align 2
 188              	 .global XMC_DMA_EnableRequestLine
 189              	 .thumb
 190              	 .thumb_func
 192              	XMC_DMA_EnableRequestLine:
 193              	.LFB193:
 203:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 204:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Enable request line */
 205:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_EnableRequestLine(XMC_DMA_t *const dma, uint8_t line, uint8_t peripheral)
 206:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 194              	 .loc 1 206 0
 195              	 .cfi_startproc
 196              	 
 197              	 
 198              	 
 199              	.LVL16:
 200 0000 30B4     	 push {r4,r5}
 201              	.LCFI4:
 202              	 .cfi_def_cfa_offset 8
 203              	 .cfi_offset 4,-8
 204              	 .cfi_offset 5,-4
 207:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 208:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   if (dma == XMC_DMA0)
 205              	 .loc 1 208 0
 206 0002 144B     	 ldr r3,.L26
 207 0004 9842     	 cmp r0,r3
 208 0006 12D1     	 bne .L23
 209:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 210:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #else
 211:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 212:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 213:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 209              	 .loc 1 213 0
 210 0008 A3F57743 	 sub r3,r3,#63232
 211 000c 9C68     	 ldr r4,[r3,#8]
 212 000e 8D00     	 lsls r5,r1,#2
 213 0010 0F20     	 movs r0,#15
 214              	.LVL17:
 215 0012 A840     	 lsls r0,r0,r5
 216 0014 24EA0000 	 bic r0,r4,r0
 214:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 217              	 .loc 1 214 0
 218 0018 AA40     	 lsls r2,r2,r5
 219              	.LVL18:
 213:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 220              	 .loc 1 213 0
 221 001a 0243     	 orrs r2,r2,r0
 222 001c 9A60     	 str r2,[r3,#8]
 215:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
 223              	 .loc 1 215 0
 224 001e 1869     	 ldr r0,[r3,#16]
 225 0020 01F00701 	 and r1,r1,#7
 226              	.LVL19:
 227 0024 0122     	 movs r2,#1
 228 0026 8A40     	 lsls r2,r2,r1
 229 0028 0243     	 orrs r2,r2,r0
 230 002a 1A61     	 str r2,[r3,#16]
 231 002c 0FE0     	 b .L22
 232              	.LVL20:
 233              	.L23:
 216:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 217:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 218:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   else
 219:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 220:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 234              	 .loc 1 220 0
 235 002e 0A4B     	 ldr r3,.L26+4
 236 0030 DC68     	 ldr r4,[r3,#12]
 237 0032 8D00     	 lsls r5,r1,#2
 238 0034 0F20     	 movs r0,#15
 239              	.LVL21:
 240 0036 A840     	 lsls r0,r0,r5
 241 0038 24EA0000 	 bic r0,r4,r0
 221:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 242              	 .loc 1 221 0
 243 003c AA40     	 lsls r2,r2,r5
 244              	.LVL22:
 220:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 245              	 .loc 1 220 0
 246 003e 0243     	 orrs r2,r2,r0
 247 0040 DA60     	 str r2,[r3,#12]
 222:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     DLR->LNEN |= (0x100UL << line);
 248              	 .loc 1 222 0
 249 0042 1869     	 ldr r0,[r3,#16]
 250 0044 4FF48072 	 mov r2,#256
 251 0048 8A40     	 lsls r2,r2,r1
 252 004a 0243     	 orrs r2,r2,r0
 253 004c 1A61     	 str r2,[r3,#16]
 254              	.LVL23:
 255              	.L22:
 223:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 224:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 225:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 256              	 .loc 1 225 0
 257 004e 30BC     	 pop {r4,r5}
 258              	.LCFI5:
 259              	 .cfi_restore 5
 260              	 .cfi_restore 4
 261              	 .cfi_def_cfa_offset 0
 262 0050 7047     	 bx lr
 263              	.L27:
 264 0052 00BF     	 .align 2
 265              	.L26:
 266 0054 00400150 	 .word 1342259200
 267 0058 00490050 	 .word 1342195968
 268              	 .cfi_endproc
 269              	.LFE193:
 271              	 .section .text.XMC_DMA_DisableRequestLine,"ax",%progbits
 272              	 .align 2
 273              	 .global XMC_DMA_DisableRequestLine
 274              	 .thumb
 275              	 .thumb_func
 277              	XMC_DMA_DisableRequestLine:
 278              	.LFB194:
 226:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 227:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_DisableRequestLine(XMC_DMA_t *const dma, uint8_t line)
 228:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 279              	 .loc 1 228 0
 280              	 .cfi_startproc
 281              	 
 282              	 
 283              	 
 284              	.LVL24:
 229:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 230:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   if (dma == XMC_DMA0)
 285              	 .loc 1 230 0
 286 0000 064B     	 ldr r3,.L31
 287 0002 9842     	 cmp r0,r3
 231:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 232:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #else
 233:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 234:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 235:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     DLR->LNEN &= ~(0x1UL << line);
 288              	 .loc 1 235 0
 289 0004 0648     	 ldr r0,.L31+4
 290              	.LVL25:
 291 0006 0269     	 ldr r2,[r0,#16]
 292 0008 0CBF     	 ite eq
 293 000a 0123     	 moveq r3,#1
 236:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 237:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 238:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   else
 239:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 240:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     DLR->LNEN &= ~(0x100UL << line);
 294              	 .loc 1 240 0
 295 000c 4FF48073 	 movne r3,#256
 296 0010 8B40     	 lsls r3,r3,r1
 297 0012 22EA0303 	 bic r3,r2,r3
 298 0016 0361     	 str r3,[r0,#16]
 299 0018 7047     	 bx lr
 300              	.L32:
 301 001a 00BF     	 .align 2
 302              	.L31:
 303 001c 00400150 	 .word 1342259200
 304 0020 00490050 	 .word 1342195968
 305              	 .cfi_endproc
 306              	.LFE194:
 308              	 .section .text.XMC_DMA_ClearRequestLine,"ax",%progbits
 309              	 .align 2
 310              	 .global XMC_DMA_ClearRequestLine
 311              	 .thumb
 312              	 .thumb_func
 314              	XMC_DMA_ClearRequestLine:
 315              	.LFB195:
 241:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 242:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 243:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 244:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 245:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_ClearRequestLine(XMC_DMA_t *const dma, uint8_t line)
 246:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 316              	 .loc 1 246 0
 317              	 .cfi_startproc
 318              	 
 319              	 
 320              	 
 321              	.LVL26:
 247:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 248:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   if (dma == XMC_DMA0)
 322              	 .loc 1 248 0
 323 0000 0D4B     	 ldr r3,.L36
 324 0002 9842     	 cmp r0,r3
 325 0004 0BD1     	 bne .L34
 249:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 250:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #else
 251:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 252:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 253:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     DLR->LNEN &= ~(0x1UL << line);
 326              	 .loc 1 253 0
 327 0006 A3F57743 	 sub r3,r3,#63232
 328 000a 1869     	 ldr r0,[r3,#16]
 329              	.LVL27:
 330 000c 0122     	 movs r2,#1
 331 000e 8A40     	 lsls r2,r2,r1
 332 0010 20EA0201 	 bic r1,r0,r2
 333              	.LVL28:
 334 0014 1961     	 str r1,[r3,#16]
 254:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 	DLR->LNEN |= 0x1UL << line;
 335              	 .loc 1 254 0
 336 0016 1969     	 ldr r1,[r3,#16]
 337 0018 0A43     	 orrs r2,r2,r1
 338 001a 1A61     	 str r2,[r3,#16]
 339 001c 7047     	 bx lr
 340              	.LVL29:
 341              	.L34:
 255:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 256:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 257:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   else
 258:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 259:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     DLR->LNEN &= ~(0x100UL << line);
 342              	 .loc 1 259 0
 343 001e 074B     	 ldr r3,.L36+4
 344 0020 1869     	 ldr r0,[r3,#16]
 345              	.LVL30:
 346 0022 4FF48072 	 mov r2,#256
 347 0026 8A40     	 lsls r2,r2,r1
 348 0028 20EA0201 	 bic r1,r0,r2
 349              	.LVL31:
 350 002c 1961     	 str r1,[r3,#16]
 260:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 	DLR->LNEN |= 0x100UL << line;
 351              	 .loc 1 260 0
 352 002e 1969     	 ldr r1,[r3,#16]
 353 0030 0A43     	 orrs r2,r2,r1
 354 0032 1A61     	 str r2,[r3,#16]
 355 0034 7047     	 bx lr
 356              	.L37:
 357 0036 00BF     	 .align 2
 358              	.L36:
 359 0038 00400150 	 .word 1342259200
 360 003c 00490050 	 .word 1342195968
 361              	 .cfi_endproc
 362              	.LFE195:
 364              	 .section .text.XMC_DMA_GetOverrunStatus,"ax",%progbits
 365              	 .align 2
 366              	 .global XMC_DMA_GetOverrunStatus
 367              	 .thumb
 368              	 .thumb_func
 370              	XMC_DMA_GetOverrunStatus:
 371              	.LFB196:
 261:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 262:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 263:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 264:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 265:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Get DMA DLR overrun status */
 266:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** bool XMC_DMA_GetOverrunStatus(XMC_DMA_t *const dma, uint8_t line)
 267:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 372              	 .loc 1 267 0
 373              	 .cfi_startproc
 374              	 
 375              	 
 376              	 
 377              	.LVL32:
 268:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   bool status;
 269:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 270:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 271:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   if (dma == XMC_DMA0)
 378              	 .loc 1 271 0
 379 0000 094B     	 ldr r3,.L41
 380 0002 9842     	 cmp r0,r3
 381 0004 06D1     	 bne .L39
 272:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 273:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #else
 274:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 275:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 276:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     status = (bool)(DLR->OVRSTAT & (0x1UL << line));
 382              	 .loc 1 276 0
 383 0006 A3F57743 	 sub r3,r3,#63232
 384 000a 1868     	 ldr r0,[r3]
 385              	.LVL33:
 386 000c C840     	 lsrs r0,r0,r1
 387 000e 00F00100 	 and r0,r0,#1
 388              	.LVL34:
 389 0012 7047     	 bx lr
 390              	.LVL35:
 391              	.L39:
 277:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 278:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 279:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   else
 280:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 281:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     status = (bool)(DLR->OVRSTAT & (0x100UL << line));
 392              	 .loc 1 281 0
 393 0014 054B     	 ldr r3,.L41+4
 394 0016 1A68     	 ldr r2,[r3]
 395 0018 4FF48073 	 mov r3,#256
 396 001c 8B40     	 lsls r3,r3,r1
 397 001e 1342     	 tst r3,r2
 398 0020 14BF     	 ite ne
 399 0022 0120     	 movne r0,#1
 400              	.LVL36:
 401 0024 0020     	 moveq r0,#0
 402              	.LVL37:
 282:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 283:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 284:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 285:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   return status;
 286:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 403              	 .loc 1 286 0
 404 0026 7047     	 bx lr
 405              	.L42:
 406              	 .align 2
 407              	.L41:
 408 0028 00400150 	 .word 1342259200
 409 002c 00490050 	 .word 1342195968
 410              	 .cfi_endproc
 411              	.LFE196:
 413              	 .section .text.XMC_DMA_ClearOverrunStatus,"ax",%progbits
 414              	 .align 2
 415              	 .global XMC_DMA_ClearOverrunStatus
 416              	 .thumb
 417              	 .thumb_func
 419              	XMC_DMA_ClearOverrunStatus:
 420              	.LFB197:
 287:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 288:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Clear DMA DLR overrun status */
 289:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_ClearOverrunStatus(XMC_DMA_t *const dma, const uint8_t line)
 290:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 421              	 .loc 1 290 0
 422              	 .cfi_startproc
 423              	 
 424              	 
 425              	 
 426              	.LVL38:
 291:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 292:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   if (dma == XMC_DMA0)
 427              	 .loc 1 292 0
 428 0000 044B     	 ldr r3,.L46
 429 0002 9842     	 cmp r0,r3
 293:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 294:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #else
 295:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 296:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 297:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     DLR->OVRCLR = (uint32_t)(0x1UL << line);
 430              	 .loc 1 297 0
 431 0004 0CBF     	 ite eq
 432 0006 0123     	 moveq r3,#1
 298:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 299:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 300:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   else
 301:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 302:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     DLR->OVRCLR = (uint32_t)(0x100UL << line);
 433              	 .loc 1 302 0
 434 0008 4FF48073 	 movne r3,#256
 435 000c 8B40     	 lsls r3,r3,r1
 436 000e 024A     	 ldr r2,.L46+4
 437 0010 5360     	 str r3,[r2,#4]
 438 0012 7047     	 bx lr
 439              	.L47:
 440              	 .align 2
 441              	.L46:
 442 0014 00400150 	 .word 1342259200
 443 0018 00490050 	 .word 1342195968
 444              	 .cfi_endproc
 445              	.LFE197:
 447              	 .section .text.XMC_DMA_CH_Disable,"ax",%progbits
 448              	 .align 2
 449              	 .global XMC_DMA_CH_Disable
 450              	 .thumb
 451              	 .thumb_func
 453              	XMC_DMA_CH_Disable:
 454              	.LFB198:
 303:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 304:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 305:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 306:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 307:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Disable DMA channel */
 308:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_CH_Disable(XMC_DMA_t *const dma, const uint8_t channel)
 309:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 455              	 .loc 1 309 0
 456              	 .cfi_startproc
 457              	 
 458              	 
 459              	 
 460              	.LVL39:
 310:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   dma->CHENREG = (uint32_t)(0x100UL << channel);
 461              	 .loc 1 310 0
 462 0000 4FF48073 	 mov r3,#256
 463 0004 8B40     	 lsls r3,r3,r1
 464 0006 C0F8A033 	 str r3,[r0,#928]
 465 000a 0122     	 movs r2,#1
 466 000c 8A40     	 lsls r2,r2,r1
 467              	.L49:
 311:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   while((dma->CHENREG & (uint32_t)(0x1UL << channel)) != 0U)
 468              	 .loc 1 311 0 discriminator 1
 469 000e D0F8A033 	 ldr r3,[r0,#928]
 470 0012 1A42     	 tst r2,r3
 471 0014 FBD1     	 bne .L49
 312:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 313:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     /* wait until channel is disabled */
 314:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 315:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 472              	 .loc 1 315 0
 473 0016 7047     	 bx lr
 474              	 .cfi_endproc
 475              	.LFE198:
 477              	 .section .text.XMC_DMA_CH_IsEnabled,"ax",%progbits
 478              	 .align 2
 479              	 .global XMC_DMA_CH_IsEnabled
 480              	 .thumb
 481              	 .thumb_func
 483              	XMC_DMA_CH_IsEnabled:
 484              	.LFB199:
 316:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 317:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Check if a DMA channel is enabled */
 318:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** bool XMC_DMA_CH_IsEnabled(XMC_DMA_t *const dma, const uint8_t channel)
 319:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 485              	 .loc 1 319 0
 486              	 .cfi_startproc
 487              	 
 488              	 
 489              	 
 490              	.LVL40:
 320:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   return (bool)(dma->CHENREG & ((uint32_t)1U << channel));
 491              	 .loc 1 320 0
 492 0000 D0F8A003 	 ldr r0,[r0,#928]
 493              	.LVL41:
 494 0004 C840     	 lsrs r0,r0,r1
 321:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 495              	 .loc 1 321 0
 496 0006 00F00100 	 and r0,r0,#1
 497 000a 7047     	 bx lr
 498              	 .cfi_endproc
 499              	.LFE199:
 501              	 .section .text.XMC_DMA_CH_Suspend,"ax",%progbits
 502              	 .align 2
 503              	 .global XMC_DMA_CH_Suspend
 504              	 .thumb
 505              	 .thumb_func
 507              	XMC_DMA_CH_Suspend:
 508              	.LFB201:
 322:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 323:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Initialize DMA channel */
 324:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** XMC_DMA_CH_STATUS_t XMC_DMA_CH_Init(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_C
 325:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 326:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   XMC_DMA_CH_STATUS_t status;
 327:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   uint8_t line;
 328:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   uint8_t peripheral;
 329:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 330:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   if (XMC_DMA_IsEnabled(dma) == true)
 331:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 332:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     if (XMC_DMA_CH_IsEnabled(dma, channel) == false)
 333:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     {
 334:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       dma->CH[channel].SAR = config->src_addr;
 335:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       dma->CH[channel].DAR = config->dst_addr;
 336:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       dma->CH[channel].LLP = (uint32_t)config->linked_list_pointer;
 337:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       dma->CH[channel].CTLH = (uint32_t)config->block_size;
 338:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       dma->CH[channel].CTLL = config->control;
 339:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 340:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       dma->CH[channel].CFGL = (uint32_t)((uint32_t)config->priority |
 341:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_SRC_Msk |
 342:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_DST_Msk);
 343:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 344:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       if ((dma == XMC_DMA0) && (channel < (uint8_t)2))
 345:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       {
 346:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         /* Configure scatter and gather */
 347:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         dma->CH[channel].SGR = config->src_gather_control;
 348:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         dma->CH[channel].DSR = config->dst_scatter_control;
 349:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       }
 350:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 351:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
 352:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       {
 353:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         /* Hardware handshaking interface configuration */
 354:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 355:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 356:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         {
 357:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 358:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           if (dma == XMC_DMA0)
 359:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           {
 360:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 361:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****             line = config->dst_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 362:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 363:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           }
 364:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           else
 365:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           {
 366:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****             line = config->dst_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 367:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           }
 368:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 369:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           peripheral = config->dst_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 370:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 371:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_DEST_PER_Pos);
 372:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 373:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_DST_Msk;
 374:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         }
 375:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       }
 376:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 377:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 378:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
 379:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       {
 380:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 381:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 382:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         {
 383:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 384:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           if (dma == XMC_DMA0)
 385:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           {
 386:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 387:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****             line = config->src_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 388:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 389:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           }
 390:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           else
 391:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           {
 392:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****             line = config->src_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 393:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           }
 394:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 395:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           peripheral = config->src_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 396:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 397:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_SRC_PER_Pos);
 398:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 399:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_SRC_Msk;
 400:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         }
 401:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       }
 402:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       
 403:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       XMC_DMA_CH_ClearEventStatus(dma, channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMP
 404:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFE
 405:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTI
 406:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTI
 407:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_ERROR));
 408:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 409:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       switch (config->transfer_type)
 410:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       {
 411:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK:
 412:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           break;
 413:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 414:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD:
 415:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 416:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           break;
 417:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 418:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS:
 419:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 420:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           break;
 421:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 422:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD:
 423:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)((uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk |
 424:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
 425:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           break;
 426:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 427:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED:
 428:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 429:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           break;
 430:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 431:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED:
 432:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 433:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 434:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           break;
 435:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 436:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS:
 437:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 438:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           break;
 439:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 440:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD:
 441:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 442:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 443:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           break;
 444:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 445:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED:
 446:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)((uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk |
 447:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
 448:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           break;
 449:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 450:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         default:
 451:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           break;
 452:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       }
 453:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 454:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       status = XMC_DMA_CH_STATUS_OK;
 455:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 456:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     }
 457:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     else
 458:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     {
 459:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       status = XMC_DMA_CH_STATUS_BUSY;
 460:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     }
 461:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 462:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   else 
 463:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 464:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     status = XMC_DMA_CH_STATUS_ERROR;
 465:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 466:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   
 467:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   return status;
 468:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 469:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 470:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Suspend DMA channel transfer */
 471:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_CH_Suspend(XMC_DMA_t *const dma, const uint8_t channel)
 472:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 509              	 .loc 1 472 0
 510              	 .cfi_startproc
 511              	 
 512              	 
 513              	 
 514              	.LVL42:
 473:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk;
 515              	 .loc 1 473 0
 516 0000 5823     	 movs r3,#88
 517 0002 03FB0101 	 mla r1,r3,r1,r0
 518              	.LVL43:
 519 0006 0B6C     	 ldr r3,[r1,#64]
 520 0008 43F48073 	 orr r3,r3,#256
 521 000c 0B64     	 str r3,[r1,#64]
 522 000e 7047     	 bx lr
 523              	 .cfi_endproc
 524              	.LFE201:
 526              	 .section .text.XMC_DMA_CH_Resume,"ax",%progbits
 527              	 .align 2
 528              	 .global XMC_DMA_CH_Resume
 529              	 .thumb
 530              	 .thumb_func
 532              	XMC_DMA_CH_Resume:
 533              	.LFB202:
 474:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 475:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 476:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Resume DMA channel transfer */
 477:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_CH_Resume(XMC_DMA_t *const dma, const uint8_t channel)
 478:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 534              	 .loc 1 478 0
 535              	 .cfi_startproc
 536              	 
 537              	 
 538              	 
 539              	.LVL44:
 479:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_CH_SUSP_Msk;
 540              	 .loc 1 479 0
 541 0000 5823     	 movs r3,#88
 542 0002 03FB0101 	 mla r1,r3,r1,r0
 543              	.LVL45:
 544 0006 0B6C     	 ldr r3,[r1,#64]
 545 0008 23F48073 	 bic r3,r3,#256
 546 000c 0B64     	 str r3,[r1,#64]
 547 000e 7047     	 bx lr
 548              	 .cfi_endproc
 549              	.LFE202:
 551              	 .section .text.XMC_DMA_CH_IsSuspended,"ax",%progbits
 552              	 .align 2
 553              	 .global XMC_DMA_CH_IsSuspended
 554              	 .thumb
 555              	 .thumb_func
 557              	XMC_DMA_CH_IsSuspended:
 558              	.LFB203:
 480:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 481:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 482:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Check if a DMA channel is suspended */
 483:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** bool XMC_DMA_CH_IsSuspended(XMC_DMA_t *const dma, const uint8_t channel)
 484:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 559              	 .loc 1 484 0
 560              	 .cfi_startproc
 561              	 
 562              	 
 563              	 
 564              	.LVL46:
 485:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   return (bool)(dma->CH[channel].CFGL & (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk);
 565              	 .loc 1 485 0
 566 0000 5823     	 movs r3,#88
 567 0002 03FB0101 	 mla r1,r3,r1,r0
 568              	.LVL47:
 569 0006 086C     	 ldr r0,[r1,#64]
 570              	.LVL48:
 486:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 571              	 .loc 1 486 0
 572 0008 C0F30020 	 ubfx r0,r0,#8,#1
 573 000c 7047     	 bx lr
 574              	 .cfi_endproc
 575              	.LFE203:
 577 000e 00BF     	 .section .text.XMC_DMA_CH_EnableEvent,"ax",%progbits
 578              	 .align 2
 579              	 .global XMC_DMA_CH_EnableEvent
 580              	 .thumb
 581              	 .thumb_func
 583              	XMC_DMA_CH_EnableEvent:
 584              	.LFB204:
 487:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 488:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Enable GPDMA event */
 489:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 490:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 585              	 .loc 1 490 0
 586              	 .cfi_startproc
 587              	 
 588              	 
 589              	 
 590              	.LVL49:
 591 0000 10B4     	 push {r4}
 592              	.LCFI6:
 593              	 .cfi_def_cfa_offset 4
 594              	 .cfi_offset 4,-4
 595              	.LVL50:
 491:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   uint32_t event_idx;
 492:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 493:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 494:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 495:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     if (event & ((uint32_t)0x1UL << event_idx))
 496:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     {
 497:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
 596              	 .loc 1 497 0
 597 0002 40F20114 	 movw r4,#257
 598 0006 8C40     	 lsls r4,r4,r1
 493:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 599              	 .loc 1 493 0
 600 0008 0023     	 movs r3,#0
 601              	.LVL51:
 602              	.L57:
 495:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     {
 603              	 .loc 1 495 0
 604 000a 22FA03F1 	 lsr r1,r2,r3
 605 000e 11F0010F 	 tst r1,#1
 606 0012 03D0     	 beq .L56
 607 0014 5900     	 lsls r1,r3,#1
 608              	 .loc 1 497 0
 609 0016 C431     	 adds r1,r1,#196
 610 0018 40F82140 	 str r4,[r0,r1,lsl#2]
 611              	.L56:
 493:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 612              	 .loc 1 493 0 discriminator 2
 613 001c 0133     	 adds r3,r3,#1
 614              	.LVL52:
 615 001e 052B     	 cmp r3,#5
 616 0020 F3D1     	 bne .L57
 498:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     }
 499:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 500:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 617              	 .loc 1 500 0
 618 0022 5DF8044B 	 ldr r4,[sp],#4
 619              	.LCFI7:
 620              	 .cfi_restore 4
 621              	 .cfi_def_cfa_offset 0
 622 0026 7047     	 bx lr
 623              	 .cfi_endproc
 624              	.LFE204:
 626              	 .section .text.XMC_DMA_CH_DisableEvent,"ax",%progbits
 627              	 .align 2
 628              	 .global XMC_DMA_CH_DisableEvent
 629              	 .thumb
 630              	 .thumb_func
 632              	XMC_DMA_CH_DisableEvent:
 633              	.LFB205:
 501:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 502:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Disable GPDMA event */
 503:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_CH_DisableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 504:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 634              	 .loc 1 504 0
 635              	 .cfi_startproc
 636              	 
 637              	 
 638              	 
 639              	.LVL53:
 640 0000 10B4     	 push {r4}
 641              	.LCFI8:
 642              	 .cfi_def_cfa_offset 4
 643              	 .cfi_offset 4,-4
 644              	.LVL54:
 505:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   uint32_t event_idx;
 506:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 507:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 508:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 509:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     if (event & ((uint32_t)0x1UL << event_idx))
 510:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     {
 511:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x100UL << channel);
 645              	 .loc 1 511 0
 646 0002 4FF48074 	 mov r4,#256
 647 0006 8C40     	 lsls r4,r4,r1
 507:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 648              	 .loc 1 507 0
 649 0008 0023     	 movs r3,#0
 650              	.LVL55:
 651              	.L62:
 509:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     {
 652              	 .loc 1 509 0
 653 000a 22FA03F1 	 lsr r1,r2,r3
 654 000e 11F0010F 	 tst r1,#1
 655 0012 03D0     	 beq .L61
 656 0014 5900     	 lsls r1,r3,#1
 657              	 .loc 1 511 0
 658 0016 C431     	 adds r1,r1,#196
 659 0018 40F82140 	 str r4,[r0,r1,lsl#2]
 660              	.L61:
 507:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 661              	 .loc 1 507 0 discriminator 2
 662 001c 0133     	 adds r3,r3,#1
 663              	.LVL56:
 664 001e 052B     	 cmp r3,#5
 665 0020 F3D1     	 bne .L62
 512:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     }
 513:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 514:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 666              	 .loc 1 514 0
 667 0022 5DF8044B 	 ldr r4,[sp],#4
 668              	.LCFI9:
 669              	 .cfi_restore 4
 670              	 .cfi_def_cfa_offset 0
 671 0026 7047     	 bx lr
 672              	 .cfi_endproc
 673              	.LFE205:
 675              	 .section .text.XMC_DMA_CH_ClearEventStatus,"ax",%progbits
 676              	 .align 2
 677              	 .global XMC_DMA_CH_ClearEventStatus
 678              	 .thumb
 679              	 .thumb_func
 681              	XMC_DMA_CH_ClearEventStatus:
 682              	.LFB206:
 515:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 516:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Clear GPDMA event */
 517:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 518:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 683              	 .loc 1 518 0
 684              	 .cfi_startproc
 685              	 
 686              	 
 687              	 
 688              	.LVL57:
 689 0000 10B4     	 push {r4}
 690              	.LCFI10:
 691              	 .cfi_def_cfa_offset 4
 692              	 .cfi_offset 4,-4
 693              	.LVL58:
 519:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   uint32_t event_idx;
 520:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 521:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 522:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 523:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     if (event & (uint32_t)((uint32_t)0x1UL << event_idx))
 524:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     {
 525:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
 694              	 .loc 1 525 0
 695 0002 0124     	 movs r4,#1
 696 0004 8C40     	 lsls r4,r4,r1
 521:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 697              	 .loc 1 521 0
 698 0006 0023     	 movs r3,#0
 699              	.LVL59:
 700              	.L67:
 523:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     {
 701              	 .loc 1 523 0
 702 0008 22FA03F1 	 lsr r1,r2,r3
 703 000c 11F0010F 	 tst r1,#1
 704 0010 03D0     	 beq .L66
 705 0012 5900     	 lsls r1,r3,#1
 706              	 .loc 1 525 0
 707 0014 CE31     	 adds r1,r1,#206
 708 0016 40F82140 	 str r4,[r0,r1,lsl#2]
 709              	.L66:
 521:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 710              	 .loc 1 521 0 discriminator 2
 711 001a 0133     	 adds r3,r3,#1
 712              	.LVL60:
 713 001c 052B     	 cmp r3,#5
 714 001e F3D1     	 bne .L67
 526:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     }
 527:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 528:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 529:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 715              	 .loc 1 529 0
 716 0020 5DF8044B 	 ldr r4,[sp],#4
 717              	.LCFI11:
 718              	 .cfi_restore 4
 719              	 .cfi_def_cfa_offset 0
 720 0024 7047     	 bx lr
 721              	 .cfi_endproc
 722              	.LFE206:
 724 0026 00BF     	 .section .text.XMC_DMA_CH_Init,"ax",%progbits
 725              	 .align 2
 726              	 .global XMC_DMA_CH_Init
 727              	 .thumb
 728              	 .thumb_func
 730              	XMC_DMA_CH_Init:
 731              	.LFB200:
 325:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   XMC_DMA_CH_STATUS_t status;
 732              	 .loc 1 325 0
 733              	 .cfi_startproc
 734              	 
 735              	 
 736              	.LVL61:
 737 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 738              	.LCFI12:
 739              	 .cfi_def_cfa_offset 24
 740              	 .cfi_offset 3,-24
 741              	 .cfi_offset 4,-20
 742              	 .cfi_offset 5,-16
 743              	 .cfi_offset 6,-12
 744              	 .cfi_offset 7,-8
 745              	 .cfi_offset 14,-4
 746 0002 0546     	 mov r5,r0
 747 0004 0E46     	 mov r6,r1
 748 0006 1446     	 mov r4,r2
 330:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 749              	 .loc 1 330 0
 750 0008 FFF7FEFF 	 bl XMC_DMA_IsEnabled
 751              	.LVL62:
 752 000c 0028     	 cmp r0,#0
 753 000e 00F0C880 	 beq .L88
 754              	.LVL63:
 755              	.LBB16:
 756              	.LBB17:
 320:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 757              	 .loc 1 320 0
 758 0012 D5F8A033 	 ldr r3,[r5,#928]
 759 0016 F340     	 lsrs r3,r3,r6
 760              	.LBE17:
 761              	.LBE16:
 332:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     {
 762              	 .loc 1 332 0
 763 0018 13F0010F 	 tst r3,#1
 764 001c 40F0C380 	 bne .L89
 334:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       dma->CH[channel].DAR = config->dst_addr;
 765              	 .loc 1 334 0
 766 0020 6168     	 ldr r1,[r4,#4]
 767 0022 5822     	 movs r2,#88
 768 0024 02FB06F2 	 mul r2,r2,r6
 769 0028 AB18     	 adds r3,r5,r2
 770 002a A950     	 str r1,[r5,r2]
 335:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       dma->CH[channel].LLP = (uint32_t)config->linked_list_pointer;
 771              	 .loc 1 335 0
 772 002c A268     	 ldr r2,[r4,#8]
 773 002e 9A60     	 str r2,[r3,#8]
 336:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       dma->CH[channel].CTLH = (uint32_t)config->block_size;
 774              	 .loc 1 336 0
 775 0030 E268     	 ldr r2,[r4,#12]
 776 0032 1A61     	 str r2,[r3,#16]
 337:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       dma->CH[channel].CTLL = config->control;
 777              	 .loc 1 337 0
 778 0034 218B     	 ldrh r1,[r4,#24]
 779 0036 D961     	 str r1,[r3,#28]
 338:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 780              	 .loc 1 338 0
 781 0038 2268     	 ldr r2,[r4]
 782 003a 9A61     	 str r2,[r3,#24]
 340:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_SRC_Msk |
 783              	 .loc 1 340 0
 784 003c E27E     	 ldrb r2,[r4,#27]
 785 003e 42F44062 	 orr r2,r2,#3072
 786 0042 1A64     	 str r2,[r3,#64]
 344:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       {
 787              	 .loc 1 344 0
 788 0044 5A4B     	 ldr r3,.L92
 789 0046 9D42     	 cmp r5,r3
 790 0048 0CD1     	 bne .L72
 344:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       {
 791              	 .loc 1 344 0 is_stmt 0 discriminator 1
 792 004a 012E     	 cmp r6,#1
 793 004c 0AD8     	 bhi .L72
 347:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         dma->CH[channel].DSR = config->dst_scatter_control;
 794              	 .loc 1 347 0 is_stmt 1
 795 004e 2269     	 ldr r2,[r4,#16]
 796 0050 5823     	 movs r3,#88
 797 0052 03FB06F3 	 mul r3,r3,r6
 798 0056 03F1A043 	 add r3,r3,#1342177280
 799 005a 03F5A033 	 add r3,r3,#81920
 800 005e 9A64     	 str r2,[r3,#72]
 348:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       }
 801              	 .loc 1 348 0
 802 0060 6269     	 ldr r2,[r4,#20]
 803 0062 1A65     	 str r2,[r3,#80]
 804              	.L72:
 351:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       {
 805              	 .loc 1 351 0
 806 0064 238C     	 ldrh r3,[r4,#32]
 807 0066 F3B9     	 cbnz r3,.L73
 354:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 808              	 .loc 1 354 0
 809 0068 A378     	 ldrb r3,[r4,#2]
 810 006a 03F05003 	 and r3,r3,#80
 811 006e 102B     	 cmp r3,#16
 812 0070 19D1     	 bne .L73
 358:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           {
 813              	 .loc 1 358 0
 814 0072 4F4B     	 ldr r3,.L92
 815 0074 9D42     	 cmp r5,r3
 361:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 816              	 .loc 1 361 0
 817 0076 94F82210 	 ldrb r1,[r4,#34]
 818 007a 0CBF     	 ite eq
 819 007c 01F00701 	 andeq r1,r1,#7
 820              	.LVL64:
 366:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           }
 821              	 .loc 1 366 0
 822 0080 01F00301 	 andne r1,r1,#3
 823              	.LVL65:
 369:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 824              	 .loc 1 369 0
 825 0084 94F82220 	 ldrb r2,[r4,#34]
 826              	.LVL66:
 371:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 827              	 .loc 1 371 0
 828 0088 5827     	 movs r7,#88
 829 008a 07FB0657 	 mla r7,r7,r6,r5
 830 008e 7B6C     	 ldr r3,[r7,#68]
 831 0090 43EAC123 	 orr r3,r3,r1,lsl#11
 832 0094 7B64     	 str r3,[r7,#68]
 372:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_DST_Msk;
 833              	 .loc 1 372 0
 834 0096 2846     	 mov r0,r5
 835 0098 1209     	 lsrs r2,r2,#4
 836              	.LVL67:
 837 009a FFF7FEFF 	 bl XMC_DMA_EnableRequestLine
 838              	.LVL68:
 373:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         }
 839              	 .loc 1 373 0
 840 009e 3B6C     	 ldr r3,[r7,#64]
 841 00a0 23F48063 	 bic r3,r3,#1024
 842 00a4 3B64     	 str r3,[r7,#64]
 843              	.L73:
 378:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       {
 844              	 .loc 1 378 0
 845 00a6 A38B     	 ldrh r3,[r4,#28]
 846 00a8 E3B9     	 cbnz r3,.L76
 380:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 847              	 .loc 1 380 0
 848 00aa A378     	 ldrb r3,[r4,#2]
 849 00ac 03F06003 	 and r3,r3,#96
 850 00b0 202B     	 cmp r3,#32
 851 00b2 17D1     	 bne .L76
 384:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           {
 852              	 .loc 1 384 0
 853 00b4 3E4B     	 ldr r3,.L92
 854 00b6 9D42     	 cmp r5,r3
 387:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 855              	 .loc 1 387 0
 856 00b8 A17F     	 ldrb r1,[r4,#30]
 857 00ba 0CBF     	 ite eq
 858 00bc 01F00701 	 andeq r1,r1,#7
 859              	.LVL69:
 392:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           }
 860              	 .loc 1 392 0
 861 00c0 01F00301 	 andne r1,r1,#3
 862              	.LVL70:
 395:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 863              	 .loc 1 395 0
 864 00c4 A27F     	 ldrb r2,[r4,#30]
 865              	.LVL71:
 397:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 866              	 .loc 1 397 0
 867 00c6 5827     	 movs r7,#88
 868 00c8 07FB0657 	 mla r7,r7,r6,r5
 869 00cc 7B6C     	 ldr r3,[r7,#68]
 870 00ce 43EAC113 	 orr r3,r3,r1,lsl#7
 871 00d2 7B64     	 str r3,[r7,#68]
 398:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_SRC_Msk;
 872              	 .loc 1 398 0
 873 00d4 2846     	 mov r0,r5
 874 00d6 1209     	 lsrs r2,r2,#4
 875              	.LVL72:
 876 00d8 FFF7FEFF 	 bl XMC_DMA_EnableRequestLine
 877              	.LVL73:
 399:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         }
 878              	 .loc 1 399 0
 879 00dc 3B6C     	 ldr r3,[r7,#64]
 880 00de 23F40063 	 bic r3,r3,#2048
 881 00e2 3B64     	 str r3,[r7,#64]
 882              	.L76:
 403:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFE
 883              	 .loc 1 403 0
 884 00e4 2846     	 mov r0,r5
 885 00e6 3146     	 mov r1,r6
 886 00e8 1F22     	 movs r2,#31
 887 00ea FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 888              	.LVL74:
 409:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       {
 889              	 .loc 1 409 0
 890 00ee A37E     	 ldrb r3,[r4,#26]
 891 00f0 013B     	 subs r3,r3,#1
 892 00f2 072B     	 cmp r3,#7
 893 00f4 59D8     	 bhi .L90
 894 00f6 DFE803F0 	 tbb [pc,r3]
 895              	.L80:
 896 00fa 04       	 .byte (.L79-.L80)/2
 897 00fb 0D       	 .byte (.L81-.L80)/2
 898 00fc 16       	 .byte (.L82-.L80)/2
 899 00fd 1F       	 .byte (.L83-.L80)/2
 900 00fe 28       	 .byte (.L84-.L80)/2
 901 00ff 35       	 .byte (.L85-.L80)/2
 902 0100 3E       	 .byte (.L86-.L80)/2
 903 0101 4B       	 .byte (.L87-.L80)/2
 904              	 .p2align 1
 905              	.L79:
 415:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           break;
 906              	 .loc 1 415 0
 907 0102 5823     	 movs r3,#88
 908 0104 03FB0655 	 mla r5,r3,r6,r5
 909              	.LVL75:
 910 0108 2B6C     	 ldr r3,[r5,#64]
 911 010a 43F00043 	 orr r3,r3,#-2147483648
 912 010e 2B64     	 str r3,[r5,#64]
 454:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 913              	 .loc 1 454 0
 914 0110 0020     	 movs r0,#0
 416:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 915              	 .loc 1 416 0
 916 0112 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 917              	.LVL76:
 918              	.L81:
 419:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           break;
 919              	 .loc 1 419 0
 920 0114 5823     	 movs r3,#88
 921 0116 03FB0655 	 mla r5,r3,r6,r5
 922              	.LVL77:
 923 011a 2B6C     	 ldr r3,[r5,#64]
 924 011c 43F08043 	 orr r3,r3,#1073741824
 925 0120 2B64     	 str r3,[r5,#64]
 454:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 926              	 .loc 1 454 0
 927 0122 0020     	 movs r0,#0
 420:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 928              	 .loc 1 420 0
 929 0124 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 930              	.LVL78:
 931              	.L82:
 423:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
 932              	 .loc 1 423 0
 933 0126 5823     	 movs r3,#88
 934 0128 03FB0655 	 mla r5,r3,r6,r5
 935              	.LVL79:
 936 012c 2B6C     	 ldr r3,[r5,#64]
 937 012e 43F04043 	 orr r3,r3,#-1073741824
 938 0132 2B64     	 str r3,[r5,#64]
 454:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 939              	 .loc 1 454 0
 940 0134 0020     	 movs r0,#0
 425:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 941              	 .loc 1 425 0
 942 0136 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 943              	.LVL80:
 944              	.L83:
 428:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           break;
 945              	 .loc 1 428 0
 946 0138 5823     	 movs r3,#88
 947 013a 03FB0655 	 mla r5,r3,r6,r5
 948              	.LVL81:
 949 013e AB69     	 ldr r3,[r5,#24]
 950 0140 43F00063 	 orr r3,r3,#134217728
 951 0144 AB61     	 str r3,[r5,#24]
 454:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 952              	 .loc 1 454 0
 953 0146 0020     	 movs r0,#0
 429:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 954              	 .loc 1 429 0
 955 0148 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 956              	.LVL82:
 957              	.L84:
 432:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 958              	 .loc 1 432 0
 959 014a 5823     	 movs r3,#88
 960 014c 03FB0655 	 mla r5,r3,r6,r5
 961              	.LVL83:
 962 0150 2B6C     	 ldr r3,[r5,#64]
 963 0152 43F08043 	 orr r3,r3,#1073741824
 964 0156 2B64     	 str r3,[r5,#64]
 433:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           break;
 965              	 .loc 1 433 0
 966 0158 AB69     	 ldr r3,[r5,#24]
 967 015a 43F00063 	 orr r3,r3,#134217728
 968 015e AB61     	 str r3,[r5,#24]
 454:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 969              	 .loc 1 454 0
 970 0160 0020     	 movs r0,#0
 434:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 971              	 .loc 1 434 0
 972 0162 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 973              	.LVL84:
 974              	.L85:
 437:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           break;
 975              	 .loc 1 437 0
 976 0164 5823     	 movs r3,#88
 977 0166 03FB0655 	 mla r5,r3,r6,r5
 978              	.LVL85:
 979 016a AB69     	 ldr r3,[r5,#24]
 980 016c 43F08053 	 orr r3,r3,#268435456
 981 0170 AB61     	 str r3,[r5,#24]
 454:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 982              	 .loc 1 454 0
 983 0172 0020     	 movs r0,#0
 438:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 984              	 .loc 1 438 0
 985 0174 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 986              	.LVL86:
 987              	.L86:
 441:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 988              	 .loc 1 441 0
 989 0176 5823     	 movs r3,#88
 990 0178 03FB0655 	 mla r5,r3,r6,r5
 991              	.LVL87:
 992 017c 2B6C     	 ldr r3,[r5,#64]
 993 017e 43F00043 	 orr r3,r3,#-2147483648
 994 0182 2B64     	 str r3,[r5,#64]
 442:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           break;
 995              	 .loc 1 442 0
 996 0184 AB69     	 ldr r3,[r5,#24]
 997 0186 43F08053 	 orr r3,r3,#268435456
 998 018a AB61     	 str r3,[r5,#24]
 454:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 999              	 .loc 1 454 0
 1000 018c 0020     	 movs r0,#0
 443:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 1001              	 .loc 1 443 0
 1002 018e F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1003              	.LVL88:
 1004              	.L87:
 446:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
 1005              	 .loc 1 446 0
 1006 0190 5823     	 movs r3,#88
 1007 0192 03FB0655 	 mla r5,r3,r6,r5
 1008              	.LVL89:
 1009 0196 AB69     	 ldr r3,[r5,#24]
 1010 0198 43F0C053 	 orr r3,r3,#402653184
 1011 019c AB61     	 str r3,[r5,#24]
 454:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 1012              	 .loc 1 454 0
 1013 019e 0020     	 movs r0,#0
 448:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 1014              	 .loc 1 448 0
 1015 01a0 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1016              	.LVL90:
 1017              	.L88:
 464:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 1018              	 .loc 1 464 0
 1019 01a2 0120     	 movs r0,#1
 1020 01a4 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1021              	.LVL91:
 1022              	.L89:
 459:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     }
 1023              	 .loc 1 459 0
 1024 01a6 0220     	 movs r0,#2
 1025 01a8 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1026              	.LVL92:
 1027              	.L90:
 454:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 1028              	 .loc 1 454 0
 1029 01aa 0020     	 movs r0,#0
 1030              	.LVL93:
 468:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 1031              	 .loc 1 468 0
 1032 01ac F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1033              	.LVL94:
 1034              	.L93:
 1035 01ae 00BF     	 .align 2
 1036              	.L92:
 1037 01b0 00400150 	 .word 1342259200
 1038              	 .cfi_endproc
 1039              	.LFE200:
 1041              	 .section .text.XMC_DMA_CH_GetEventStatus,"ax",%progbits
 1042              	 .align 2
 1043              	 .global XMC_DMA_CH_GetEventStatus
 1044              	 .thumb
 1045              	 .thumb_func
 1047              	XMC_DMA_CH_GetEventStatus:
 1048              	.LFB207:
 530:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 531:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Get GPDMA event status */
 532:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** uint32_t XMC_DMA_CH_GetEventStatus(XMC_DMA_t *const dma, const uint8_t channel)
 533:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 1049              	 .loc 1 533 0
 1050              	 .cfi_startproc
 1051              	 
 1052              	 
 1053              	 
 1054              	.LVL95:
 1055 0000 30B4     	 push {r4,r5}
 1056              	.LCFI13:
 1057              	 .cfi_def_cfa_offset 8
 1058              	 .cfi_offset 4,-8
 1059              	 .cfi_offset 5,-4
 1060              	.LVL96:
 1061 0002 0123     	 movs r3,#1
 1062 0004 03FA01F1 	 lsl r1,r3,r1
 1063              	.LVL97:
 534:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   uint32_t event_idx;
 535:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   uint32_t status = 0UL;
 1064              	 .loc 1 535 0
 1065 0008 0024     	 movs r4,#0
 536:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 537:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 1066              	 .loc 1 537 0
 1067 000a 2246     	 mov r2,r4
 538:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 539:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     status |= (uint32_t)((dma->STATUSCHEV[event_idx * 2UL] & (uint32_t)((uint32_t)0x1UL << (uint32_
 1068              	 .loc 1 539 0
 1069 000c 1D46     	 mov r5,r3
 1070              	.LVL98:
 1071              	.L96:
 1072 000e 5300     	 lsls r3,r2,#1
 1073 0010 BA33     	 adds r3,r3,#186
 1074 0012 50F82330 	 ldr r3,[r0,r3,lsl#2]
 1075 0016 0B40     	 ands r3,r3,r1
 1076 0018 18BF     	 it ne
 1077 001a 05FA02F3 	 lslne r3,r5,r2
 1078 001e 1C43     	 orrs r4,r4,r3
 1079              	.LVL99:
 537:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 1080              	 .loc 1 537 0
 1081 0020 0132     	 adds r2,r2,#1
 1082              	.LVL100:
 1083 0022 052A     	 cmp r2,#5
 1084 0024 F3D1     	 bne .L96
 540:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****                          ((uint32_t)0x1UL << event_idx) : (uint32_t)0UL);
 541:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 542:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 543:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   return status;
 544:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 1085              	 .loc 1 544 0
 1086 0026 2046     	 mov r0,r4
 1087              	.LVL101:
 1088 0028 30BC     	 pop {r4,r5}
 1089              	.LCFI14:
 1090              	 .cfi_restore 5
 1091              	 .cfi_restore 4
 1092              	 .cfi_def_cfa_offset 0
 1093              	.LVL102:
 1094 002a 7047     	 bx lr
 1095              	 .cfi_endproc
 1096              	.LFE207:
 1098              	 .section .text.XMC_DMA_CH_EnableSourceGather,"ax",%progbits
 1099              	 .align 2
 1100              	 .global XMC_DMA_CH_EnableSourceGather
 1101              	 .thumb
 1102              	 .thumb_func
 1104              	XMC_DMA_CH_EnableSourceGather:
 1105              	.LFB208:
 545:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 546:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Enable source gather */
 547:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_CH_EnableSourceGather(XMC_DMA_t *const dma, const uint8_t channel, uint32_t interval, 
 548:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 1106              	 .loc 1 548 0
 1107              	 .cfi_startproc
 1108              	 
 1109              	 
 1110              	 
 1111              	.LVL103:
 1112 0000 10B4     	 push {r4}
 1113              	.LCFI15:
 1114              	 .cfi_def_cfa_offset 4
 1115              	 .cfi_offset 4,-4
 549:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 1116              	 .loc 1 549 0
 1117 0002 5824     	 movs r4,#88
 1118 0004 04FB0101 	 mla r1,r4,r1,r0
 1119              	.LVL104:
 1120 0008 8869     	 ldr r0,[r1,#24]
 1121              	.LVL105:
 1122 000a 40F40030 	 orr r0,r0,#131072
 1123 000e 8861     	 str r0,[r1,#24]
 550:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   dma->CH[channel].SGR = ((uint32_t)interval << GPDMA0_CH_SGR_SGI_Pos) | ((uint32_t)count << GPDMA0
 1124              	 .loc 1 550 0
 1125 0010 42EA0353 	 orr r3,r2,r3,lsl#20
 1126              	.LVL106:
 1127 0014 8B64     	 str r3,[r1,#72]
 551:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 1128              	 .loc 1 551 0
 1129 0016 5DF8044B 	 ldr r4,[sp],#4
 1130              	.LCFI16:
 1131              	 .cfi_restore 4
 1132              	 .cfi_def_cfa_offset 0
 1133 001a 7047     	 bx lr
 1134              	 .cfi_endproc
 1135              	.LFE208:
 1137              	 .section .text.XMC_DMA_CH_DisableSourceGather,"ax",%progbits
 1138              	 .align 2
 1139              	 .global XMC_DMA_CH_DisableSourceGather
 1140              	 .thumb
 1141              	 .thumb_func
 1143              	XMC_DMA_CH_DisableSourceGather:
 1144              	.LFB209:
 552:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 553:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Disable source gather */
 554:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_CH_DisableSourceGather(XMC_DMA_t *const dma, const uint8_t channel)
 555:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 1145              	 .loc 1 555 0
 1146              	 .cfi_startproc
 1147              	 
 1148              	 
 1149              	 
 1150              	.LVL107:
 556:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 1151              	 .loc 1 556 0
 1152 0000 5823     	 movs r3,#88
 1153 0002 03FB0101 	 mla r1,r3,r1,r0
 1154              	.LVL108:
 1155 0006 8B69     	 ldr r3,[r1,#24]
 1156 0008 23F40033 	 bic r3,r3,#131072
 1157 000c 8B61     	 str r3,[r1,#24]
 1158 000e 7047     	 bx lr
 1159              	 .cfi_endproc
 1160              	.LFE209:
 1162              	 .section .text.XMC_DMA_CH_EnableDestinationScatter,"ax",%progbits
 1163              	 .align 2
 1164              	 .global XMC_DMA_CH_EnableDestinationScatter
 1165              	 .thumb
 1166              	 .thumb_func
 1168              	XMC_DMA_CH_EnableDestinationScatter:
 1169              	.LFB210:
 557:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 558:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 559:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Enable destination scatter */
 560:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_CH_EnableDestinationScatter(XMC_DMA_t *const dma, const uint8_t channel, uint32_t inte
 561:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 1170              	 .loc 1 561 0
 1171              	 .cfi_startproc
 1172              	 
 1173              	 
 1174              	 
 1175              	.LVL109:
 1176 0000 10B4     	 push {r4}
 1177              	.LCFI17:
 1178              	 .cfi_def_cfa_offset 4
 1179              	 .cfi_offset 4,-4
 562:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 1180              	 .loc 1 562 0
 1181 0002 5824     	 movs r4,#88
 1182 0004 04FB0101 	 mla r1,r4,r1,r0
 1183              	.LVL110:
 1184 0008 8869     	 ldr r0,[r1,#24]
 1185              	.LVL111:
 1186 000a 40F48020 	 orr r0,r0,#262144
 1187 000e 8861     	 str r0,[r1,#24]
 563:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   dma->CH[channel].DSR = ((uint32_t)interval << GPDMA0_CH_DSR_DSI_Pos) | ((uint32_t)count << GPDMA0
 1188              	 .loc 1 563 0
 1189 0010 42EA0353 	 orr r3,r2,r3,lsl#20
 1190              	.LVL112:
 1191 0014 0B65     	 str r3,[r1,#80]
 564:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 1192              	 .loc 1 564 0
 1193 0016 5DF8044B 	 ldr r4,[sp],#4
 1194              	.LCFI18:
 1195              	 .cfi_restore 4
 1196              	 .cfi_def_cfa_offset 0
 1197 001a 7047     	 bx lr
 1198              	 .cfi_endproc
 1199              	.LFE210:
 1201              	 .section .text.XMC_DMA_CH_DisableDestinationScatter,"ax",%progbits
 1202              	 .align 2
 1203              	 .global XMC_DMA_CH_DisableDestinationScatter
 1204              	 .thumb
 1205              	 .thumb_func
 1207              	XMC_DMA_CH_DisableDestinationScatter:
 1208              	.LFB211:
 565:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 566:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Disable destination scatter */
 567:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_CH_DisableDestinationScatter(XMC_DMA_t *const dma, const uint8_t channel)
 568:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 1209              	 .loc 1 568 0
 1210              	 .cfi_startproc
 1211              	 
 1212              	 
 1213              	 
 1214              	.LVL113:
 569:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 1215              	 .loc 1 569 0
 1216 0000 5823     	 movs r3,#88
 1217 0002 03FB0101 	 mla r1,r3,r1,r0
 1218              	.LVL114:
 1219 0006 8B69     	 ldr r3,[r1,#24]
 1220 0008 23F48023 	 bic r3,r3,#262144
 1221 000c 8B61     	 str r3,[r1,#24]
 1222 000e 7047     	 bx lr
 1223              	 .cfi_endproc
 1224              	.LFE211:
 1226              	 .section .text.XMC_DMA_CH_TriggerSourceRequest,"ax",%progbits
 1227              	 .align 2
 1228              	 .global XMC_DMA_CH_TriggerSourceRequest
 1229              	 .thumb
 1230              	 .thumb_func
 1232              	XMC_DMA_CH_TriggerSourceRequest:
 1233              	.LFB212:
 570:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 571:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 572:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Trigger source request */
 573:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_CH_TriggerSourceRequest(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_
 574:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 1234              	 .loc 1 574 0
 1235              	 .cfi_startproc
 1236              	 
 1237              	 
 1238              	 
 1239              	.LVL115:
 575:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   if ((uint32_t)type == (uint32_t)XMC_DMA_CH_TRANSACTION_TYPE_SINGLE)
 1240              	 .loc 1 575 0
 1241 0000 22B9     	 cbnz r2,.L106
 576:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {  
 577:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     dma->SGLREQSRCREG = ((uint32_t)0x101UL << channel);
 1242              	 .loc 1 577 0
 1243 0002 40F20112 	 movw r2,#257
 1244              	.LVL116:
 1245 0006 8A40     	 lsls r2,r2,r1
 1246 0008 C0F87823 	 str r2,[r0,#888]
 1247              	.L106:
 578:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 579:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 580:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   if (last == true)
 1248              	 .loc 1 580 0
 1249 000c 23B1     	 cbz r3,.L107
 581:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 582:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   dma->LSTSRCREG = (uint32_t)0x101UL << channel;
 1250              	 .loc 1 582 0
 1251 000e 40F20113 	 movw r3,#257
 1252              	.LVL117:
 1253 0012 8B40     	 lsls r3,r3,r1
 1254 0014 C0F88833 	 str r3,[r0,#904]
 1255              	.L107:
 583:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 584:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   
 585:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   dma->REQSRCREG = (uint32_t)0x101UL << channel;
 1256              	 .loc 1 585 0
 1257 0018 40F20113 	 movw r3,#257
 1258 001c 8B40     	 lsls r3,r3,r1
 1259 001e C0F86833 	 str r3,[r0,#872]
 1260 0022 7047     	 bx lr
 1261              	 .cfi_endproc
 1262              	.LFE212:
 1264              	 .section .text.XMC_DMA_CH_TriggerDestinationRequest,"ax",%progbits
 1265              	 .align 2
 1266              	 .global XMC_DMA_CH_TriggerDestinationRequest
 1267              	 .thumb
 1268              	 .thumb_func
 1270              	XMC_DMA_CH_TriggerDestinationRequest:
 1271              	.LFB213:
 586:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 587:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 588:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Trigger destination request */
 589:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_CH_TriggerDestinationRequest(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DM
 590:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 1272              	 .loc 1 590 0
 1273              	 .cfi_startproc
 1274              	 
 1275              	 
 1276              	 
 1277              	.LVL118:
 591:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   if(type == XMC_DMA_CH_TRANSACTION_TYPE_SINGLE)
 1278              	 .loc 1 591 0
 1279 0000 22B9     	 cbnz r2,.L109
 592:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {  
 593:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     dma->SGLREQDSTREG = (uint32_t)0x101UL << channel;
 1280              	 .loc 1 593 0
 1281 0002 40F20112 	 movw r2,#257
 1282              	.LVL119:
 1283 0006 8A40     	 lsls r2,r2,r1
 1284 0008 C0F88023 	 str r2,[r0,#896]
 1285              	.L109:
 594:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 595:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 596:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   if (last == true)
 1286              	 .loc 1 596 0
 1287 000c 23B1     	 cbz r3,.L110
 597:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 598:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     dma->LSTDSTREG = (uint32_t)0x101UL << channel;
 1288              	 .loc 1 598 0
 1289 000e 40F20113 	 movw r3,#257
 1290              	.LVL120:
 1291 0012 8B40     	 lsls r3,r3,r1
 1292 0014 C0F89033 	 str r3,[r0,#912]
 1293              	.L110:
 599:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 600:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 601:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   dma->REQDSTREG = (uint32_t)0x101UL << channel;
 1294              	 .loc 1 601 0
 1295 0018 40F20113 	 movw r3,#257
 1296 001c 8B40     	 lsls r3,r3,r1
 1297 001e C0F87033 	 str r3,[r0,#880]
 1298 0022 7047     	 bx lr
 1299              	 .cfi_endproc
 1300              	.LFE213:
 1302              	 .section .text.XMC_DMA_CH_EnableSourceAddressReload,"ax",%progbits
 1303              	 .align 2
 1304              	 .global XMC_DMA_CH_EnableSourceAddressReload
 1305              	 .thumb
 1306              	 .thumb_func
 1308              	XMC_DMA_CH_EnableSourceAddressReload:
 1309              	.LFB214:
 602:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 603:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 604:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Enable source address reload */
 605:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_CH_EnableSourceAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 606:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 1310              	 .loc 1 606 0
 1311              	 .cfi_startproc
 1312              	 
 1313              	 
 1314              	 
 1315              	.LVL121:
 607:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 1316              	 .loc 1 607 0
 1317 0000 5823     	 movs r3,#88
 1318 0002 03FB0101 	 mla r1,r3,r1,r0
 1319              	.LVL122:
 1320 0006 0B6C     	 ldr r3,[r1,#64]
 1321 0008 43F08043 	 orr r3,r3,#1073741824
 1322 000c 0B64     	 str r3,[r1,#64]
 1323 000e 7047     	 bx lr
 1324              	 .cfi_endproc
 1325              	.LFE214:
 1327              	 .section .text.XMC_DMA_CH_DisableSourceAddressReload,"ax",%progbits
 1328              	 .align 2
 1329              	 .global XMC_DMA_CH_DisableSourceAddressReload
 1330              	 .thumb
 1331              	 .thumb_func
 1333              	XMC_DMA_CH_DisableSourceAddressReload:
 1334              	.LFB215:
 608:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 609:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 610:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Disable source address reload */
 611:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_CH_DisableSourceAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 612:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 1335              	 .loc 1 612 0
 1336              	 .cfi_startproc
 1337              	 
 1338              	 
 1339              	 
 1340              	.LVL123:
 613:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 1341              	 .loc 1 613 0
 1342 0000 5823     	 movs r3,#88
 1343 0002 03FB0101 	 mla r1,r3,r1,r0
 1344              	.LVL124:
 1345 0006 0B6C     	 ldr r3,[r1,#64]
 1346 0008 23F08043 	 bic r3,r3,#1073741824
 1347 000c 0B64     	 str r3,[r1,#64]
 1348 000e 7047     	 bx lr
 1349              	 .cfi_endproc
 1350              	.LFE215:
 1352              	 .section .text.XMC_DMA_CH_EnableDestinationAddressReload,"ax",%progbits
 1353              	 .align 2
 1354              	 .global XMC_DMA_CH_EnableDestinationAddressReload
 1355              	 .thumb
 1356              	 .thumb_func
 1358              	XMC_DMA_CH_EnableDestinationAddressReload:
 1359              	.LFB216:
 614:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 615:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 616:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Enable destination address reload */
 617:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_CH_EnableDestinationAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 618:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 1360              	 .loc 1 618 0
 1361              	 .cfi_startproc
 1362              	 
 1363              	 
 1364              	 
 1365              	.LVL125:
 619:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 1366              	 .loc 1 619 0
 1367 0000 5823     	 movs r3,#88
 1368 0002 03FB0101 	 mla r1,r3,r1,r0
 1369              	.LVL126:
 1370 0006 0B6C     	 ldr r3,[r1,#64]
 1371 0008 43F00043 	 orr r3,r3,#-2147483648
 1372 000c 0B64     	 str r3,[r1,#64]
 1373 000e 7047     	 bx lr
 1374              	 .cfi_endproc
 1375              	.LFE216:
 1377              	 .section .text.XMC_DMA_CH_DisableDestinationAddressReload,"ax",%progbits
 1378              	 .align 2
 1379              	 .global XMC_DMA_CH_DisableDestinationAddressReload
 1380              	 .thumb
 1381              	 .thumb_func
 1383              	XMC_DMA_CH_DisableDestinationAddressReload:
 1384              	.LFB217:
 620:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 621:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 622:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Disable destination address reload */
 623:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_CH_DisableDestinationAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 624:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 1385              	 .loc 1 624 0
 1386              	 .cfi_startproc
 1387              	 
 1388              	 
 1389              	 
 1390              	.LVL127:
 625:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 1391              	 .loc 1 625 0
 1392 0000 5823     	 movs r3,#88
 1393 0002 03FB0101 	 mla r1,r3,r1,r0
 1394              	.LVL128:
 1395 0006 0B6C     	 ldr r3,[r1,#64]
 1396 0008 23F00043 	 bic r3,r3,#-2147483648
 1397 000c 0B64     	 str r3,[r1,#64]
 1398 000e 7047     	 bx lr
 1399              	 .cfi_endproc
 1400              	.LFE217:
 1402              	 .section .text.XMC_DMA_CH_RequestLastMultiblockTransfer,"ax",%progbits
 1403              	 .align 2
 1404              	 .global XMC_DMA_CH_RequestLastMultiblockTransfer
 1405              	 .thumb
 1406              	 .thumb_func
 1408              	XMC_DMA_CH_RequestLastMultiblockTransfer:
 1409              	.LFB218:
 626:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 627:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 628:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Request last multi-block transfer */
 629:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_CH_RequestLastMultiblockTransfer(XMC_DMA_t *const dma, const uint8_t channel)
 630:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 1410              	 .loc 1 630 0
 1411              	 .cfi_startproc
 1412              	 
 1413              	 
 1414              	 
 1415              	.LVL129:
 631:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~(GPDMA0_CH_CFGL_RELOAD_SRC_Msk | GPDMA0_CH_CFGL_RELOAD_DST_Ms
 1416              	 .loc 1 631 0
 1417 0000 5823     	 movs r3,#88
 1418 0002 03FB0101 	 mla r1,r3,r1,r0
 1419              	.LVL130:
 1420 0006 0B6C     	 ldr r3,[r1,#64]
 1421 0008 23F04043 	 bic r3,r3,#-1073741824
 1422 000c 0B64     	 str r3,[r1,#64]
 632:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~(GPDMA0_CH_CTLL_LLP_SRC_EN_Msk | GPDMA0_CH_CTLL_LLP_DST_EN_Ms
 1423              	 .loc 1 632 0
 1424 000e 8B69     	 ldr r3,[r1,#24]
 1425 0010 23F0C053 	 bic r3,r3,#402653184
 1426 0014 8B61     	 str r3,[r1,#24]
 1427 0016 7047     	 bx lr
 1428              	 .cfi_endproc
 1429              	.LFE218:
 1431              	 .section .text.XMC_DMA_CH_SetEventHandler,"ax",%progbits
 1432              	 .align 2
 1433              	 .global XMC_DMA_CH_SetEventHandler
 1434              	 .thumb
 1435              	 .thumb_func
 1437              	XMC_DMA_CH_SetEventHandler:
 1438              	.LFB219:
 633:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 634:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 635:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Set event handler */
 636:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_CH_SetEventHandler(XMC_DMA_t *const dma, const uint8_t channel, XMC_DMA_CH_EVENT_HANDL
 637:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 1439              	 .loc 1 637 0
 1440              	 .cfi_startproc
 1441              	 
 1442              	 
 1443              	 
 1444              	.LVL131:
 638:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 639:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   if (dma == XMC_DMA0)
 1445              	 .loc 1 639 0
 1446 0000 034B     	 ldr r3,.L119
 1447 0002 9842     	 cmp r0,r3
 640:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 641:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #else
 642:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 643:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 644:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     dma0_event_handlers[channel] = event_handler;
 1448              	 .loc 1 644 0
 1449 0004 0CBF     	 ite eq
 1450 0006 034B     	 ldreq r3,.L119+4
 645:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 646:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 647:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   else
 648:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 649:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     dma1_event_handlers[channel] = event_handler;
 1451              	 .loc 1 649 0
 1452 0008 034B     	 ldrne r3,.L119+8
 1453 000a 43F82120 	 str r2,[r3,r1,lsl#2]
 1454 000e 7047     	 bx lr
 1455              	.L120:
 1456              	 .align 2
 1457              	.L119:
 1458 0010 00400150 	 .word 1342259200
 1459 0014 00000000 	 .word .LANCHOR0
 1460 0018 00000000 	 .word .LANCHOR1
 1461              	 .cfi_endproc
 1462              	.LFE219:
 1464              	 .section .text.XMC_DMA_CH_ClearSourcePeripheralRequest,"ax",%progbits
 1465              	 .align 2
 1466              	 .global XMC_DMA_CH_ClearSourcePeripheralRequest
 1467              	 .thumb
 1468              	 .thumb_func
 1470              	XMC_DMA_CH_ClearSourcePeripheralRequest:
 1471              	.LFB220:
 650:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 651:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 652:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 653:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 654:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_CH_ClearSourcePeripheralRequest(XMC_DMA_t *const dma, uint8_t channel)
 655:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 1472              	 .loc 1 655 0
 1473              	 .cfi_startproc
 1474              	 
 1475              	 
 1476              	.LVL132:
 1477 0000 08B5     	 push {r3,lr}
 1478              	.LCFI19:
 1479              	 .cfi_def_cfa_offset 8
 1480              	 .cfi_offset 3,-8
 1481              	 .cfi_offset 14,-4
 656:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   uint32_t line;
 657:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   line = (dma->CH[channel].CFGH & GPDMA0_CH_CFGH_SRC_PER_Msk) >> GPDMA0_CH_CFGH_SRC_PER_Pos;
 1482              	 .loc 1 657 0
 1483 0002 5823     	 movs r3,#88
 1484 0004 03FB0101 	 mla r1,r3,r1,r0
 1485              	.LVL133:
 1486 0008 4031     	 adds r1,r1,#64
 1487 000a 4968     	 ldr r1,[r1,#4]
 1488              	.LVL134:
 658:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 659:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
 1489              	 .loc 1 659 0
 1490 000c C1F3C311 	 ubfx r1,r1,#7,#4
 1491              	.LVL135:
 1492 0010 FFF7FEFF 	 bl XMC_DMA_ClearRequestLine
 1493              	.LVL136:
 1494 0014 08BD     	 pop {r3,pc}
 1495              	 .cfi_endproc
 1496              	.LFE220:
 1498 0016 00BF     	 .section .text.XMC_DMA_CH_ClearDestinationPeripheralRequest,"ax",%progbits
 1499              	 .align 2
 1500              	 .global XMC_DMA_CH_ClearDestinationPeripheralRequest
 1501              	 .thumb
 1502              	 .thumb_func
 1504              	XMC_DMA_CH_ClearDestinationPeripheralRequest:
 1505              	.LFB221:
 660:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 661:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 662:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_CH_ClearDestinationPeripheralRequest(XMC_DMA_t *const dma, uint8_t channel)
 663:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 1506              	 .loc 1 663 0
 1507              	 .cfi_startproc
 1508              	 
 1509              	 
 1510              	.LVL137:
 1511 0000 08B5     	 push {r3,lr}
 1512              	.LCFI20:
 1513              	 .cfi_def_cfa_offset 8
 1514              	 .cfi_offset 3,-8
 1515              	 .cfi_offset 14,-4
 664:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   uint32_t line;
 665:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   line = (dma->CH[channel].CFGH & GPDMA0_CH_CFGH_DEST_PER_Msk) >> GPDMA0_CH_CFGH_DEST_PER_Pos;
 1516              	 .loc 1 665 0
 1517 0002 5823     	 movs r3,#88
 1518 0004 03FB0101 	 mla r1,r3,r1,r0
 1519              	.LVL138:
 1520 0008 4031     	 adds r1,r1,#64
 1521 000a 4968     	 ldr r1,[r1,#4]
 1522              	.LVL139:
 666:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 667:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
 1523              	 .loc 1 667 0
 1524 000c C1F3C321 	 ubfx r1,r1,#11,#4
 1525              	.LVL140:
 1526 0010 FFF7FEFF 	 bl XMC_DMA_ClearRequestLine
 1527              	.LVL141:
 1528 0014 08BD     	 pop {r3,pc}
 1529              	 .cfi_endproc
 1530              	.LFE221:
 1532 0016 00BF     	 .section .text.XMC_DMA_IRQHandler,"ax",%progbits
 1533              	 .align 2
 1534              	 .global XMC_DMA_IRQHandler
 1535              	 .thumb
 1536              	 .thumb_func
 1538              	XMC_DMA_IRQHandler:
 1539              	.LFB222:
 668:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** }
 669:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 670:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** /* Default DMA IRQ handler */
 671:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** void XMC_DMA_IRQHandler(XMC_DMA_t *const dma)
 672:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** {
 1540              	 .loc 1 672 0
 1541              	 .cfi_startproc
 1542              	 
 1543              	 
 1544              	.LVL142:
 1545 0000 38B5     	 push {r3,r4,r5,lr}
 1546              	.LCFI21:
 1547              	 .cfi_def_cfa_offset 16
 1548              	 .cfi_offset 3,-16
 1549              	 .cfi_offset 4,-12
 1550              	 .cfi_offset 5,-8
 1551              	 .cfi_offset 14,-4
 673:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   uint32_t event;
 674:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   int32_t channel;
 675:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   uint32_t mask;
 676:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   XMC_DMA_CH_EVENT_HANDLER_t *dma_event_handlers;
 677:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   XMC_DMA_CH_EVENT_HANDLER_t event_handler;
 678:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 679:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 680:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   if (dma == XMC_DMA0)
 681:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 682:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 683:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     dma_event_handlers = dma0_event_handlers;
 684:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #if defined(GPDMA1)
 685:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 686:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   else
 687:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 688:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     dma_event_handlers = dma1_event_handlers;
 1552              	 .loc 1 688 0
 1553 0002 514B     	 ldr r3,.L154
 1554 0004 514A     	 ldr r2,.L154+4
 1555 0006 524D     	 ldr r5,.L154+8
 1556 0008 A842     	 cmp r0,r5
 1557 000a 0CBF     	 ite eq
 1558 000c 1546     	 moveq r5,r2
 1559 000e 1D46     	 movne r5,r3
 1560              	.LVL143:
 1561              	.LBB18:
 1562              	.LBB19:
 1563              	 .file 2 "C:/Files/Projects/Git/XMCLib/inc/xmc_dma.h"
   1:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
   2:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @file xmc_dma.h
   3:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @date 2018-09-18
   4:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
   5:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @cond
   6:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  **************************************************************************************************
   7:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * XMClib v2.1.24 - XMC Peripheral Driver Library
   8:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
   9:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * All rights reserved.                        
  11:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *                                             
  12:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * following conditions are met:   
  14:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *                                                                              
  15:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * disclaimer.                        
  17:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * 
  18:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * 
  21:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *                                                                              
  24:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *                                                                              
  32:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  **************************************************************************************************
  35:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
  36:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Change History
  37:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * --------------
  38:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
  39:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * 2015-02-20:
  40:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *     - Initial <br>
  41:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
  42:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * 2015-06-20:
  43:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *     - Add the declarations for the following APIs: <br>
  44:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_DisableRequestLine, XMC_DMA_ClearRequestLine, <br>
  45:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_CH_ClearSourcePeripheralRequest, <br>
  46:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_CH_ClearDestinationPeripheralRequest <br>
  47:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *     - Documentation updates <br>
  48:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  49:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
  50:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * 2016-10-28:
  51:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *     - Fix documentation on maximum block size
  52:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
  53:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * 2017-09-28:
  54:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *     - Improved documentation and added XMC_DMA_CH_EnableFifo() and XMC_DMA_CH_DisableFifo()
  55:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
  56:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * 2018-09-18:
  57:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *     - Added XMC_DMA_CH_GetTransferredData()
  58:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
  59:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @endcond
  60:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
  61:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
  62:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** #ifndef XMC_DMA_H
  63:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** #define XMC_DMA_H
  64:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
  65:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
  66:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * HEADER FILES
  67:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
  68:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
  69:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** #include "xmc_common.h"
  70:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
  71:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA0)
  72:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
  73:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** #include "xmc_dma_map.h"
  74:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
  75:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
  76:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @addtogroup XMClib XMC Peripheral Library
  77:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @{
  78:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
  79:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
  80:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
  81:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @addtogroup DMA
  82:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @brief General purpose DMA (GPDMA) driver for the XMC4000 microcontroller family
  83:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
  84:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * The GPDMA is a highly configurable DMA controller that allows high-speed data transfers
  85:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * between peripherals and memories. Complex data transfers can be done with minimal
  86:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * intervention of the processor, making CPU available for other operations.
  87:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
  88:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * GPDMA provides extensive support for XMC microcontroller peripherals like A/D, D/A
  89:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * converters and timers. Data transfers through communication interfaces (USIC) using the
  90:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * GPDMA increase efficiency and parallelism for real-time applications.
  91:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
  92:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * The DMA low level driver provides functions to configure and initialize the GPDMA
  93:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * hardware peripheral.
  94:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @{
  95:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
  96:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
  97:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
  98:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * MACROS
  99:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 100:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 101:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA0)
 102:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** #define XMC_DMA0 ((XMC_DMA_t *)GPDMA0_CH0_BASE) /**< DMA module 0 */
 103:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** #define XMC_DMA0_NUM_CHANNELS 8
 104:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** #endif
 105:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 106:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA1)
 107:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** #define XMC_DMA1 ((XMC_DMA_t *)GPDMA1_CH0_BASE) /**< DMA module 1, only available in XMC45xx series
 108:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** #define XMC_DMA1_NUM_CHANNELS 4
 109:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** #endif
 110:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 111:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 112:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * ENUMS
 113:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 114:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 115:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 116:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * DMA transfer types
 117:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 118:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_TYPE
 119:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** {
 120:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK,                                /**< Single block */
 121:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD, /**< Multi-block: src addre
 122:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS, /**< Multi-block: src addre
 123:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD,     /**< Multi-block: src addre
 124:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED, /**< Multi-block: src addre
 125:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED,     /**< Multi-block: src addre
 126:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS, /**< Multi-block: src addre
 127:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD,     /**< Multi-block: src addre
 128:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED      /**< Multi-block: src addre
 129:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_TYPE_t;
 130:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 131:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 132:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * DMA transfer flow modes
 133:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 134:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_FLOW
 135:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** {
 136:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2M_DMA    = 0x0UL, /**< Memory to memory (DMA flow controller) */
 137:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA    = 0x1UL, /**< Memory to peripheral (DMA flow controller) */
 138:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA    = 0x2UL, /**< Peripheral to memory (DMA flow controller) */
 139:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA    = 0x3UL, /**< Peripheral to peripheral (DMA flow controller) 
 140:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2M_PER    = 0x4UL, /**< Peripheral to memory (Peripheral flow controlle
 141:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_SRCPER = 0x5UL, /**< Peripheral to peripheral (Source peripheral flo
 142:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2P_PER    = 0x6UL, /**< Memory to peripheral (Peripheral flow controlle
 143:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_DSTPER = 0x7UL  /**< Peripheral to peripheral (Destination periphera
 144:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_FLOW_t;
 145:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 146:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 147:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Valid burst length values
 148:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 149:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_BURST_LENGTH
 150:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** {
 151:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_1 = 0x0UL, /**< Burst length: 1 word */
 152:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_4 = 0x1UL, /**< Burst length: 4 words */
 153:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_8 = 0x2UL  /**< Burst length: 8 words */
 154:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_BURST_LENGTH_t;
 155:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 156:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 157:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Valid transfer width values
 158:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 159:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_WIDTH
 160:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** {
 161:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_8  = 0x0UL, /**< 8-bit transfer width */
 162:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_16 = 0x1UL, /**< 16-bit transfer width */
 163:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_32 = 0x2UL  /**< 32-bit transfer width */
 164:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_WIDTH_t;
 165:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 166:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 167:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * DMA address count mode
 168:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 169:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_ADDRESS_COUNT_MODE
 170:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** {
 171:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_INCREMENT = 0x0UL, /**< Address count mode: increment */
 172:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_DECREMENT = 0x1UL, /**< Address count mode: decrement */
 173:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CHANGE = 0x2UL  /**< Address count mode: no change */
 174:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_ADDRESS_COUNT_MODE_t;
 175:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 176:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 177:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * DMA channel priorities
 178:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 179:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_PRIORITY
 180:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** {
 181:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_0 = 0x0UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 0 (low) *
 182:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_1 = 0x1UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 1 */
 183:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_2 = 0x2UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 2 */
 184:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_3 = 0x3UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 3 */
 185:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_4 = 0x4UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 4 */
 186:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_5 = 0x5UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 5 */
 187:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_6 = 0x6UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 6 */
 188:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_7 = 0x7UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos  /**< DMA channel priority 7 (high) 
 189:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_PRIORITY_t;
 190:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 191:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 192:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Source handshake interface
 193:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 194:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_SRC_HANDSHAKING
 195:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** {
 196:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE = 0x0UL << GPDMA0_CH_CFGL_HS_SEL_SRC_Pos, /**< Source: hardwa
 197:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_SOFTWARE = 0x1UL << GPDMA0_CH_CFGL_HS_SEL_SRC_Pos  /**< Source: softwa
 198:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_SRC_HANDSHAKING_t;
 199:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 200:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 201:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Destination handshake interface
 202:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 203:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_DST_HANDSHAKING
 204:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** {
 205:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_HARDWARE = 0x0UL << GPDMA0_CH_CFGL_HS_SEL_DST_Pos, /**< Destination: h
 206:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_SOFTWARE = 0x1UL << GPDMA0_CH_CFGL_HS_SEL_DST_Pos  /**< Destination: s
 207:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_DST_HANDSHAKING_t;
 208:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 209:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 210:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * DMA hardware handshaking interface
 211:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Hardware handshaking available only if DMA is flow controller
 212:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 213:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_HARDWARE_HANDSHAKING_IF
 214:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** {
 215:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_0 = 0x0UL, /**< Hardware handshaking interface 0 */
 216:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_1 = 0x1UL, /**< Hardware handshaking interface 1 */
 217:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_2 = 0x2UL, /**< Hardware handshaking interface 2 */
 218:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_3 = 0x3UL, /**< Hardware handshaking interface 3 */
 219:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_4 = 0x4UL, /**< Hardware handshaking interface 4 */
 220:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_5 = 0x5UL, /**< Hardware handshaking interface 5 */
 221:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_6 = 0x6UL, /**< Hardware handshaking interface 6 */
 222:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_7 = 0x7UL  /**< Hardware handshaking interface 7 */
 223:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_t;
 224:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 225:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 226:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * DMA events
 227:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 228:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_EVENT
 229:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** {
 230:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_TRANSFER_COMPLETE        = 0x1UL, /**< Transfer complete event */
 231:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE  = 0x2UL, /**< Block transfer complete event */
 232:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE = 0x4UL, /**< Source transaction complete event */
 233:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE = 0x8UL, /**< Destination transaction complete event */
 234:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_ERROR                    = 0x10UL /**< DMA error event */
 235:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_EVENT_t;
 236:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 237:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 238:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Transaction types
 239:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 240:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSACTION_TYPE
 241:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** {
 242:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSACTION_TYPE_SINGLE, /**< Single DMA transaction */
 243:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSACTION_TYPE_BURST   /**< Burst transaction */
 244:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSACTION_TYPE_t;
 245:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 246:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 247:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * DMA channel status values
 248:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 249:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_STATUS
 250:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** {
 251:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_OK,    /**< DMA status OK */
 252:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_ERROR, /**< DMA status error */
 253:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_BUSY   /**< DMA is busy */
 254:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_STATUS_t;
 255:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 256:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 257:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * DATA STRUCTURES
 258:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 259:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 260:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 261:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * DMA channel configuration structure <br>
 262:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 263:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * The structure represents a collection of all hardware registers used
 264:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * to configure the DMA channel. It is contained within the ::XMC_DMA_t
 265:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * structure. It's registers can be used to configure DMA transfer details
 266:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * like source address, destination address, block size, incrementation
 267:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * modes and the like.
 268:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 269:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  
 270:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** typedef struct {
 271:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SAR;
 272:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED0;
 273:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DAR;
 274:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED1;
 275:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LLP;
 276:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED2;
 277:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CTLL;
 278:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CTLH;
 279:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SSTAT;
 280:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED3;
 281:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSTAT;
 282:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED4;
 283:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SSTATAR;
 284:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED5;
 285:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSTATAR;
 286:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED6;
 287:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CFGL;
 288:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CFGH;
 289:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGR;
 290:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED7;
 291:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSR;
 292:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED8;
 293:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** } GPDMA_CH_t;
 294:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 295:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 296:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * DMA device structure <br>
 297:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 298:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * The structure represents a collection of all hardware registers used
 299:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * to configure the GPDMA peripheral on the XMC4000 series of microcontrollers.
 300:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * The registers can be accessed with ::XMC_DMA0 and ::XMC_DMA1.
 301:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 302:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** typedef struct {
 303:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   GPDMA_CH_t CH[8];
 304:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 305:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  RAWCHEV[10];
 306:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  STATUSCHEV[10];
 307:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  MASKCHEV[10];
 308:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __O  uint32_t  CLEARCHEV[10];
 309:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  STATUSGLEV;
 310:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED20;
 311:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  REQSRCREG;
 312:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED21;
 313:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  REQDSTREG;
 314:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED22;
 315:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGLREQSRCREG;
 316:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED23;
 317:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGLREQDSTREG;
 318:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED24;
 319:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LSTSRCREG;
 320:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED25;
 321:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LSTDSTREG;
 322:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED26;
 323:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DMACFGREG;
 324:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED27;
 325:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CHENREG;
 326:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED28;
 327:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  ID;
 328:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED29[19];
 329:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  TYPE;
 330:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  VERSION;
 331:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** } XMC_DMA_t;
 332:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 333:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /* Anonymous structure/union guard start */
 334:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** #if defined (__CC_ARM)
 335:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   #pragma push
 336:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   #pragma anon_unions
 337:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** #elif defined (__TASKING__)
 338:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   #pragma warning 586
 339:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** #endif
 340:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 341:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 342:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * DMA channel linked list item.
 343:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Note: Needs to be word aligned
 344:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 345:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** typedef struct XMC_DMA_LLI
 346:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** {
 347:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   uint32_t src_addr;                            /**< Source address */
 348:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   uint32_t dst_addr;                            /**< Destination address */
 349:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   struct XMC_DMA_LLI *llp;                      /**< Linked list pointer of type XMC_DMA_LLI_t */
 350:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   union
 351:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   {
 352:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****     struct
 353:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****     {
 354:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t enable_interrupt: 1;             /**< Enable interrupts? */
 355:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t dst_transfer_width: 3;           /**< Destination transfer width (:: XMC_DMA_CH_TRAN
 356:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t src_transfer_width: 3;           /**< Source transfer width (:: XMC_DMA_CH_TRANSFER_
 357:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t dst_address_count_mode: 2;       /**< Destination address count mode (:: XMC_DMA_CH_
 358:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t src_address_count_mode: 2;       /**< Source address count mode (:: XMC_DMA_CH_ADDRE
 359:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t dst_burst_length: 3;             /**< Destination burst length (:: XMC_DMA_CH_BURST_
 360:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t src_burst_length: 3;             /**< Source burst length (:: XMC_DMA_CH_BURST_LENGT
 361:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_gather: 1;            /**< Enable source gather? */
 362:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_scatter: 1;           /**< Enable destination scatter? */
 363:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t : 1;                             /**< Reserved bits */
 364:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t transfer_flow: 3;                /**< DMA transfer flow (:: XMC_DMA_CH_TRANSFER_FLOW
 365:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t : 4;                             /**< Reserved bits */
 366:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_linked_list: 1;       /**< Enable destination linked list? */
 367:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_linked_list: 1;       /**< Enable source linked list? */
 368:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t : 3;                             /**< Reserved bits */
 369:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****     };
 370:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****     uint32_t control;
 371:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   };
 372:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   uint32_t block_size;                          /**< Transfer block size */
 373:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   uint32_t src_status;                          /**< Source status */
 374:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   uint32_t dst_status;                          /**< Destination status */
 375:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** } XMC_DMA_LLI_t;
 376:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 377:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** typedef XMC_DMA_LLI_t **XMC_DMA_LIST_t;         /**< Type definition for a linked list pointer */
 378:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 379:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 380:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * DMA channel configuration structure
 381:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 382:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** typedef struct XMC_DMA_CH_CONFIG
 383:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** {
 384:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   union
 385:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   {
 386:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****     uint32_t control;
 387:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****     struct
 388:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****     {
 389:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t enable_interrupt: 1;             /**< Enable interrupts? */
 390:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t dst_transfer_width: 3;           /**< Destination transfer width (:: XMC_DMA_CH_TRAN
 391:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t src_transfer_width: 3;           /**< Source transfer width (:: XMC_DMA_CH_TRANSFER_
 392:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t dst_address_count_mode: 2;       /**< Destination address count mode (:: XMC_DMA_CH_
 393:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t src_address_count_mode: 2;       /**< Source address count mode (:: XMC_DMA_CH_ADDRE
 394:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t dst_burst_length: 3;             /**< Destination burst length (:: XMC_DMA_CH_BURST_
 395:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t src_burst_length: 3;             /**< Source burst length (:: XMC_DMA_CH_BURST_LENGT
 396:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_gather: 1;            /**< Enable source gather? */
 397:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_scatter: 1;           /**< Enable destination scatter? */
 398:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t : 1;                             
 399:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t transfer_flow: 3;                /**< DMA transfer flow (:: XMC_DMA_CH_TRANSFER_FLOW
 400:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t : 9;                             
 401:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****     };
 402:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   };
 403:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 404:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   uint32_t src_addr;                            /**< Source address */
 405:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   uint32_t dst_addr;                            /**< Destination address */
 406:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_LLI_t *linked_list_pointer;           /**< Linked list pointer */
 407:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   
 408:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   union
 409:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   {
 410:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****     uint32_t src_gather_control;
 411:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****     struct
 412:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****     {
 413:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t src_gather_interval: 20;         /**< Source gather interval */
 414:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t src_gather_count: 12;            /**< Source gather count */
 415:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****     };
 416:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   };
 417:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 418:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   union
 419:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   {
 420:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****     uint32_t dst_scatter_control;
 421:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****     struct
 422:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****     {
 423:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t dst_scatter_interval: 20;        /**< Destination scatter interval */
 424:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****       uint32_t dst_scatter_count: 12;           /**< Destination scatter count */
 425:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****     };
 426:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   };
 427:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   
 428:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   uint16_t block_size;                          /**< Block size for DMA controlled transfers [max. 
 429:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_t transfer_type;     /**< DMA transfer type (:: XMC_DMA_CH_TRANSFER_TYPE
 430:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_t priority;               /**< DMA channel priority (::XMC_DMA_CH_PRIORITY_t)
 431:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_t src_handshaking; /**< DMA source handshaking interface (:: XMC_DMA_C
 432:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   uint8_t src_peripheral_request;               /**< Source peripheral request. See xmc_dma_map.h *
 433:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_t dst_handshaking; /**< DMA destination handshaking interface (:: XMC_
 434:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   uint8_t dst_peripheral_request;               /**< Destination peripheral request. See xmc_dma_ma
 435:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_CONFIG_t;
 436:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 437:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /* Anonymous structure/union guard end */
 438:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** #if defined (__CC_ARM)
 439:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   #pragma pop
 440:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** #elif defined (__TASKING__)
 441:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   #pragma warning restore
 442:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** #endif
 443:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 444:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 445:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * DMA channel event handler
 446:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 447:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** typedef void (*XMC_DMA_CH_EVENT_HANDLER_t)(XMC_DMA_CH_EVENT_t event);
 448:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 449:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 450:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * API PROTOTYPES
 451:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 452:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 453:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** #ifdef __cplusplus
 454:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** extern "C" {
 455:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** #endif
 456:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 457:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 458:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 459:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @return None
 460:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 461:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 462:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Initialize the GPDMA peripheral <br>
 463:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 464:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * \par
 465:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * The function initializes a prioritized list of DMA channels and enables the GPDMA
 466:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * peripheral.
 467:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 468:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Init(XMC_DMA_t *const dma);
 469:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 470:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 471:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 472:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @return None
 473:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 474:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 475:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Enable the GPDMA peripheral <br>
 476:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 477:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * \par
 478:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * The function de-asserts the GPDMA peripheral reset. In addition, it un-gates the
 479:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * GPDMA0 peripheral clock for all XMC4000 series of microcontrollers with an exception
 480:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * of the XMC4500 microcontroller. The XMC4500 doesn't support gating.
 481:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 482:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Enable(XMC_DMA_t *const dma);
 483:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 484:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 485:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 486:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @return None
 487:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 488:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 489:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Disable the GPDMA peripheral <br>
 490:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 491:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * \par
 492:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * The function asserts the GPDMA peripheral reset. In addition, it gates the GPDMA0
 493:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * peripheral clock for all XMC4000 series of microcontrollers with an exception of
 494:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * the XMC4500 microcontroller. The XMC4500 doesn't support gating.
 495:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 496:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Disable(XMC_DMA_t *const dma);
 497:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 498:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 499:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 500:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @return bool
 501:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 502:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 503:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Check if the GPDMA peripheral is enabled <br>
 504:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 505:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * \par
 506:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * For the XMC4500 microcontroller, the function checks if the GPDMA module is asserted
 507:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * and returns "false" if it is. In addition, it also checks if the clock is gated
 508:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * for the other XMC4000 series of microcontrollers. It returns "true" if the peripheral
 509:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * is enabled.
 510:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 511:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma);
 512:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 513:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 514:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 515:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 516:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 517:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 518:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Get DMA event status <br>
 519:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 520:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * \par
 521:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * The function returns the collective (global) status of GPDMA events. The following
 522:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * lists the various DMA events and their corresponding enumeration. The return value
 523:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * of this function may then be masked with any one of the following enumerations to
 524:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * obtain the status of individual DMA events. <br>
 525:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 526:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * \par
 527:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Transfer complete -> ::XMC_DMA_CH_EVENT_TRANSFER_COMPLETE                       <br>
 528:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Block transfer complete -> ::XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE           <br>
 529:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Source transaction complete -> ::XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE      <br>
 530:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Destination transaction complete -> ::XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE <br>
 531:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * DMA error event -> ::XMC_DMA_CH_EVENT_ERROR                                     <br>
 532:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 533:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetEventStatus(XMC_DMA_t *const dma)
 534:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** {
 535:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSGLEV);
 1564              	 .loc 2 535 0
 1565 0010 D0F86033 	 ldr r3,[r0,#864]
 1566              	.LVL144:
 1567              	.LBE19:
 1568              	.LBE18:
 689:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 690:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** #endif
 691:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   
 692:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   event = XMC_DMA_GetEventStatus(dma);
 693:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   channel = 0;
 694:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 695:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
 1569              	 .loc 1 695 0
 1570 0014 13F0100F 	 tst r3,#16
 1571 0018 1AD0     	 beq .L127
 1572              	.LVL145:
 1573              	.LBB20:
 1574              	.LBB21:
 536:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** }
 537:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 538:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 539:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 540:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA transfer complete status
 541:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 542:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 543:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Get transfer complete status <br>
 544:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 545:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * \par
 546:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * The function returns GPDMA transfer complete interrupt status. <br>
 547:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 548:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsTransferCompleteStatus(XMC_DMA_t *const dma)
 549:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** {
 550:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[0]);
 551:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** }
 552:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 553:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 554:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 555:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA block complete status
 556:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 557:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 558:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Get block transfer complete status <br>
 559:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 560:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * \par
 561:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * The function returns GPDMA block transfer complete interrupt status. <br>
 562:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 563:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsBlockCompleteStatus(XMC_DMA_t *const dma)
 564:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** {
 565:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[2]);
 566:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** }
 567:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 568:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 569:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 570:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 571:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 572:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 573:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Get source transaction complete status <br>
 574:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 575:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * \par
 576:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * The function returns the source transaction complete interrupt status. <br>
 577:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 578:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 579:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * If the source peripheral is memory, the source transaction complete interrupt is
 580:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * ignored.
 581:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 582:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsSourceTransactionCompleteStatus(XMC_DMA_t *const dma)
 583:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** {
 584:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[4]);
 585:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** }
 586:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 587:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 588:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 589:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 590:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 591:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 592:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Get destination transaction complete status <br>
 593:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 594:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * \par
 595:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * The function returns the destination transaction complete interrupt status <br>
 596:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 597:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 598:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * If the destination peripheral is memory, the destination transaction complete
 599:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * interrupt is ignored.
 600:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 601:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(XMC_DMA_t *const d
 602:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** {
 603:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[6]);
 604:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** }
 605:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** 
 606:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** /**
 607:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 608:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA error event status
 609:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 610:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 611:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * Get DMA error event status <br>
 612:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  *
 613:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * \par
 614:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  * The function returns error interrupt status. <br>
 615:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****  */
 616:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsErrorStatus(XMC_DMA_t *const dma)
 617:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** {
 618:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[8]);
 1575              	 .loc 2 618 0
 1576 001a D0F80823 	 ldr r2,[r0,#776]
 1577              	.LBE21:
 1578              	.LBE20:
 696:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 697:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     event = XMC_DMA_GetChannelsErrorStatus(dma);
 698:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     while (event != 0)
 1579              	 .loc 1 698 0
 1580 001e 002A     	 cmp r2,#0
 1581 0020 00F09180 	 beq .L125
 1582              	.LVL146:
 699:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     {
 700:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       mask = (uint32_t)1U << channel;
 701:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       if ((event & mask) != 0)
 1583              	 .loc 1 701 0
 1584 0024 12F0010F 	 tst r2,#1
 1585 0028 06D1     	 bne .L148
 1586 002a 0124     	 movs r4,#1
 700:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       if ((event & mask) != 0)
 1587              	 .loc 1 700 0
 1588 002c 2146     	 mov r1,r4
 1589              	.LVL147:
 1590              	.L142:
 1591 002e 01FA04F3 	 lsl r3,r1,r4
 1592              	 .loc 1 701 0
 1593 0032 1342     	 tst r3,r2
 1594 0034 7DD0     	 beq .L130
 1595 0036 00E0     	 b .L129
 1596              	.LVL148:
 1597              	.L148:
 693:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 1598              	 .loc 1 693 0
 1599 0038 0024     	 movs r4,#0
 1600              	.LVL149:
 1601              	.L129:
 702:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       {
 703:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_ERROR);
 1602              	 .loc 1 703 0
 1603 003a E1B2     	 uxtb r1,r4
 1604 003c 1022     	 movs r2,#16
 1605 003e FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 1606              	.LVL150:
 704:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 705:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         /* Call user callback to handle event */
 706:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 1607              	 .loc 1 706 0
 1608 0042 55F82430 	 ldr r3,[r5,r4,lsl#2]
 1609              	.LVL151:
 707:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         if (event_handler != NULL)
 1610              	 .loc 1 707 0
 1611 0046 002B     	 cmp r3,#0
 1612 0048 7DD0     	 beq .L125
 708:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         {
 709:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_ERROR);
 1613              	 .loc 1 709 0
 1614 004a 1020     	 movs r0,#16
 1615 004c 9847     	 blx r3
 1616              	.LVL152:
 1617 004e 38BD     	 pop {r3,r4,r5,pc}
 1618              	.LVL153:
 1619              	.L127:
 710:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         }
 711:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****        
 712:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         break;
 713:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       }
 714:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       ++channel;
 715:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     }
 716:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 717:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
 1620              	 .loc 1 717 0
 1621 0050 13F0010F 	 tst r3,#1
 1622 0054 19D0     	 beq .L131
 1623              	.LVL154:
 1624              	.LBB22:
 1625              	.LBB23:
 550:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** }
 1626              	 .loc 2 550 0
 1627 0056 D0F8E822 	 ldr r2,[r0,#744]
 1628              	.LBE23:
 1629              	.LBE22:
 718:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 719:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
 720:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     while (event != 0)
 1630              	 .loc 1 720 0
 1631 005a 002A     	 cmp r2,#0
 1632 005c 73D0     	 beq .L125
 1633              	.LVL155:
 721:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     {
 722:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       mask = (uint32_t)1U << channel;
 723:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       if (event & mask)
 1634              	 .loc 1 723 0
 1635 005e 12F0010F 	 tst r2,#1
 1636 0062 06D1     	 bne .L149
 1637 0064 0124     	 movs r4,#1
 722:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       if (event & mask)
 1638              	 .loc 1 722 0
 1639 0066 2146     	 mov r1,r4
 1640              	.LVL156:
 1641              	.L143:
 1642 0068 01FA04F3 	 lsl r3,r1,r4
 1643              	 .loc 1 723 0
 1644 006c 1342     	 tst r3,r2
 1645 006e 62D0     	 beq .L133
 1646 0070 00E0     	 b .L132
 1647              	.LVL157:
 1648              	.L149:
 693:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 1649              	 .loc 1 693 0
 1650 0072 0024     	 movs r4,#0
 1651              	.LVL158:
 1652              	.L132:
 724:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       {
 725:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TR
 1653              	 .loc 1 725 0
 1654 0074 E1B2     	 uxtb r1,r4
 1655 0076 0F22     	 movs r2,#15
 1656 0078 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 1657              	.LVL159:
 726:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_BL
 727:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_SR
 728:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_DS
 729:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 730:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         /* Call user callback to handle event */
 731:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 1658              	 .loc 1 731 0
 1659 007c 55F82430 	 ldr r3,[r5,r4,lsl#2]
 1660              	.LVL160:
 732:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         if (event_handler != NULL)
 1661              	 .loc 1 732 0
 1662 0080 002B     	 cmp r3,#0
 1663 0082 60D0     	 beq .L125
 733:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         {
 734:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 1664              	 .loc 1 734 0
 1665 0084 0120     	 movs r0,#1
 1666 0086 9847     	 blx r3
 1667              	.LVL161:
 1668 0088 38BD     	 pop {r3,r4,r5,pc}
 1669              	.LVL162:
 1670              	.L131:
 735:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         }
 736:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 																	  
 737:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         break;
 738:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       }
 739:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       ++channel;
 740:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     }
 741:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 742:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
 1671              	 .loc 1 742 0
 1672 008a 13F0020F 	 tst r3,#2
 1673 008e 19D0     	 beq .L134
 1674              	.LVL163:
 1675              	.LBB24:
 1676              	.LBB25:
 565:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** }
 1677              	 .loc 2 565 0
 1678 0090 D0F8F022 	 ldr r2,[r0,#752]
 1679              	.LBE25:
 1680              	.LBE24:
 743:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 744:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
 745:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     while (event != 0)
 1681              	 .loc 1 745 0
 1682 0094 002A     	 cmp r2,#0
 1683 0096 56D0     	 beq .L125
 1684              	.LVL164:
 746:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     {
 747:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       mask = (uint32_t)1U << channel;
 748:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       if (event & mask)
 1685              	 .loc 1 748 0
 1686 0098 12F0010F 	 tst r2,#1
 1687 009c 06D1     	 bne .L150
 1688 009e 0124     	 movs r4,#1
 747:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       if (event & mask)
 1689              	 .loc 1 747 0
 1690 00a0 2146     	 mov r1,r4
 1691              	.LVL165:
 1692              	.L144:
 1693 00a2 01FA04F3 	 lsl r3,r1,r4
 1694              	 .loc 1 748 0
 1695 00a6 1342     	 tst r3,r2
 1696 00a8 47D0     	 beq .L136
 1697 00aa 00E0     	 b .L135
 1698              	.LVL166:
 1699              	.L150:
 693:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 1700              	 .loc 1 693 0
 1701 00ac 0024     	 movs r4,#0
 1702              	.LVL167:
 1703              	.L135:
 749:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       {
 750:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_BL
 1704              	 .loc 1 750 0
 1705 00ae E1B2     	 uxtb r1,r4
 1706 00b0 0E22     	 movs r2,#14
 1707 00b2 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 1708              	.LVL168:
 751:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_SR
 752:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_DS
 753:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 754:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         /* Call user callback to handle event */
 755:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 1709              	 .loc 1 755 0
 1710 00b6 55F82430 	 ldr r3,[r5,r4,lsl#2]
 1711              	.LVL169:
 756:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         if (event_handler != NULL)
 1712              	 .loc 1 756 0
 1713 00ba 002B     	 cmp r3,#0
 1714 00bc 43D0     	 beq .L125
 757:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         {
 758:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE);
 1715              	 .loc 1 758 0
 1716 00be 0220     	 movs r0,#2
 1717 00c0 9847     	 blx r3
 1718              	.LVL170:
 1719 00c2 38BD     	 pop {r3,r4,r5,pc}
 1720              	.LVL171:
 1721              	.L134:
 759:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         }
 760:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 761:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         break;
 762:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       }
 763:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       ++channel;
 764:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     }
 765:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 766:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 1722              	 .loc 1 766 0
 1723 00c4 13F0040F 	 tst r3,#4
 1724 00c8 18D0     	 beq .L137
 1725              	.LVL172:
 1726              	.LBB26:
 1727              	.LBB27:
 584:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** }
 1728              	 .loc 2 584 0
 1729 00ca D0F8F822 	 ldr r2,[r0,#760]
 1730              	.LBE27:
 1731              	.LBE26:
 767:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 768:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
 769:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     while (event != 0)
 1732              	 .loc 1 769 0
 1733 00ce 002A     	 cmp r2,#0
 1734 00d0 39D0     	 beq .L125
 1735              	.LVL173:
 770:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     {
 771:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       mask = (uint32_t)1U << channel;
 772:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       if (event & mask)
 1736              	 .loc 1 772 0
 1737 00d2 12F0010F 	 tst r2,#1
 1738 00d6 06D1     	 bne .L151
 1739 00d8 0124     	 movs r4,#1
 771:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       if (event & mask)
 1740              	 .loc 1 771 0
 1741 00da 2146     	 mov r1,r4
 1742              	.LVL174:
 1743              	.L145:
 1744 00dc 01FA04F3 	 lsl r3,r1,r4
 1745              	 .loc 1 772 0
 1746 00e0 1342     	 tst r3,r2
 1747 00e2 2CD0     	 beq .L139
 1748 00e4 00E0     	 b .L138
 1749              	.LVL175:
 1750              	.L151:
 693:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 1751              	 .loc 1 693 0
 1752 00e6 0024     	 movs r4,#0
 1753              	.LVL176:
 1754              	.L138:
 773:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       {
 774:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTI
 1755              	 .loc 1 774 0
 1756 00e8 E1B2     	 uxtb r1,r4
 1757 00ea 0422     	 movs r2,#4
 1758 00ec FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 1759              	.LVL177:
 775:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 776:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         /* Call user callback to handle event */
 777:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 1760              	 .loc 1 777 0
 1761 00f0 55F82430 	 ldr r3,[r5,r4,lsl#2]
 1762              	.LVL178:
 778:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         if (event_handler != NULL)
 1763              	 .loc 1 778 0
 1764 00f4 3BB3     	 cbz r3,.L125
 779:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         {
 780:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 1765              	 .loc 1 780 0
 1766 00f6 0420     	 movs r0,#4
 1767 00f8 9847     	 blx r3
 1768              	.LVL179:
 1769 00fa 38BD     	 pop {r3,r4,r5,pc}
 1770              	.LVL180:
 1771              	.L137:
 781:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         }
 782:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         
 783:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         break;
 784:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       }
 785:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       ++channel;
 786:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     }
 787:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   }
 788:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 1772              	 .loc 1 788 0
 1773 00fc 13F0080F 	 tst r3,#8
 1774 0100 21D0     	 beq .L125
 1775              	.LVL181:
 1776              	.LBB28:
 1777              	.LBB29:
 603:C:/Files/Projects/Git/XMCLib/inc\xmc_dma.h **** }
 1778              	 .loc 2 603 0
 1779 0102 D0F80023 	 ldr r2,[r0,#768]
 1780              	.LBE29:
 1781              	.LBE28:
 789:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****   {
 790:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
 791:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     while (event != 0)
 1782              	 .loc 1 791 0
 1783 0106 F2B1     	 cbz r2,.L125
 1784              	.LVL182:
 792:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     {
 793:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       mask = (uint32_t)1U << channel;
 794:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       if (event & mask)
 1785              	 .loc 1 794 0
 1786 0108 12F0010F 	 tst r2,#1
 1787 010c 06D1     	 bne .L152
 1788 010e 0124     	 movs r4,#1
 793:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       if (event & mask)
 1789              	 .loc 1 793 0
 1790 0110 2146     	 mov r1,r4
 1791              	.LVL183:
 1792              	.L146:
 1793 0112 01FA04F3 	 lsl r3,r1,r4
 1794              	 .loc 1 794 0
 1795 0116 1342     	 tst r3,r2
 1796 0118 13D0     	 beq .L141
 1797 011a 00E0     	 b .L140
 1798              	.LVL184:
 1799              	.L152:
 693:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 1800              	 .loc 1 693 0
 1801 011c 0024     	 movs r4,#0
 1802              	.LVL185:
 1803              	.L140:
 795:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       {
 796:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTI
 1804              	 .loc 1 796 0
 1805 011e E1B2     	 uxtb r1,r4
 1806 0120 0822     	 movs r2,#8
 1807 0122 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 1808              	.LVL186:
 797:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 798:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         /* Call user callback to handle event */
 799:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 1809              	 .loc 1 799 0
 1810 0126 55F82430 	 ldr r3,[r5,r4,lsl#2]
 1811              	.LVL187:
 800:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         if (event_handler != NULL)
 1812              	 .loc 1 800 0
 1813 012a 63B1     	 cbz r3,.L125
 801:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         {
 802:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 1814              	 .loc 1 802 0
 1815 012c 0820     	 movs r0,#8
 1816 012e 9847     	 blx r3
 1817              	.LVL188:
 1818 0130 38BD     	 pop {r3,r4,r5,pc}
 1819              	.LVL189:
 1820              	.L130:
 714:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     }
 1821              	 .loc 1 714 0
 1822 0132 0134     	 adds r4,r4,#1
 1823              	.LVL190:
 1824 0134 7BE7     	 b .L142
 1825              	.LVL191:
 1826              	.L133:
 739:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     }
 1827              	 .loc 1 739 0
 1828 0136 0134     	 adds r4,r4,#1
 1829              	.LVL192:
 1830 0138 96E7     	 b .L143
 1831              	.LVL193:
 1832              	.L136:
 763:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     }
 1833              	 .loc 1 763 0
 1834 013a 0134     	 adds r4,r4,#1
 1835              	.LVL194:
 1836 013c B1E7     	 b .L144
 1837              	.LVL195:
 1838              	.L139:
 785:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****     }
 1839              	 .loc 1 785 0
 1840 013e 0134     	 adds r4,r4,#1
 1841              	.LVL196:
 1842 0140 CCE7     	 b .L145
 1843              	.LVL197:
 1844              	.L141:
 803:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         }      
 804:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c **** 
 805:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****         break;
 806:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       }
 807:C:/Files/Projects/Git/XMCLib/src\xmc_dma.c ****       ++channel;
 1845              	 .loc 1 807 0
 1846 0142 0134     	 adds r4,r4,#1
 1847              	.LVL198:
 1848 0144 E5E7     	 b .L146
 1849              	.LVL199:
 1850              	.L125:
 1851 0146 38BD     	 pop {r3,r4,r5,pc}
 1852              	.LVL200:
 1853              	.L155:
 1854              	 .align 2
 1855              	.L154:
 1856 0148 00000000 	 .word .LANCHOR1
 1857 014c 00000000 	 .word .LANCHOR0
 1858 0150 00400150 	 .word 1342259200
 1859              	 .cfi_endproc
 1860              	.LFE222:
 1862              	 .global dma1_event_handlers
 1863              	 .global dma0_event_handlers
 1864              	 .section .bss.dma1_event_handlers,"aw",%nobits
 1865              	 .align 2
 1866              	 .set .LANCHOR1,.+0
 1869              	dma1_event_handlers:
 1870 0000 00000000 	 .space 16
 1870      00000000 
 1870      00000000 
 1870      00000000 
 1871              	 .section .bss.dma0_event_handlers,"aw",%nobits
 1872              	 .align 2
 1873              	 .set .LANCHOR0,.+0
 1876              	dma0_event_handlers:
 1877 0000 00000000 	 .space 32
 1877      00000000 
 1877      00000000 
 1877      00000000 
 1877      00000000 
 1878              	 .text
 1879              	.Letext0:
 1880              	 .file 3 "c:\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1881              	 .file 4 "c:\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1882              	 .file 5 "C:/Files/Projects/Git/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 1883              	 .file 6 "C:/Files/Projects/Git/XMCLib/inc/xmc4_scu.h"
 1884              	 .file 7 "C:/Files/Projects/Git/CMSIS/Include/cmsis_gcc.h"
 1885              	 .file 8 "C:/Files/Projects/Git/CMSIS/Include/core_cm4.h"
 1886              	 .file 9 "C:/Files/Projects/Git/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_dma.c
    {standard input}:20     .text.XMC_DMA_Enable:00000000 $t
    {standard input}:25     .text.XMC_DMA_Enable:00000000 XMC_DMA_Enable
    {standard input}:58     .text.XMC_DMA_Enable:0000001c $d
    {standard input}:65     .text.XMC_DMA_Init:00000000 $t
    {standard input}:70     .text.XMC_DMA_Init:00000000 XMC_DMA_Init
    {standard input}:90     .text.XMC_DMA_Disable:00000000 $t
    {standard input}:95     .text.XMC_DMA_Disable:00000000 XMC_DMA_Disable
    {standard input}:125    .text.XMC_DMA_Disable:00000018 $d
    {standard input}:132    .text.XMC_DMA_IsEnabled:00000000 $t
    {standard input}:137    .text.XMC_DMA_IsEnabled:00000000 XMC_DMA_IsEnabled
    {standard input}:180    .text.XMC_DMA_IsEnabled:00000028 $d
    {standard input}:187    .text.XMC_DMA_EnableRequestLine:00000000 $t
    {standard input}:192    .text.XMC_DMA_EnableRequestLine:00000000 XMC_DMA_EnableRequestLine
    {standard input}:266    .text.XMC_DMA_EnableRequestLine:00000054 $d
    {standard input}:272    .text.XMC_DMA_DisableRequestLine:00000000 $t
    {standard input}:277    .text.XMC_DMA_DisableRequestLine:00000000 XMC_DMA_DisableRequestLine
    {standard input}:303    .text.XMC_DMA_DisableRequestLine:0000001c $d
    {standard input}:309    .text.XMC_DMA_ClearRequestLine:00000000 $t
    {standard input}:314    .text.XMC_DMA_ClearRequestLine:00000000 XMC_DMA_ClearRequestLine
    {standard input}:359    .text.XMC_DMA_ClearRequestLine:00000038 $d
    {standard input}:365    .text.XMC_DMA_GetOverrunStatus:00000000 $t
    {standard input}:370    .text.XMC_DMA_GetOverrunStatus:00000000 XMC_DMA_GetOverrunStatus
    {standard input}:408    .text.XMC_DMA_GetOverrunStatus:00000028 $d
    {standard input}:414    .text.XMC_DMA_ClearOverrunStatus:00000000 $t
    {standard input}:419    .text.XMC_DMA_ClearOverrunStatus:00000000 XMC_DMA_ClearOverrunStatus
    {standard input}:442    .text.XMC_DMA_ClearOverrunStatus:00000014 $d
    {standard input}:448    .text.XMC_DMA_CH_Disable:00000000 $t
    {standard input}:453    .text.XMC_DMA_CH_Disable:00000000 XMC_DMA_CH_Disable
    {standard input}:478    .text.XMC_DMA_CH_IsEnabled:00000000 $t
    {standard input}:483    .text.XMC_DMA_CH_IsEnabled:00000000 XMC_DMA_CH_IsEnabled
    {standard input}:502    .text.XMC_DMA_CH_Suspend:00000000 $t
    {standard input}:507    .text.XMC_DMA_CH_Suspend:00000000 XMC_DMA_CH_Suspend
    {standard input}:527    .text.XMC_DMA_CH_Resume:00000000 $t
    {standard input}:532    .text.XMC_DMA_CH_Resume:00000000 XMC_DMA_CH_Resume
    {standard input}:552    .text.XMC_DMA_CH_IsSuspended:00000000 $t
    {standard input}:557    .text.XMC_DMA_CH_IsSuspended:00000000 XMC_DMA_CH_IsSuspended
    {standard input}:578    .text.XMC_DMA_CH_EnableEvent:00000000 $t
    {standard input}:583    .text.XMC_DMA_CH_EnableEvent:00000000 XMC_DMA_CH_EnableEvent
    {standard input}:627    .text.XMC_DMA_CH_DisableEvent:00000000 $t
    {standard input}:632    .text.XMC_DMA_CH_DisableEvent:00000000 XMC_DMA_CH_DisableEvent
    {standard input}:676    .text.XMC_DMA_CH_ClearEventStatus:00000000 $t
    {standard input}:681    .text.XMC_DMA_CH_ClearEventStatus:00000000 XMC_DMA_CH_ClearEventStatus
    {standard input}:725    .text.XMC_DMA_CH_Init:00000000 $t
    {standard input}:730    .text.XMC_DMA_CH_Init:00000000 XMC_DMA_CH_Init
    {standard input}:896    .text.XMC_DMA_CH_Init:000000fa $d
    {standard input}:904    .text.XMC_DMA_CH_Init:00000102 $t
    {standard input}:1037   .text.XMC_DMA_CH_Init:000001b0 $d
    {standard input}:1042   .text.XMC_DMA_CH_GetEventStatus:00000000 $t
    {standard input}:1047   .text.XMC_DMA_CH_GetEventStatus:00000000 XMC_DMA_CH_GetEventStatus
    {standard input}:1099   .text.XMC_DMA_CH_EnableSourceGather:00000000 $t
    {standard input}:1104   .text.XMC_DMA_CH_EnableSourceGather:00000000 XMC_DMA_CH_EnableSourceGather
    {standard input}:1138   .text.XMC_DMA_CH_DisableSourceGather:00000000 $t
    {standard input}:1143   .text.XMC_DMA_CH_DisableSourceGather:00000000 XMC_DMA_CH_DisableSourceGather
    {standard input}:1163   .text.XMC_DMA_CH_EnableDestinationScatter:00000000 $t
    {standard input}:1168   .text.XMC_DMA_CH_EnableDestinationScatter:00000000 XMC_DMA_CH_EnableDestinationScatter
    {standard input}:1202   .text.XMC_DMA_CH_DisableDestinationScatter:00000000 $t
    {standard input}:1207   .text.XMC_DMA_CH_DisableDestinationScatter:00000000 XMC_DMA_CH_DisableDestinationScatter
    {standard input}:1227   .text.XMC_DMA_CH_TriggerSourceRequest:00000000 $t
    {standard input}:1232   .text.XMC_DMA_CH_TriggerSourceRequest:00000000 XMC_DMA_CH_TriggerSourceRequest
    {standard input}:1265   .text.XMC_DMA_CH_TriggerDestinationRequest:00000000 $t
    {standard input}:1270   .text.XMC_DMA_CH_TriggerDestinationRequest:00000000 XMC_DMA_CH_TriggerDestinationRequest
    {standard input}:1303   .text.XMC_DMA_CH_EnableSourceAddressReload:00000000 $t
    {standard input}:1308   .text.XMC_DMA_CH_EnableSourceAddressReload:00000000 XMC_DMA_CH_EnableSourceAddressReload
    {standard input}:1328   .text.XMC_DMA_CH_DisableSourceAddressReload:00000000 $t
    {standard input}:1333   .text.XMC_DMA_CH_DisableSourceAddressReload:00000000 XMC_DMA_CH_DisableSourceAddressReload
    {standard input}:1353   .text.XMC_DMA_CH_EnableDestinationAddressReload:00000000 $t
    {standard input}:1358   .text.XMC_DMA_CH_EnableDestinationAddressReload:00000000 XMC_DMA_CH_EnableDestinationAddressReload
    {standard input}:1378   .text.XMC_DMA_CH_DisableDestinationAddressReload:00000000 $t
    {standard input}:1383   .text.XMC_DMA_CH_DisableDestinationAddressReload:00000000 XMC_DMA_CH_DisableDestinationAddressReload
    {standard input}:1403   .text.XMC_DMA_CH_RequestLastMultiblockTransfer:00000000 $t
    {standard input}:1408   .text.XMC_DMA_CH_RequestLastMultiblockTransfer:00000000 XMC_DMA_CH_RequestLastMultiblockTransfer
    {standard input}:1432   .text.XMC_DMA_CH_SetEventHandler:00000000 $t
    {standard input}:1437   .text.XMC_DMA_CH_SetEventHandler:00000000 XMC_DMA_CH_SetEventHandler
    {standard input}:1458   .text.XMC_DMA_CH_SetEventHandler:00000010 $d
    {standard input}:1465   .text.XMC_DMA_CH_ClearSourcePeripheralRequest:00000000 $t
    {standard input}:1470   .text.XMC_DMA_CH_ClearSourcePeripheralRequest:00000000 XMC_DMA_CH_ClearSourcePeripheralRequest
    {standard input}:1499   .text.XMC_DMA_CH_ClearDestinationPeripheralRequest:00000000 $t
    {standard input}:1504   .text.XMC_DMA_CH_ClearDestinationPeripheralRequest:00000000 XMC_DMA_CH_ClearDestinationPeripheralRequest
    {standard input}:1533   .text.XMC_DMA_IRQHandler:00000000 $t
    {standard input}:1538   .text.XMC_DMA_IRQHandler:00000000 XMC_DMA_IRQHandler
    {standard input}:1856   .text.XMC_DMA_IRQHandler:00000148 $d
    {standard input}:1869   .bss.dma1_event_handlers:00000000 dma1_event_handlers
    {standard input}:1876   .bss.dma0_event_handlers:00000000 dma0_event_handlers
    {standard input}:1865   .bss.dma1_event_handlers:00000000 $d
    {standard input}:1872   .bss.dma0_event_handlers:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_RESET_IsPeripheralResetAsserted
