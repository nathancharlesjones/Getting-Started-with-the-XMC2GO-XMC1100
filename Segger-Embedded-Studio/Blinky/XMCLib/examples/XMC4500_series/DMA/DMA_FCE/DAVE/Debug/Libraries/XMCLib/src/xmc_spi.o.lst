   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,1
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_spi.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_SPI_CH_Init,"ax",%progbits
  20              	 .align 2
  21              	 .global XMC_SPI_CH_Init
  22              	 .thumb
  23              	 .thumb_func
  25              	XMC_SPI_CH_Init:
  26              	.LFB272:
  27              	 .file 1 "C:/Files/Projects/Git/XMCLib/src/xmc_spi.c"
   1:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** /**
   2:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * @file xmc_spi.c
   3:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * @date 2019-05-07
   4:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  *
   5:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * @cond
   6:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  **************************************************************************************************
   7:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  *
   9:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * All rights reserved.                        
  11:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  *                                             
  12:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * following conditions are met:   
  14:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  *                                                                              
  15:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * disclaimer.                        
  17:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * 
  18:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * 
  21:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * products derived from this software without specific prior written permission.                  
  23:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  *                                                                              
  24:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  *                                                                              
  32:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  **************************************************************************************************
  35:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  *
  36:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * Change History
  37:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * --------------
  38:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  *
  39:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * 2015-02-20:
  40:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  *     - Initial <br>
  41:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  *      
  42:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * 2015-05-20:
  43:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  *     - Modified XMC_SPI_CH_Stop() API for not setting to IDLE the channel if it is busy
  44:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  *     - Modified XMC_SPI_CH_SetInterwordDelay() implementation in order to gain accuracy <br>
  45:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  *     
  46:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * 2015-06-20:
  47:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  *     - Removed GetDriverVersion API <br>
  48:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  *
  49:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * 2015-09-01:
  50:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  *     - Modified XMC_SPI_CH_EnableEvent() and XMC_SPI_CH_DisableEvent() for supporting multiple ev
  51:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  *
  52:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * 2015-11-04: 
  53:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  *     - Modified the check of XMC_USIC_CH_GetTransmitBufferStatus() in the XMC_SPI_CH_Transmit() f
  54:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  *
  55:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * 2019-05-07:
  56:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  *     - Added XMC_SPI_CH_SetBaudrateEx() which allows to select between baudrate generator normal 
  57:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  *
  58:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * @endcond 
  59:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  *
  60:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  */
  61:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** /**
  62:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  *
  63:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * @brief SPI driver for XMC microcontroller family
  64:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  *
  65:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  */
  66:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** /**************************************************************************************************
  67:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * HEADER FILES
  68:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  **************************************************************************************************
  69:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
  70:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** #include <xmc_scu.h>
  71:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** #include <xmc_spi.h>
  72:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
  73:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** /**************************************************************************************************
  74:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * MACROS
  75:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  **************************************************************************************************
  76:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** #define XMC_SPI_CH_OVERSAMPLING (2UL)
  77:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
  78:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** /**************************************************************************************************
  79:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  * API IMPLEMENTATION
  80:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  **************************************************************************************************
  81:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****  
  82:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** /* Initializes the selected SPI channel with the config structure. */
  83:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
  84:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** {
  28              	 .loc 1 84 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 38B5     	 push {r3,r4,r5,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 16
  36              	 .cfi_offset 3,-16
  37              	 .cfi_offset 4,-12
  38              	 .cfi_offset 5,-8
  39              	 .cfi_offset 14,-4
  40 0002 0446     	 mov r4,r0
  41 0004 0D46     	 mov r5,r1
  85:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   XMC_USIC_CH_Enable(channel);
  42              	 .loc 1 85 0
  43 0006 FFF7FEFF 	 bl XMC_USIC_CH_Enable
  44              	.LVL1:
  86:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   
  87:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  45              	 .loc 1 87 0
  46 000a 6B79     	 ldrb r3,[r5,#5]
  47 000c 63B9     	 cbnz r3,.L2
  88:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   {
  89:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     /* Configure baud rate */
  90:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     if (config->normal_divider_mode)
  48              	 .loc 1 90 0
  49 000e 2B79     	 ldrb r3,[r5,#4]
  50 0010 2BB1     	 cbz r3,.L3
  91:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     {
  92:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****       /* Normal divider mode */
  93:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****       (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
  51              	 .loc 1 93 0
  52 0012 2046     	 mov r0,r4
  53 0014 2968     	 ldr r1,[r5]
  54 0016 0222     	 movs r2,#2
  55 0018 FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrateEx
  56              	.LVL2:
  57 001c 04E0     	 b .L2
  58              	.L3:
  94:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     }
  95:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     else
  96:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     {
  97:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****       /* Fractional divider mode */
  98:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****       (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
  59              	 .loc 1 98 0
  60 001e 2046     	 mov r0,r4
  61 0020 2968     	 ldr r1,[r5]
  62 0022 0222     	 movs r2,#2
  63 0024 FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
  64              	.LVL3:
  65              	.L2:
  99:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     }
 100:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   }
 101:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   
 102:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   /* Configuration of USIC Shift Control */
 103:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   /* Transmission Mode (TRM) = 1  */
 104:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   /* Passive Data Level (PDL) = 1 */
 105:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   channel->SCTR = USIC_CH_SCTR_PDL_Msk |
  66              	 .loc 1 105 0
  67 0028 084B     	 ldr r3,.L6
  68 002a 6363     	 str r3,[r4,#52]
 106:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****                   (0x1UL << USIC_CH_SCTR_TRM_Pos) |
 107:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****                   (0x3fUL << USIC_CH_SCTR_FLE_Pos)|
 108:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****                   (0x7UL << USIC_CH_SCTR_WLE_Pos);
 109:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 110:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   /* Configuration of USIC Transmit Control/Status Register */
 111:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   /* TBUF Data Enable (TDEN) = 1 */
 112:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   /* TBUF Data Single Shot Mode (TDSSM) = 1 */
 113:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
  69              	 .loc 1 113 0
  70 002c 4FF4A263 	 mov r3,#1296
  71 0030 A363     	 str r3,[r4,#56]
 114:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****                   (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
 115:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****                   USIC_CH_TCSR_TDSSM_Msk);
 116:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 117:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  72              	 .loc 1 117 0
  73 0032 6B79     	 ldrb r3,[r5,#5]
  74 0034 1BB9     	 cbnz r3,.L4
 118:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   {
 119:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     /* Configuration of Protocol Control Register */
 120:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
  75              	 .loc 1 120 0
  76 0036 AB79     	 ldrb r3,[r5,#6]
  77 0038 43F00B03 	 orr r3,r3,#11
  78 003c E363     	 str r3,[r4,#60]
  79              	.L4:
 121:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****                            USIC_CH_PCR_SSCMode_SELCTR_Msk |
 122:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****                            (uint32_t)config->selo_inversion |
 123:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****                            USIC_CH_PCR_SSCMode_FEM_Msk);
 124:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   }
 125:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 126:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   /* Clear protocol status */
 127:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   channel->PSCR = 0xFFFFFFFFUL;
  80              	 .loc 1 127 0
  81 003e 4FF0FF33 	 mov r3,#-1
  82 0042 E364     	 str r3,[r4,#76]
 128:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 129:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   /* Set parity settings */
 130:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   channel->CCR = (uint32_t)config->parity_mode;
  83              	 .loc 1 130 0
  84 0044 2B89     	 ldrh r3,[r5,#8]
  85 0046 2364     	 str r3,[r4,#64]
  86 0048 38BD     	 pop {r3,r4,r5,pc}
  87              	.LVL4:
  88              	.L7:
  89 004a 00BF     	 .align 2
  90              	.L6:
  91 004c 02013F07 	 .word 121569538
  92              	 .cfi_endproc
  93              	.LFE272:
  95              	 .section .text.XMC_SPI_CH_SetBaudrate,"ax",%progbits
  96              	 .align 2
  97              	 .global XMC_SPI_CH_SetBaudrate
  98              	 .thumb
  99              	 .thumb_func
 101              	XMC_SPI_CH_SetBaudrate:
 102              	.LFB273:
 131:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** }
 132:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 133:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate)
 134:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** {
 103              	 .loc 1 134 0
 104              	 .cfi_startproc
 105              	 
 106              	 
 107              	.LVL5:
 108 0000 38B5     	 push {r3,r4,r5,lr}
 109              	.LCFI1:
 110              	 .cfi_def_cfa_offset 16
 111              	 .cfi_offset 3,-16
 112              	 .cfi_offset 4,-12
 113              	 .cfi_offset 5,-8
 114              	 .cfi_offset 14,-4
 115 0002 0546     	 mov r5,r0
 116 0004 0C46     	 mov r4,r1
 117              	.LVL6:
 135:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   XMC_SPI_CH_STATUS_t status;
 136:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   
 137:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   status = XMC_SPI_CH_STATUS_ERROR;
 138:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   
 139:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   if (rate <= (XMC_SCU_CLOCK_GetPeripheralClockFrequency() >> 1U))
 118              	 .loc 1 139 0
 119 0006 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 120              	.LVL7:
 121 000a B4EB500F 	 cmp r4,r0,lsr#1
 122 000e 08D8     	 bhi .L10
 140:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   {
 141:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     if (XMC_USIC_CH_SetBaudrate(channel, rate, XMC_SPI_CH_OVERSAMPLING) == XMC_USIC_CH_STATUS_OK)
 123              	 .loc 1 141 0
 124 0010 2846     	 mov r0,r5
 125 0012 2146     	 mov r1,r4
 126 0014 0222     	 movs r2,#2
 127 0016 FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
 128              	.LVL8:
 137:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   
 129              	 .loc 1 137 0
 130 001a 0030     	 adds r0,r0,#0
 131 001c 18BF     	 it ne
 132 001e 0120     	 movne r0,#1
 133 0020 38BD     	 pop {r3,r4,r5,pc}
 134              	.LVL9:
 135              	.L10:
 136 0022 0120     	 movs r0,#1
 137              	.LVL10:
 142:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     {
 143:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****       status = XMC_SPI_CH_STATUS_OK;
 144:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     }
 145:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   } 
 146:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   return status;
 147:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** }
 138              	 .loc 1 147 0
 139 0024 38BD     	 pop {r3,r4,r5,pc}
 140              	 .cfi_endproc
 141              	.LFE273:
 143 0026 00BF     	 .section .text.XMC_SPI_CH_SetBaudrateEx,"ax",%progbits
 144              	 .align 2
 145              	 .global XMC_SPI_CH_SetBaudrateEx
 146              	 .thumb
 147              	 .thumb_func
 149              	XMC_SPI_CH_SetBaudrateEx:
 150              	.LFB274:
 148:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 149:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, const uint32_t rate, boo
 150:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** {
 151              	 .loc 1 150 0
 152              	 .cfi_startproc
 153              	 
 154              	 
 155              	.LVL11:
 156 0000 70B5     	 push {r4,r5,r6,lr}
 157              	.LCFI2:
 158              	 .cfi_def_cfa_offset 16
 159              	 .cfi_offset 4,-16
 160              	 .cfi_offset 5,-12
 161              	 .cfi_offset 6,-8
 162              	 .cfi_offset 14,-4
 163 0002 0646     	 mov r6,r0
 164 0004 0C46     	 mov r4,r1
 165 0006 1546     	 mov r5,r2
 151:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   XMC_USIC_CH_STATUS_t status;
 152:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****    
 153:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   if (rate <= (XMC_SCU_CLOCK_GetPeripheralClockFrequency() >> 1U))
 166              	 .loc 1 153 0
 167 0008 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 168              	.LVL12:
 169 000c B4EB500F 	 cmp r4,r0,lsr#1
 170 0010 0CD8     	 bhi .L15
 154:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   {
 155:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     if (normal_divider_mode)
 171              	 .loc 1 155 0
 172 0012 2DB1     	 cbz r5,.L14
 156:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     {
 157:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****       /* Normal divider mode */
 158:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****       status = XMC_USIC_CH_SetBaudrateEx(channel, rate, XMC_SPI_CH_OVERSAMPLING);
 173              	 .loc 1 158 0
 174 0014 3046     	 mov r0,r6
 175 0016 2146     	 mov r1,r4
 176 0018 0222     	 movs r2,#2
 177 001a FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrateEx
 178              	.LVL13:
 179 001e 70BD     	 pop {r4,r5,r6,pc}
 180              	.LVL14:
 181              	.L14:
 159:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     }
 160:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     else
 161:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     {
 162:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****       /* Fractional divider mode */
 163:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****       status = XMC_USIC_CH_SetBaudrate(channel, rate, XMC_SPI_CH_OVERSAMPLING);
 182              	 .loc 1 163 0
 183 0020 3046     	 mov r0,r6
 184 0022 2146     	 mov r1,r4
 185 0024 0222     	 movs r2,#2
 186 0026 FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
 187              	.LVL15:
 188 002a 70BD     	 pop {r4,r5,r6,pc}
 189              	.LVL16:
 190              	.L15:
 164:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     }
 165:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   }
 166:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   else
 167:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   {
 168:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     status = XMC_USIC_CH_STATUS_ERROR;
 191              	 .loc 1 168 0
 192 002c 0120     	 movs r0,#1
 193              	.LVL17:
 169:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   }
 170:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   
 171:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   return (XMC_SPI_CH_STATUS_t)status;
 172:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** }
 194              	 .loc 1 172 0
 195 002e 70BD     	 pop {r4,r5,r6,pc}
 196              	 .cfi_endproc
 197              	.LFE274:
 199              	 .section .text.XMC_SPI_CH_EnableSlaveSelect,"ax",%progbits
 200              	 .align 2
 201              	 .global XMC_SPI_CH_EnableSlaveSelect
 202              	 .thumb
 203              	 .thumb_func
 205              	XMC_SPI_CH_EnableSlaveSelect:
 206              	.LFB275:
 173:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 174:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** /* Enable the selected slave signal by setting (SELO) bits in PCR register. */
 175:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t sla
 176:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** {
 207              	 .loc 1 176 0
 208              	 .cfi_startproc
 209              	 
 210              	 
 211              	 
 212              	.LVL18:
 177:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   /* Configuration of Protocol Control Register */
 178:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 213              	 .loc 1 178 0
 214 0000 C36B     	 ldr r3,[r0,#60]
 215 0002 23F47F03 	 bic r3,r3,#16711680
 216 0006 C363     	 str r3,[r0,#60]
 179:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   channel->PCR_SSCMode |= (uint32_t)slave;
 217              	 .loc 1 179 0
 218 0008 C36B     	 ldr r3,[r0,#60]
 219 000a 1943     	 orrs r1,r1,r3
 220              	.LVL19:
 221 000c C163     	 str r1,[r0,#60]
 222 000e 7047     	 bx lr
 223              	 .cfi_endproc
 224              	.LFE275:
 226              	 .section .text.XMC_SPI_CH_DisableSlaveSelect,"ax",%progbits
 227              	 .align 2
 228              	 .global XMC_SPI_CH_DisableSlaveSelect
 229              	 .thumb
 230              	 .thumb_func
 232              	XMC_SPI_CH_DisableSlaveSelect:
 233              	.LFB276:
 180:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** }
 181:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 182:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** /* Disable the slave signals by clearing (SELO) bits in PCR register. */
 183:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** void XMC_SPI_CH_DisableSlaveSelect(XMC_USIC_CH_t *const channel)
 184:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** {
 234              	 .loc 1 184 0
 235              	 .cfi_startproc
 236              	 
 237              	 
 238              	 
 239              	.LVL20:
 240              	.LBB12:
 241              	.LBB13:
 242              	 .file 2 "C:/Files/Projects/Git/XMCLib/inc/xmc_spi.h"
   1:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
   2:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @file xmc_spi.h
   3:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @date 2019-05-07
   4:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
   5:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @cond
   6:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
   7:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
   9:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * All rights reserved.                        
  11:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *                                             
  12:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * following conditions are met:   
  14:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *                                                                              
  15:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * disclaimer.                        
  17:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * 
  18:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * 
  21:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *                                                                              
  24:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *                                                                              
  32:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
  35:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
  36:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Change History
  37:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * --------------
  38:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
  39:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * 2015-02-20:
  40:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *     - Initial
  41:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *   
  42:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * 2015-05-20:
  43:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *     - Documentation improved <br>
  44:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *     - Added XMC_SPI_CH_SetSlaveSelectDelay(), XMC_SPI_CH_TriggerServiceRequest() and 
  45:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *       XMC_SPI_CH_SelectInterruptNodePointer() <br>
  46:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *     - Added XMC_SPI_CH_SetInterwordDelaySCLK() <br>
  47:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
  48:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * 2015-06-20:
  49:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  50:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
  51:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * 2015-08-24:
  52:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_SPI_CH_DisableDelayCompensation()
  53:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *       XMC_SPI_CH_EnableDelayCompensation() <br>
  54:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
  55:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * 2015-08-27:
  56:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *     - Added APIs for external input for BRG configuration:XMC_SPI_CH_ConfigExternalInputSignalTo
  57:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
  58:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * 2015-09-01:
  59:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *     - Modified XMC_SPI_CH_SetInputSource() for avoiding complete DXCR register overwriting. <br>
  60:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *     - Modified XMC_SPI_CH_EVENT_t enum for supporting XMC_SPI_CH_EnableEvent() and XMC_SPI_CH_Di
  61:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *       for supporting multiple events configuration <br>
  62:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
  63:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * 2015-09-08:
  64:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *     - Adding API for configuring the receiving clock phase in the slave:XMC_SPI_CH_DataLatchedIn
  65:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
  66:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * 2016-04-10:
  67:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *     - Added an API for configuring the transmit mode:XMC_SPI_CH_SetTransmitMode() <br>
  68:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
  69:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * 2016-05-20:
  70:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *     - Added XMC_SPI_CH_EnableDataTransmission() and XMC_SPI_CH_DisableDataTransmission()
  71:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * 
  72:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * 2019-03-30:
  73:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *     - Fix XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX macro value
  74:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * 
  75:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * 2019-05-07:
  76:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *     - Added normal_divider_mode to XMC_SPI_CH_CONFIG_t configuration structure.
  77:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *       It selects normal divider mode for baudrate generator instead of default fractional divide
  78:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *     - Added XMC_SPI_CH_SetBaudrateEx()
  79:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
  80:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @endcond 
  81:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
  82:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
  83:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
  84:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** #ifndef XMC_SPI_H
  85:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** #define XMC_SPI_H
  86:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
  87:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
  88:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * HEADER FILES
  89:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
  90:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** #include "xmc_usic.h"
  91:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
  92:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
  93:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @addtogroup XMClib XMC Peripheral Library
  94:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @{
  95:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
  96:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
  97:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
  98:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @addtogroup SPI
  99:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @brief Synchronous serial channel driver for SPI-like communication.
 100:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * 
 101:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * The SPI driver uses Universal Serial Interface Channel(USIC) module. 
 102:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * The USIC module supports multiple data lines for SPI communication. \n
 103:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * -# Full duplex communication with 2 separate lines for transmission and reception.
 104:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * -# Half duplex communication with 1 common line shared for transmission and reception.
 105:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * -# Dual mode communication with 2 common lines shared for transmission and reception.
 106:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * -# Quad mode communication with 4 common lines shared for transmission and reception.<br><br>
 107:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * 
 108:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * SPI driver provides structures, enumerations and APIs for configuring the USIC channel for SPI c
 109:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * and also for data transaction.<br>
 110:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * SPI driver features:
 111:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * -# Configuration structure XMC_SPI_CH_CONFIG_t and SPI initialization function XMC_SPI_CH_Init()
 112:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * -# Allows configuration of protocol word and frame length using XMC_SPI_CH_SetWordLength(), XMC_
 113:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * -# Allows manipulation of data frame at runtime using XMC_SPI_CH_EnableSOF(), XMC_SPI_CH_EnableE
 114:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  XMC_SPI_CH_EnableSlaveSelect(), XMC_SPI_CH_DisableSlaveSelect()
 115:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * -# Provides APIs for transmitting data and receiving data using XMC_SPI_CH_Transmit(), XMC_SPI_C
 116:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * -# Allows configuration of shift clock using XMC_SPI_CH_ConfigureShiftClockOutput()
 117:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * -# Provides enumeration of SPI protocol events using @ref XMC_SPI_CH_STATUS_FLAG_t
 118:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @{
 119:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 120:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 121:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
 122:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * MACROS
 123:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
 124:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 125:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** #if defined(USIC0)
 126:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** #define XMC_SPI0_CH0 XMC_USIC0_CH0 /**< SPI0 channel 0 base address */
 127:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** #define XMC_SPI0_CH1 XMC_USIC0_CH1 /**< SPI0 channel 1 base address */
 128:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** #endif
 129:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 130:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** #if defined(USIC1)
 131:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** #define XMC_SPI1_CH0 XMC_USIC1_CH0 /**< SPI1 channel 0 base address */
 132:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** #define XMC_SPI1_CH1 XMC_USIC1_CH1 /**< SPI1 channel 1 base address */
 133:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** #endif
 134:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 135:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** #if defined(USIC2)
 136:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** #define XMC_SPI2_CH0 XMC_USIC2_CH0 /**< SPI2 channel 0 base address */
 137:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** #define XMC_SPI2_CH1 XMC_USIC2_CH1 /**< SPI2 channel 1 base address */
 138:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** #endif
 139:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 140:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
 141:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * ENUMS
 142:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
 143:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 144:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 145:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Defines return status of SPI driver APIs
 146:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 147:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_STATUS
 148:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** {
 149:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_OK,    /**< Status of the Module: OK */
 150:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_ERROR, /**< Status of the Module: ERROR */
 151:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_BUSY   /**< The Module is busy */
 152:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_STATUS_t;
 153:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 154:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Defines the SPI bus mode
 155:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 156:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_BUS_MODE
 157:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** {
 158:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BUS_MODE_MASTER, /**< SPI Master */
 159:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BUS_MODE_SLAVE   /**< SPI Slave */
 160:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_BUS_MODE_t;
 161:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 162:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 163:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Defines the Polarity of the slave select signals SELO[7:0] in relation to the master slave selec
 164:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 165:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_SLAVE_SEL_MSLS_INV
 166:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** {
 167:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SEL_SAME_AS_MSLS = 0x0UL, /**< The SELO outputs have the same polarity as the MS
 168:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****                                                   (active high) */
 169:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SEL_INV_TO_MSLS = 0x1UL << USIC_CH_PCR_SSCMode_SELINV_Pos /**< The SELO outputs 
 170:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****                                                                                   polarity to the M
 171:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****                                                                                   (active low)*/
 172:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_SLAVE_SEL_MSLS_INV_t;
 173:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 174:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 175:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Defines the Polarity of the data inputs.
 176:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 177:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_DATA_POLARITY
 178:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** {
 179:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_DATA_POLARITY_DIRECT = 0x0UL, /**< The polarity of the data line is not inverted */
 180:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_DATA_POLARITY_INVERT = 0x1UL << USIC_CH_DX2CR_DPOL_Pos /**< The polarity of the data l
 181:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_DATA_POLARITY_t;
 182:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 183:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 184:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Defines Slave Select lines
 185:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 186:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_SLAVE_SELECT
 187:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** {
 188:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_0 = 1UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 0 */
 189:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_1 = 2UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 1 */
 190:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_2 = 4UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 2 */
 191:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_3 = 8UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 3 */
 192:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_4 = 16UL << USIC_CH_PCR_SSCMode_SELO_Pos, /**< Slave Select line 4 */
 193:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_5 = 32UL << USIC_CH_PCR_SSCMode_SELO_Pos, /**< Slave Select line 5 */
 194:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_6 = 64UL << USIC_CH_PCR_SSCMode_SELO_Pos, /**< Slave Select line 6 */
 195:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_7 = 128UL << USIC_CH_PCR_SSCMode_SELO_Pos /**< Slave Select line 7 */
 196:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_SLAVE_SELECT_t;
 197:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 198:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 199:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Defines SPI specific events
 200:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 201:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_EVENT
 202:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** {
 203:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 204:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 205:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 206:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 207:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 208:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 209:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk, /**< Baudrate generator event */
 210:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 211:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_PARITY_ERROR = USIC_CH_PCR_SSCMode_PARIEN_Msk >> 13U,       /**< Parity error ev
 212:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_MSLS_CHANGE =  USIC_CH_PCR_SSCMode_MSLSIEN_Msk >> 13U,      /**< Master slave se
 213:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_DX2TIEN_ACTIVATED = USIC_CH_PCR_SSCMode_DX2TIEN_Msk >> 13U  /**< Slave select in
 214:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_EVENT_t;
 215:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 216:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 217:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Defines SPI event status
 218:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 219:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_STATUS_FLAG
 220:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** {
 221:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_MSLS = USIC_CH_PSR_SSCMode_MSLS_Msk,                          /**< Status 
 222:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****                                                                                             select(
 223:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_DX2S = USIC_CH_PSR_SSCMode_DX2S_Msk,                          /**< Status 
 224:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****                                                                                             input(D
 225:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_MSLS_EVENT_DETECTED = USIC_CH_PSR_SSCMode_MSLSEV_Msk,         /**< Status 
 226:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****                                                                                             output 
 227:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_DX2T_EVENT_DETECTED = USIC_CH_PSR_SSCMode_DX2TEV_Msk,         /**< Status 
 228:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****                                                                                             input s
 229:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_PARITY_ERROR_EVENT_DETECTED = USIC_CH_PSR_SSCMode_PARERR_Msk, /**< Indicat
 230:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****                                                                                             parity 
 231:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_RECEIVER_START_INDICATION = USIC_CH_PSR_SSCMode_RSIF_Msk,     /**< Status 
 232:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****                                                                                             event *
 233:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_DATA_LOST_INDICATION = USIC_CH_PSR_SSCMode_DLIF_Msk,          /**< Status 
 234:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION = USIC_CH_PSR_SSCMode_TSIF_Msk,      /**< Status
 235:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****                                                                                             event *
 236:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION = USIC_CH_PSR_SSCMode_TBIF_Msk,    /**< Status 
 237:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****                                                                                             event *
 238:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_RECEIVE_INDICATION = USIC_CH_PSR_SSCMode_RIF_Msk,             /**< Status 
 239:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION = USIC_CH_PSR_SSCMode_AIF_Msk, /**< Status 
 240:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****                                                                                             receive
 241:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION = USIC_CH_PSR_SSCMode_BRGIF_Msk/**< Status 
 242:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****                                                                                             generat
 243:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_STATUS_FLAG_t;
 244:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 245:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 246:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Defines input frequency sources for slave select signal delay configuration.
 247:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 248:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY
 249:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** {
 250:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FPDIV = 0x0UL, /**< Output of PDIV divider: FPDIV */
 251:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FPPP  = 0x1UL << USIC_CH_PCR_SSCMode_CTQSEL1_Pos, /**< P
 252:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FSCLK = 0x2UL << USIC_CH_PCR_SSCMode_CTQSEL1_Pos, /**< S
 253:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FMCLK = 0x3UL << USIC_CH_PCR_SSCMode_CTQSEL1_Pos  /**< M
 254:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_t;
 255:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 256:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 257:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Define data and clock input stages
 258:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 259:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_INPUT
 260:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** {
 261:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN0 = 0UL,         /**< Data input stage 0 */ 
 262:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_SLAVE_SCLKIN = 1UL, /**< Clock input stage */
 263:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_SLAVE_SELIN = 2UL,  /**< Slave select input stage */
 264:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN1 = 3UL,         /**< Data input stage 1 */
 265:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN2 = 4UL,         /**< Data input stage 2 */
 266:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN3 = 5UL          /**< Data input stage 3 */
 267:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_INPUT_t;
 268:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 269:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 270:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Define SPI data transfer mode
 271:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 272:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_MODE
 273:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** {
 274:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_MODE_STANDARD = 0UL,            /**< SPI standard full duplex mode */ 
 275:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX = 5UL, /**< SPI standard half duplex mode */ 
 276:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_MODE_DUAL= 6UL,                 /**< SPI half duplex mode with dual data lines */ 
 277:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_MODE_QUAD= 7UL                  /**< SPI half duplex mode with quad data lines */
 278:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_MODE_t;
 279:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 280:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 281:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 282:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * SPI Baudrate Generator shift clock passive level
 283:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 284:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 285:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** {
 286:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   /**< Passive clock level 0, delay disabled */
 287:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 288:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   /**< Passive clock level 1, delay disabled */
 289:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 290:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   /**< Passive clock level 0, delay enabled */
 291:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 292:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   /**< Passive clock level 1, delay enabled */
 293:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 294:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 295:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 296:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 297:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * SPI Baudrate Generator shift clock output
 298:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** */
 299:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT
 300:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** {
 301:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK,  /**< Baudrate 
 302:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1  = XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1   /**< Clock obta
 303:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 304:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 305:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 306:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * SPI channel interrupt node pointers
 307:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 308:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_INTERRUPT_NODE_POINTER
 309:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** {
 310:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 311:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 312:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_RECEIVE             = XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIV
 313:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERN
 314:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOC
 315:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_INTERRUPT_NODE_POINTER_t;
 316:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 317:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
 318:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * DATA STRUCTURES
 319:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** ***************************************************************************************************
 320:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 321:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 322:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Structure for initializing SPI channel.
 323:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 324:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** typedef struct XMC_SPI_CH_CONFIG
 325:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** {
 326:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   uint32_t baudrate;							                /**< Module baud rate for communication */
 327:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   bool normal_divider_mode;                       /**< Selects normal divider mode for baudrate gen
 328:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BUS_MODE_t bus_mode;                 /**< Bus mode: Master/Slave */
 329:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SEL_MSLS_INV_t selo_inversion; /**< Enable inversion of Slave select signal rela
 330:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****                                                        MSLS signal  */
 331:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_USIC_CH_PARITY_MODE_t parity_mode;          /**< Enable parity check for transmit and receive
 332:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_CONFIG_t;
 333:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 334:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
 335:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * API PROTOTYPES
 336:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
 337:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 338:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** #ifdef __cplusplus
 339:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** extern "C" {
 340:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** #endif
 341:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 342:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 343:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 344:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param config pointer to constant SPI channel configuration data structure.\n
 345:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *               Refer data structure @ref XMC_SPI_CH_CONFIG_t for detail.
 346:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 347:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @return None
 348:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 349:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 350:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Initializes the selected SPI \a channel with the \a config structure.\n\n
 351:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Enable SPI channel by calling XMC_USIC_CH_Enable() and then configures
 352:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * <ul>
 353:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * <li>Baudrate,</li>
 354:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * <li>Passive data level as active high,</li>
 355:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * <li>Shift control signal as active high,</li>
 356:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * <li>Frame length as 64U,</li>
 357:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * <li>Word length as 8U,</li>
 358:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * <li>Enable Hardware port control mode,</li>
 359:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * <li>Enable transmission of data TDV(Transmit data valid) bit is set to 1,</li>
 360:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * <li>Enable invalidation of data in TBUF once loaded into shift register,</li>
 361:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * <li>Parity mode settings</li>
 362:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * </ul>
 363:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * And if master mode is selected,
 364:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * <ul>
 365:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * <li>Enables MSLS signal generation,</li>
 366:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * <li>configures slave selection as normal mode,</li>
 367:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * <li>Set polarity for the Slave signal,</li>
 368:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * <li>Enable Frame end mode(MSLS signal is kept active after transmission of a frame)</li>
 369:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * </ul>
 370:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 371:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config);
 372:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 373:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 374:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 375:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 376:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @return None
 377:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 378:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 379:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Set the selected USIC channel to operate in SPI mode, by setting CCR.MODE bits.\n\n
 380:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * It should be executed after XMC_SPI_CH_Init() during initialization. By invoking XMC_SPI_CH_Stop
 381:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * to IDLE state. Call XMC_SPI_CH_Start() to set the SPI mode again, as needed later in the program
 382:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 383:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 384:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 385:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 386:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
 387:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** {
 388:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   /* USIC channel in SPI mode */
 389:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 390:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** }
 391:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 392:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 393:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 394:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 395:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @return XMC_SPI_CH_STATUS_t Status of the SPI driver after the request for stopping is processed
 396:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_OK- If the USIC channel is successfully put to IDLE mode. \n
 397:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_BUSY- If the USIC channel is busy transmitting data.
 398:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 399:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 400:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Set the selected SPI channel to IDLE mode, by clearing CCR.MODE bits.\n\n
 401:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * After calling XMC_SPI_CH_Stop, channel is IDLE mode. So no communication is supported. XMC_SPI_C
 402:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * invoked to start the communication again.
 403:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 404:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 405:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Start()
 406:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 407:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_Stop(XMC_USIC_CH_t *const channel);
 408:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 409:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 410:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 411:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param rate Bus speed in bits per second
 412:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 413:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @return XMC_SPI_CH_STATUS_t Status of the SPI driver after the request for setting baudrate is p
 414:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_OK- If the baudrate is successfully changed. \n
 415:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_ERROR- If the new baudrate value is out of range.
 416:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 417:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 418:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Sets the bus speed in bits per second
 419:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 420:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 421:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop(), XMC_USIC_CH_GetSCLKFrequency()
 422:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 423:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate);
 424:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 425:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 426:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 427:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param rate Bus speed in bits per second
 428:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param normal_divider_mode Selects normal divider mode for baudrate generator instead of default
 429:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 430:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @return XMC_SPI_CH_STATUS_t Status of the SPI driver after the request for setting baudrate is p
 431:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_OK- If the baudrate is successfully changed. \n
 432:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_ERROR- If the new baudrate value is out of range.
 433:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 434:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 435:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Sets the bus speed in bits per second
 436:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 437:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 438:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop(), XMC_USIC_CH_GetSCLKFrequency()
 439:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 440:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, const uint32_t rate, boo
 441:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 442:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 443:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 444:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param slave Slave select signal.\n
 445:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *              Refer @ref XMC_SPI_CH_SLAVE_SELECT_t for valid values.
 446:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 447:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @return None
 448:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 449:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 450:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Enable the selected slave signal by setting PCR.SELO bits.\n\n
 451:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Each slave is connected with one slave select signal. This is not configured in XMC_SPI_CH_Init(
 452:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableSlaveSelect() with required \a slave to to start the communication. After finis
 453:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * communication XMC_SPI_CH_DisableSlaveSelect() can be invoked to disable the slaves.
 454:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 455:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 456:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableSlaveSelect()
 457:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 458:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t sla
 459:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 460:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 461:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param channel A constant ponter to XMC_USIC_CH_t, pointing to the USIC channel base address.
 462:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 463:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @return None
 464:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 465:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 466:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Disable all the slave signals by clearing PCR.SELO bits.\n\n
 467:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableSlaveSelect() has to be invoked to start the communication with the desired sla
 468:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 469:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 470:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableSlaveSelect()
 471:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 472:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_DisableSlaveSelect(XMC_USIC_CH_t *const channel);
 473:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 474:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 475:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 476:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param mode Communication mode of the SPI, based on this mode TCI(Transmit control information)i
 477:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *             Refer @ref XMC_SPI_CH_MODE_t for valid values.
 478:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 479:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @return None
 480:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 481:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 482:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * In Dual and Quad modes,  hardware port control(CCR.HPCEN) mode is enabled. \n\n
 483:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * By enabling this the direction of the data pin is updated by hardware itself. Before transmittin
 484:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * mode to ensure the proper communication.
 485:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * 
 486:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 487:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Transmit()
 488:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 489:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE
 490:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** {
 491:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 492:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****                   (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 493:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** }
 494:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 495:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 496:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 497:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param data Data to be transmitted
 498:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param mode Communication mode of the SPI, based on this mode TCI(Transmit control information)i
 499:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *             Refer @ref XMC_SPI_CH_MODE_t for valid values.
 500:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 501:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @return None
 502:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 503:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 504:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Puts the data into FIFO, if FIFO mode is enabled or else into standard buffer, by setting the pr
 505:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * In Dual and Quad modes,  hardware port control(CCR.HPCEN) mode is enabled. By enabling this the 
 506:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * pin is updated by hardware itself. TCI(Transmit Control Information) allows dynamic control of b
 507:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * and pin direction during data transfers by writing to SCTR.DSM and SCTR.HPCDIR bit fields. To su
 508:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * update, TCSR.HPCMD(Hardware Port control) will be enabled during the initialization using XMC_SP
 509:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * 
 510:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * 
 511:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 512:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Receive()
 513:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 514:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t
 515:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 516:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 517:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 518:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param mode Communication mode of the SPI, based on this mode TCI(Transmit control information)i
 519:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *             Refer @ref XMC_SPI_CH_MODE_t for valid values.      
 520:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 521:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @return None
 522:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 523:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 524:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Transmits a dummy data(FFFFH) to provide clock for slave and receives the data from the slave.\n
 525:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Receive() receives the data and places it into buffer based on the FIFO selection. Af
 526:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_GetReceivedData() can be invoked to read the data from the buffers.
 527:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * 
 528:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 529:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_GetReceivedDaa()
 530:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 531:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_Receive(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
 532:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** {
 533:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   /* Transmit dummy data */
 534:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_Transmit(channel, (uint16_t)0xffffU, (XMC_SPI_CH_MODE_t)((uint16_t)mode & 0xfffbU));
 535:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** }
 536:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 537:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 538:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 539:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 540:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @return uint16_t Data read from the receive buffer.
 541:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 542:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 543:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Reads data from the receive buffer based on the FIFO selection.\n\n
 544:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Invocation of XMC_SPI_CH_Receive() receives the data and place it into receive buffer. After rec
 545:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_GetReceivedData() can be used to read the data from the buffer.
 546:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * 
 547:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 548:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Receive()
 549:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 550:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel);
 551:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 552:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 553:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 554:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 555:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @return None
 556:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 557:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 558:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Set the order of data transfer from LSB to MSB, by clearing SCTR.SDIR bit.\n\n
 559:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * This is typically based on the slave settings. Invoke XMC_SPI_CH_SetBitOrderLsbFirst() to set di
 560:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * the program.
 561:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 562:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 563:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_SetBitOrderMsbFirst()
 564:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 565:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetBitOrderLsbFirst(XMC_USIC_CH_t *const channel)
 566:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** {
 567:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   channel->SCTR &= (uint32_t)~USIC_CH_SCTR_SDIR_Msk;
 568:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** }
 569:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 570:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 571:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 572:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 573:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @return None
 574:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 575:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 576:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Set the order of data transfer from MSB to LSB, by setting SCTR.SDIR bit.\n\n
 577:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * This is typically based on the slave settings. This is not set during XMC_SPI_CH_Init(). 
 578:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Invoke XMC_SPI_CH_SetBitOrderMsbFirst() to set direction as needed in the program.
 579:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 580:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 581:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_SetBitOrderLsbFirst()
 582:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 583:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
 584:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** {
 585:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 586:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** }
 587:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 588:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 589:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 590:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param event Protocol events which have to be enabled.
 591:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *              Refer @ XMC_SPI_CH_EVENT_t for valid values. <b>OR</b> combinations of these enum i
 592:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *              as input.
 593:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 594:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @return None
 595:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 596:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 597:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Enables the SPI protocol specific events, by configuring PCR register.\n\n
 598:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Events can be enabled as needed using XMC_SPI_CH_EnableEvent(). 
 599:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableEvent() can be used to disable the events.
 600:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 601:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 602:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableEvent()
 603:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 604:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 605:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 606:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 607:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 608:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param event Protocol events which have to be disabled.
 609:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *              Refer @ XMC_SPI_CH_EVENT_t for valid values. <b>OR</b> combinations of these enum i
 610:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *              as input.
 611:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 612:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @return None
 613:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 614:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 615:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Disables the SPI protocol specific events, by configuring PCR register.\n\n
 616:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * After disabling the events, XMC_SPI_CH_EnableEvent() has to be invoked to re-enable the events.
 617:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 618:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 619:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableEvent()
 620:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 621:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 622:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 623:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 624:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 625:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 626:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @return uint32_t Status of SPI protocol events.
 627:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 628:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 629:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Returns the status of the events, by reading PSR register.\n\n
 630:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * This indicates the status of the all the events, for SPI communication. 
 631:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 632:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 633:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_ClearStatusFlag()
 634:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 635:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE uint32_t XMC_SPI_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
 636:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** {
 637:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   return channel->PSR_SSCMode;
 638:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** }
 639:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** 
 640:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** /**
 641:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 642:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @param flag Protocol event status to be cleared for detection of next occurence.
 643:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *              Refer @ XMC_SPI_CH_STATUS_FLAG_t for valid values. <b>OR</b> combinations of these 
 644:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *              as input.
 645:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * @return None
 646:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 647:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 648:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * Clears the events specified, by setting PSCR register.\n\n
 649:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * During communication the events occurred have to be cleared to detect their next occurence.\n
 650:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * e.g: During transmission Transmit buffer event occurs to indicating data word transfer has start
 651:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *       event has to be cleared after transmission of each data word. Otherwise next event cannot 
 652:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  *
 653:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 654:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_GetStatusFlag()
 655:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****  */
 656:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
 657:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h **** {
 658:C:/Files/Projects/Git/XMCLib/inc\xmc_spi.h ****   channel->PSCR |= flag;
 243              	 .loc 2 658 0
 244 0000 C36C     	 ldr r3,[r0,#76]
 245 0002 43F00103 	 orr r3,r3,#1
 246 0006 C364     	 str r3,[r0,#76]
 247              	.LBE13:
 248              	.LBE12:
 185:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_MSLS);
 186:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   
 187:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   /* Configuration of Protocol Control Register */
 188:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 249              	 .loc 1 188 0
 250 0008 C36B     	 ldr r3,[r0,#60]
 251 000a 23F47F03 	 bic r3,r3,#16711680
 252 000e C363     	 str r3,[r0,#60]
 253 0010 7047     	 bx lr
 254              	 .cfi_endproc
 255              	.LFE276:
 257 0012 00BF     	 .section .text.XMC_SPI_CH_Transmit,"ax",%progbits
 258              	 .align 2
 259              	 .global XMC_SPI_CH_Transmit
 260              	 .thumb
 261              	 .thumb_func
 263              	XMC_SPI_CH_Transmit:
 264              	.LFB277:
 189:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** }
 190:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 191:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** /* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the pr
 192:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t
 193:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** {
 265              	 .loc 1 193 0
 266              	 .cfi_startproc
 267              	 
 268              	 
 269              	 
 270              	.LVL21:
 271 0000 10B4     	 push {r4}
 272              	.LCFI3:
 273              	 .cfi_def_cfa_offset 4
 274              	 .cfi_offset 4,-4
 194:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 195:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 275              	 .loc 1 195 0
 276 0002 036C     	 ldr r3,[r0,#64]
 196:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 277              	 .loc 1 196 0
 278 0004 9401     	 lsls r4,r2,#6
 279 0006 E4B2     	 uxtb r4,r4
 195:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 280              	 .loc 1 195 0
 281 0008 23F0C003 	 bic r3,r3,#192
 282 000c 2343     	 orrs r3,r3,r4
 283 000e 0364     	 str r3,[r0,#64]
 197:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 198:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 199:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   /* Check FIFO size */
 200:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 284              	 .loc 1 200 0
 285 0010 D0F80831 	 ldr r3,[r0,#264]
 286 0014 13F0E06F 	 tst r3,#117440512
 287 0018 0BD1     	 bne .L20
 288              	.L23:
 289              	.LVL22:
 290              	.LBB14:
 291              	.LBB15:
 292              	 .file 3 "C:/Files/Projects/Git/XMCLib/inc/xmc_usic.h"
   1:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
   2:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @file xmc_usic.h
   3:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @date 2019-05-07
   4:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
   5:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @cond
   6:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  **************************************************************************************************
   7:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
   9:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * All rights reserved.                        
  11:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *                                             
  12:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * following conditions are met:   
  14:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *                                                                              
  15:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * disclaimer.                        
  17:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
  18:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
  21:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *                                                                              
  24:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *                                                                              
  32:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  **************************************************************************************************
  35:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  36:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Change History
  37:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * --------------
  38:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  39:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2015-02-20:
  40:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Initial draft<br>
  41:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Documentation improved <br>
  42:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  43:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2015-05-08:
  44:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetInputTriggerCombinationMode() and XMC_USIC_CH_SetTransmitBufferStatus
  45:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *      
  46:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2015-06-20:
  47:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  48:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
  49:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2015-08-17:
  50:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Bug fixed in XMC_USIC_CH_SetTransmitBufferStatus API. OR operator removed.
  51:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  52:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2015-08-24:
  53:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_USIC_CH_DisableDelayCompensation(
  54:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *       XMC_USIC_CH_DisableDelayCompensation()
  55:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  56:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2015-08-25:
  57:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for defining if the data shift unit input is derived
  58:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *       from the input data path DXn or from the selected protocol pre-processors: XMC_USIC_CH_Con
  59:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *       and XMC_USIC_CH_ConnectInputDataShiftToDataInput()
  60:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  61:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2015-08-27:
  62:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Fixed bug in XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T value.
  63:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for direct TBUF access: XMC_USIC_CH_WriteToTBUF() and XMC_USIC_CH_WriteToTBUFTC
  64:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  65:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  66:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2015-08-28:
  67:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added API for enabling the transfer trigger unit to set bit TCSR.TE if the trigger signal 
  68:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *       Clear to Send (CTS) signal: XMC_USIC_CH_EnableTBUFDataValidTrigger() and XMC_USIC_CH_Disab
  69:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  70:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2016-03-09:
  71:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Optimization of write only registers
  72:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  73:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2016-04-10:
  74:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added an API to put the data into FIFO when hardware port control is enabled: XMC_USIC_CH_
  75:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  76:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2017-02-10:
  77:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetShiftDirection() to allow selection of shift direction of the data wo
  78:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetCaptureTimerValue() and XMC_USIC_CH_SetFractionalDivider()
  79:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  80:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2017-09-08:
  81:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Fixed value of macro XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST used in XMC_USIC_CH_SetShiftDir
  82:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  83:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2018-09-29:
  84:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetBaudrateEx which uses the integer divider instead of the fractional d
  85:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
  86:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2019-05-07:
  87:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetBaudrate(), XMC_USIC_CH_GetSCLKFrequency() and XMC_USIC_CH_GetMCLKFre
  88:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  89:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @endcond
  90:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
  91:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
  92:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
  93:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #ifndef XMC_USIC_H
  94:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC_H
  95:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
  96:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * HEADER FILES
  97:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
  98:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
  99:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #include "xmc_common.h"
 100:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 101:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 102:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @addtogroup XMClib XMC Peripheral Library
 103:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @{
 104:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 105:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 106:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 107:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @addtogroup USIC
 108:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @brief Universal Serial Interface Channel(USIC) driver for serial communication.
 109:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 110:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The Universal Serial Interface Channel(USIC) module is a flexible interface module
 111:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * covering several serial communication protocols. A USIC module contains two
 112:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * independent communication channels named USICx_CH0 and USICx_CH1, with x
 113:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * being the number of the USIC module. The user can program, during run-time, which protocol will 
 114:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * by each communication channel and which pins are used.
 115:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The driver provides APIs, configuration structures and enumerations to configure common features
 116:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * communication protocols.
 117:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
 118:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC driver features:
 119:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of FIFO for transmit and receive functions.
 120:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * -# Provides a structure type XMC_USIC_CH_t to represent the USIC channel registers in a programm
 121:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  friendly format.
 122:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of automatic update for frame length, word length, slave select or slave
 123:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * -# Allows transmission of data to FIFO using XMC_USIC_CH_TXFIFO_PutData() and XMC_USIC_CH_TXFIFO
 124:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * -# Allows reading of received data in FIFO using XMC_USIC_CH_RXFIFO_GetData()
 125:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of baudrate using XMC_USIC_CH_SetBaudrate()
 126:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * -# Provides API to trigger interrupts using XMC_USIC_CH_TriggerServiceRequest()
 127:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @{
 128:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 129:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 130:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 131:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * MACROS
 132:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 133:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 134:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0 ((XMC_USIC_t *)USIC0_BASE)			/**< USIC0 module base address */
 135:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH0 ((XMC_USIC_CH_t *)USIC0_CH0_BASE)	/**< USIC0 channel 0 base address */
 136:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH1 ((XMC_USIC_CH_t *)USIC0_CH1_BASE)	/**< USIC0 channel 1 base address */
 137:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 138:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if defined(USIC1)
 139:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1 ((XMC_USIC_t *)USIC1_BASE)			/**< USIC1 module base address */
 140:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH0 ((XMC_USIC_CH_t *)USIC1_CH0_BASE)	/**< USIC1 channel 0 base address */
 141:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH1 ((XMC_USIC_CH_t *)USIC1_CH1_BASE)	/**< USIC1 channel 1 base address */
 142:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 143:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 144:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if defined(USIC2)
 145:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2 ((XMC_USIC_t *)USIC2_BASE)			/**< USIC2 module base address */
 146:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH0 ((XMC_USIC_CH_t *)USIC2_CH0_BASE)	/**< USIC2 channel 0 base address */
 147:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH1 ((XMC_USIC_CH_t *)USIC2_CH1_BASE)	/**< USIC2 channel 1 base address */
 148:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 149:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 150:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Msk  USIC_CH_DX0CR_DSEL_Msk   /**< Common mask for DSEL bitfield mask in 
 151:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Pos  USIC_CH_DX0CR_DSEL_Pos   /**< Common mask for DSEL bitfield position
 152:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Pos USIC_CH_DX0CR_SFSEL_Pos  /**< Common mask for SFSEL bitfield positio
 153:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Msk USIC_CH_DX0CR_SFSEL_Msk  /**< Common mask for SFSEL bitfield mask in
 154:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DPOL_Msk  USIC_CH_DX0CR_DPOL_Msk   /**< Common mask for DPOL bitfield mask in 
 155:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DFEN_Msk  USIC_CH_DX0CR_DFEN_Msk   /**< Common mask for DFEN bitfield mask in 
 156:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEN_Msk  USIC_CH_DX0CR_DSEN_Msk   /**< Common mask for DSEN bitfield mask in 
 157:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Pos    USIC_CH_DX0CR_CM_Pos     /**< Common mask for CM bitfield position i
 158:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Msk    USIC_CH_DX0CR_CM_Msk     /**< Common mask for CM bitfield mask in DX
 159:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_Msk  USIC_CH_DX0CR_INSW_Msk   /**< Common mask for INSW bitfield mask in 
 160:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_pos  USIC_CH_DX0CR_INSW_Pos   /**< Common mask for INSW bitfield position
 161:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 162:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC1
 163:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  #include "xmc1_usic_map.h"
 164:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 165:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 166:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC4
 167:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  #include "xmc4_usic_map.h"
 168:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 169:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 170:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 171:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * ENUMS
 172:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 173:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 174:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 175:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel driver status
 176:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 177:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_STATUS
 178:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 179:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_OK,    /**< USIC driver status : OK */
 180:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_ERROR, /**< USIC driver status : ERROR */
 181:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_BUSY   /**< USIC driver status : BUSY */
 182:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_STATUS_t;
 183:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 184:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 185:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel kernel mode
 186:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 187:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_KERNEL_MODE
 188:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 189:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_0  = 0x0UL,  /**< Run mode 0 (transmission and reception possible)*/
 190:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_1  = 0x1UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Run mode 1 (transmissio
 191:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_0 = 0x2UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Stop mode 0 (no transmi
 192:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_1 = 0x3UL << USIC_CH_KSCFG_NOMCFG_Pos   /**< Stop mode 1 (both trans
 193:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_KERNEL_MODE_t;
 194:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 195:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 196:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel operating mode
 197:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 198:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_OPERATING_MODE
 199:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 200:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_IDLE = 0x0UL, /**< USIC channel idle */
 201:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_SPI  = 0x1UL << USIC_CH_CCR_MODE_Pos, /**< SPI mode */
 202:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_UART = 0x2UL << USIC_CH_CCR_MODE_Pos, /**< UART mode */
 203:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2S  = 0x3UL << USIC_CH_CCR_MODE_Pos, /**< I2S mode */
 204:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2C  = 0x4UL << USIC_CH_CCR_MODE_Pos  /**< I2C mode */
 205:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_OPERATING_MODE_t;
 206:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 207:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 208:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel inputs
 209:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 210:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT
 211:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 212:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX0, /**< DX0 input */
 213:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX1, /**< DX1 input */
 214:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX2, /**< DX2 input */
 215:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX3, /**< DX3 input */
 216:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX4, /**< DX4 input */
 217:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX5  /**< DX5 input */
 218:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_t;
 219:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 220:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 221:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel input source sampling frequency
 222:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 223:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_SAMPLING_FREQ
 224:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 225:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH            = 0x0UL, /**< Use fperiph frequency for input 
 226:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = 0x1UL << USIC_CH_DXCR_SFSEL_Pos  /**< Use fF
 227:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_SAMPLING_FREQ_t;
 228:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 229:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 230:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel input combination mode
 231:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 232:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_COMBINATION_MODE
 233:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 234:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED = 0x0UL, /**< The trigger activation is disab
 235:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE      = 0x1UL, /**< A rising edge activates DXnT*/
 236:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE     = 0x2UL, /**< A falling edge activates DXnT*/
 237:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES       = 0x3UL, /**< Both edges activate DXnT*/
 238:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_COMBINATION_MODE_t;
 239:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 240:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 241:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel data transmission start modes.
 242:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Data shifted out of the transmit pin depends on the value configured for the
 243:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * TDEN bitfield of the TCSR register. Following enum values are used for configuring
 244:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * the TCSR->TDEN bitfield.
 245:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 246:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_START_TRANSMISION_MODE
 247:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 248:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_DISABLED      = 0x0U, /**< Passive data level is sent out on transm
 249:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV        = 0x1UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 250:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0 = 0x2UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 251:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1 = 0x3UL << USIC_CH_TCSR_TDEN_Pos  /**< Transmission o
 252:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_START_TRANSMISION_MODE_t;
 253:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 254:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 255:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel interrupt node pointers
 256:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 257:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INTERRUPT_NODE_POINTER
 258:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 259:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = USIC_CH_INPR_TSINP_Pos, /**< Node pointe
 260:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = USIC_CH_INPR_TBINP_Pos, /**< Node pointe
 261:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE             = USIC_CH_INPR_RINP_Pos,  /**< Node pointe
 262:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = USIC_CH_INPR_AINP_Pos,  /**< Node pointe
 263:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = USIC_CH_INPR_PINP_Pos   /**< Node pointe
 264:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INTERRUPT_NODE_POINTER_t;
 265:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 266:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 267:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel events
 268:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 269:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_EVENT
 270:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 271:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 272:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 273:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 274:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 275:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 276:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 277:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk /**< Baudrate generator event */
 278:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_EVENT_t;
 279:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 280:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 281:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel parity mode
 282:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 283:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_PARITY_MODE
 284:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 285:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_NONE     = 0x0UL,  /**< Disable parity mode */
 286:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_EVEN     = 0x2UL << USIC_CH_CCR_PM_Pos,  /**< Enable even parity mode */
 287:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_ODD      = 0x3UL << USIC_CH_CCR_PM_Pos   /**< Enable odd parity mode */
 288:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PARITY_MODE_t;
 289:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 290:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 291:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel data output mode
 292:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 293:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_DATA_OUTPUT_MODE
 294:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 295:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL   = 0x0UL,  /**< Data output normal mode */
 296:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED = 0x1UL << USIC_CH_SCTR_DOCFG_Pos   /**< Data output invert
 297:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_DATA_OUTPUT_MODE_t;
 298:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 299:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 300:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status
 301:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 302:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS
 303:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 304:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_IDLE = 0x0UL,                 /**< Transfer buffer is currently idle*/
 305:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_BUSY = USIC_CH_TCSR_TDV_Msk   /**< Transfer buffer is currently busy*/
 306:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_t;
 307:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 308:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 309:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 310:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 311:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status modification
 312:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 313:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS_SET
 314:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 315:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_BUSY   = 0x1UL, /**< Set Transfer buffer status to busy*/
 316:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_IDLE   = 0x2UL  /**< Set Transfer buffer status to idle*/
 317:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_SET_t;
 318:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 319:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 320:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel receive buffer status
 321:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 322:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RBUF_STATUS
 323:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 324:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 = USIC_CH_RBUFSR_RDV0_Msk, /**< RBUF0 data has not yet been r
 325:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID1 = USIC_CH_RBUFSR_RDV1_Msk  /**< RBUF1 data has not yet been r
 326:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RBUF_STATUS_t;
 327:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 328:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 329:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel output signal passive data level
 330:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 331:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USCI_CH_PASSIVE_DATA_LEVEL
 332:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 333:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL0 = 0x0UL, /**< Passive level(idle mode signal level) 0 */
 334:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL1 = 0x1UL << USIC_CH_SCTR_PDL_Pos  /**< Passive level(idle mode sig
 335:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PASSIVE_DATA_LEVEL_t;
 336:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 337:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 338:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO size
 339:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 340:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_FIFO_SIZE
 341:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 342:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_DISABLED     = 0x0U,  /**< FIFO Disabled */
 343:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_2WORDS  = 0x1U,  /**< FIFO size: 2 words */
 344:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_4WORDS  = 0x2U,  /**< FIFO size: 4 words */
 345:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_8WORDS  = 0x3U,  /**< FIFO size: 8 words */
 346:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_16WORDS = 0x4U,  /**< FIFO size: 16 words */
 347:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_32WORDS = 0x5U,  /**< FIFO size: 32 words */
 348:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_64WORDS = 0x6U   /**< FIFO size: 64 words */
 349:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_FIFO_SIZE_t;
 350:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 351:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 352:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO interrupt node pointers
 353:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 354:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER
 355:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 356:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_TBCTR_STBINP_Pos,  /**< Node pointe
 357:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_TBCTR_ATBINP_Pos   /**< Node pointe
 358:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t;
 359:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 360:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 361:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO event configuration
 362:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 363:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT_CONF
 364:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 365:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD  = USIC_CH_TBCTR_STBIEN_Msk,   /**< Enable FIFO standard t
 366:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_TBCTR_TBERIEN_Msk  /**< Enable transmi
 367:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_CONF_t;
 368:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 369:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 370:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO status
 371:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 372:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT
 373:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 374:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_STANDARD = USIC_CH_TRBSR_STBI_Msk,    /**< Transmit FIFO status: Standar
 375:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_ERROR    = USIC_CH_TRBSR_TBERI_Msk    /**< Transmit FIFO status: Error e
 376:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_t;
 377:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 378:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 379:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO interrupt node pointers
 380:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 381:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER
 382:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 383:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_RBCTR_SRBINP_Pos, /**< Node pointer
 384:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_RBCTR_ARBINP_Pos  /**< Node pointer
 385:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t;
 386:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 387:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 388:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO event configuration
 389:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 390:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT_CONF
 391:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 392:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD  = USIC_CH_RBCTR_SRBIEN_Msk,   /**< Enable FIFO standard r
 393:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_RBCTR_RBERIEN_Msk,  /**< Enable receiv
 394:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE = USIC_CH_RBCTR_ARBIEN_Msk   /**< Enable FIFO alternative
 395:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_CONF_t;
 396:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 397:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 398:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO status
 399:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 400:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT
 401:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 402:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_STANDARD  = USIC_CH_TRBSR_SRBI_Msk,   /**< Receive FIFO status: Standard
 403:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ERROR     = USIC_CH_TRBSR_RBERI_Msk,  /**< Receive FIFO status: Error ev
 404:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE = USIC_CH_TRBSR_ARBI_Msk    /**< Receive FIFO status: Alternat
 405:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_t;
 406:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 407:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 408:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator clock source
 409:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 410:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_SOURCE
 411:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 412:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DIVIDER = 0x0UL, /**< Baudrate generator clock source : Source divid
 413:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T    = 0x2UL << USIC_CH_BRG_CLKSEL_Pos  /**< Baudrate generator c
 414:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_SOURCE_t;
 415:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 416:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 417:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator divider mode
 418:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 419:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE
 420:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 421:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_DISABLED   = 0x0UL, /**< Baudrate generator clock divider: Dis
 422:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL     = 0x1UL << USIC_CH_FDR_DM_Pos, /**< Baudrate genera
 423:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL = 0x2UL << USIC_CH_FDR_DM_Pos  /**< Baudrate genera
 424:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t;
 425:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 426:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 427:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator master clock passive level
 428:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 429:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL
 430:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 431:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0 = 0x0UL, /**< Baudrate generator master clock passiv
 432:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_1 = 0x1UL << USIC_CH_BRG_MCLKCFG_Pos  /**< Baudrate ge
 433:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t;
 434:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 435:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 436:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock passive level
 437:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 438:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 439:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 440:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = 0x0UL, /**< Shift clock passive leve
 441:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = 0x1UL << USIC_CH_BRG_SCLKCFG_Pos, /*
 442:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = (int32_t)(0x2UL << USIC_CH_BRG_SCLKC
 443:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = (int32_t)(0x3UL << USIC_CH_BRG_SCLKC
 444:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 445:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 446:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 447:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock output
 448:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 449:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
 450:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 451:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = 0x0UL, /**< Baudrate generator shift clock output: SCL.
 452:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1 = 0x1UL << USIC_CH_BRG_SCLKOSEL_Pos   /**< Baudrate genera
 453:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 454:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 455:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 456:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * USIC channel shift direction.
 457:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** * Defines the shift direction of the data words for transmission and reception
 458:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
 459:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_SHIFT_DIRECTION
 460:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 461:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_LSB_FIRST = 0x0UL, /**< Shift LSB first. The first data bit of a data
 462:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST = 0x1UL << USIC_CH_SCTR_SDIR_Pos /**< Shift MSB first. The 
 463:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_SHIFT_DIRECTION_t;
 464:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 465:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 466:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 467:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * DATA STRUCTURES
 468:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 469:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 470:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard start*/
 471:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 472:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   #pragma push
 473:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   #pragma anon_unions
 474:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 475:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   #pragma warning 586
 476:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 477:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 478:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 479:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC module structure
 480:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 481:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef USIC_GLOBAL_TypeDef XMC_USIC_t;
 482:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 483:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 484:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel structure.<br> The members of the structure are same as in the device header file, 
 485:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * except for some registers.
 486:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * DX0CR, DX1CR, DX2CR, DX3CR, DX4CR and DX5CR are replaced with the array DXCR[6].
 487:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * TBUF0 to TBUF31 are replaced with TBUF[32].
 488:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * IN0 to IN31 are replaced with IN[32].
 489:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 490:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** typedef struct XMC_USIC_CH
 491:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 492:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED0;
 493:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  CCFG;			/**< Channel configuration register*/
 494:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED1;
 495:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  KSCFG;			/**< Kernel state configuration register*/
 496:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  FDR;			/**< Fractional divider configuration register*/
 497:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BRG;			/**< Baud rate generator register*/
 498:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  INPR;			/**< Interrupt node pointer register*/
 499:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  DXCR[6];		/**< Input control registers DX0 to DX5.*/
 500:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  SCTR;			/**< Shift control register*/
 501:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TCSR;
 502:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 503:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   union {
 504:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IICMode;	/**< I2C protocol configuration register*/
 505:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IISMode; /**< I2S protocol configuration register*/
 506:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_SSCMode;	/**< SPI protocol configuration register*/
 507:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR;			/**< Protocol configuration register*/
 508:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_ASCMode;	/**< UART protocol configuration register*/
 509:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   };
 510:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CCR;			/**< Channel control register*/
 511:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CMTR;			/**< Capture mode timer register*/
 512:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 513:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   union {
 514:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IICMode;	/**< I2C protocol status register*/
 515:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IISMode;	/**< I2S protocol status register*/
 516:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_SSCMode;	/**< SPI protocol status register*/
 517:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR;			/**< Protocol status register*/
 518:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_ASCMode;	/**< UART protocol status register*/
 519:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   };
 520:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  PSCR;			/**< Protocol status clear register*/
 521:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFSR;		/**< Receive buffer status register*/
 522:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF;			/**< Receive buffer register*/
 523:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFD;			/**< Debug mode receive buffer register*/
 524:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF0;			/**< Receive buffer 0*/
 525:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF1;			/**< Receive buffer 1*/
 526:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF01SR;		/**< Receive buffer status register*/
 527:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  FMR;			/**< Flag modification register*/
 528:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED2[5];
 529:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBUF[32];		/**< Tranmsit buffer registers*/
 530:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYP;			/**< FIFO bypass register*/
 531:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYPCR;			/**< FIFO bypass control register*/
 532:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBCTR;			/**< Transmit FIFO control register*/
 533:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  RBCTR;			/**< Receive FIFO control register*/
 534:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  TRBPTR;		/**< Transmit/recive buffer pointer register*/
 535:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TRBSR;			/**< Transmit/receive buffer status register*/
 536:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  TRBSCR;		/**< Transmit/receive buffer status clear register*/
 537:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTR;			/**< Receive FIFO output register*/
 538:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTDR;			/**< Receive FIFO debug output register*/
 539:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED3[23];
 540:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  IN[32];		/**< Transmit FIFO input register*/
 541:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_t;
 542:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 543:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 544:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard end*/
 545:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 546:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   #pragma pop
 547:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 548:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   #pragma warning restore
 549:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 550:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 551:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 552:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * API PROTOTYPES
 553:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  ******************************************************************************/
 554:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 555:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #ifdef __cplusplus
 556:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** extern "C" {
 557:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 558:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 559:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsModuleValid(const XMC_USIC_t *const module)
 560:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 561:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   bool tmp;
 562:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 563:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   tmp = (module == XMC_USIC0);
 564:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 565:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC1);
 566:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 567:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 568:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC2);
 569:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 570:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 571:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return tmp;
 572:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 573:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 574:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsChannelValid(const XMC_USIC_CH_t *const channel)
 575:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 576:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   bool tmp;
 577:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 578:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   tmp = ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1));
 579:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 580:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1));
 581:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 582:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 583:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1));
 584:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** #endif
 585:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 586:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return tmp;
 587:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 588:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 589:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /* Common APIs */
 590:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 591:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 592:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 593:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 594:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 595:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
 596:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 597:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables the USIC module.\n\n
 598:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables the clock for the USIC module by following the
 599:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * clock enabling sequence for the selected device.
 600:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 601:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 602:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 603:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 604:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Enable(XMC_USIC_t *const usic);
 605:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 606:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 607:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 608:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 609:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 610:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 611:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables the USIC module.\n\n
 612:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables the clock for the USIC module by following the clock
 613:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * disabling sequence for the selected device.
 614:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 615:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 616:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 617:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 618:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Disable(XMC_USIC_t *const usic);
 619:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 620:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 621:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 622:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 623:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 624:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 625:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables the USIC channel. \n\n
 626:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel is enabled by setting the module enable bit in KSCFG register bitfield MODEN.
 627:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * On enabling, the channel is set to idle mode.
 628:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 629:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 630:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 631:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 632:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel);
 633:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 634:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 635:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 636:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 637:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 638:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 639:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables the USIC channel.\n\n
 640:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel is disabled by setting the module enable bit(MDEN) to 0 in the register KSCFG.
 641:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 642:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 643:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 644:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 645:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel);
 646:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 647:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 648:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 649:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 650:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. \b Range: minimum value = 100, maximum value depends on the perip
 651:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/(10
 652:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 653:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 654:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 655:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 656:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 657:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 658:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 659:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 660:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel. \n\n
 661:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 662:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 663:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * baudrate.
 664:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 665:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 666:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 667:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 668:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 669:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 670:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 671:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 672:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 673:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. Only integer dividers of peripheral clock are achievable
 674:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 675:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *            This can be related to the number of samples for each logic state of the data signal.
 676:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *            \b Range: 1 to 32. Value should be chosen based on the protocol used.
 677:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 678:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *      \b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 679:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *            @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 680:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 681:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 682:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel using the integer divider which restrics the achieva
 683:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 684:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 685:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * baudrate.
 686:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 687:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 688:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 689:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 690:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t 
 691:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 692:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 693:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 694:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 695:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 696:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel for .\n
 697:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 698:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 699:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Calculates the current used baudrate (fCTQIN) of a USIC channel. \n\n
 700:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png	 
 701:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png	 
 702:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 703:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 704:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 705:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 706:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetBaudrate(XMC_USIC_CH_t *const channel);
 707:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 708:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 709:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 710:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 711:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel.\n
 712:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 713:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 714:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Calculates the current used SCLK frequency of a USIC channel. \n\n
 715:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png	 
 716:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png	 
 717:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 718:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 719:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 720:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 721:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetSCLKFrequency(XMC_USIC_CH_t *const channel);
 722:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 723:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 724:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 725:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 726:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel.\n
 727:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 728:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 729:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Calculates the current used MCLK frequency of a USIC channel. \n\n
 730:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png	 
 731:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png	 
 732:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 733:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 734:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 735:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 736:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetMCLKFrequency(XMC_USIC_CH_t *const channel);
 737:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 738:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 739:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 740:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 741:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  pdiv Desired divider for the external frequency input. \b Range: minimum value = 1, maxi
 742:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 743:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 744:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 745:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Selects which edge of the synchronized(and optionally filtered) signal 
 746:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *                          output DXnT of the input stage.
 747:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 748:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 749:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 750:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 751:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables the external frequency input for the Baudrate Generator and configures the divider, over
 752:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * the combination mode of the USIC channel. \n\n
 753:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 754:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 755:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBRGInputClockSource(), XMC_USIC_CH_SetInputTriggerCombinationMode() \n\n\n
 756:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 757:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 758:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 		                                         const uint16_t pdiv,
 759:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 												 const uint32_t oversampling,
 760:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 												 const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode);
 761:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 762:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 763:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 764:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 765:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 766:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 767:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  source Input source select for the input stage. The table below maps the enum value with
 768:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 769:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 770:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * </tr></table>
 771:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 772:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 773:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 774:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Selects the data source for USIC input stage.\n\n
 775:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 776:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * like DX0CR, DX1CR etc. 
 777:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *  
 778:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 779:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableIn
 780:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 781:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 782:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INP
 783:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 784:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 785:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 786:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 787:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 788:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 789:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 790:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 791:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 792:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 793:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 794:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 795:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is controlled by the
 796:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * protocol pre-processor. \n\n
 797:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 798:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 799:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToDataInput()\n\n\n
 800:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 801:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_USIC_CH_t *const channel, const XMC
 802:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 803:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_INSW_Msk;
 804:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 805:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 806:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 807:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 808:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 809:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 810:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 811:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 812:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 813:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 814:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is connected to
 815:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * the selected data input line. \n\n
 816:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 817:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * This setting is used
 818:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * if the signals are directly derived from an input
 819:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * pin without treatment by the protocol preprocessor.
 820:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 821:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToPPP()\n\n\n
 822:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 823:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToDataInput(XMC_USIC_CH_t *const channel, con
 824:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 825:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_INSW_Msk;
 826:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 827:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 828:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 829:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 830:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 831:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 832:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 833:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 834:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 835:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 836:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables input inversion for USIC channel input data signal. \n\n
 837:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 838:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Polarity of the input source can be changed to provide inverted data input.
 839:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 840:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputInversion()\n\n\n
 841:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 842:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_
 843:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 844:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 845:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 846:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 847:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 848:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 849:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 850:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 851:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 852:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 853:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 854:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 855:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables input inversion for USIC channel. \n\n
 856:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 857:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Resets the input data polarity for the USIC channel input data signal.
 858:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 859:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion()\n\n\n
 860:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 861:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC
 862:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 863:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DPOL_Msk;
 864:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 865:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 866:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 867:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 868:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 869:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 870:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 871:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 872:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables delay compensation. \n\n
 873:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 874:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Delay compensation can be applied to the receive path.
 875:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 876:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableDelayCompensation()\n\n\n
 877:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 878:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableDelayCompensation(XMC_USIC_CH_t *const channel)
 879:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 880:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] |= USIC_CH_DX1CR_DCEN_Msk;
 881:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 882:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 883:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 884:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 885:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 886:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 887:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 888:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 889:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables delay compensation.. \n\n
 890:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 891:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 892:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableDelayCompensation()\n\n\n
 893:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 894:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableDelayCompensation(XMC_USIC_CH_t *const channel)
 895:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 896:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] &=(uint32_t)~USIC_CH_DX1CR_DCEN_Msk;
 897:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 898:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 899:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 900:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 901:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 902:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 903:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 904:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 905:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 906:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 907:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables the input digital filter for USIC channel input data signal. \n\n
 908:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be digitally filtered.
 909:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 910:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 911:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 912:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 913:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_U
 914:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 915:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 916:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 917:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 918:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 919:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 920:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 921:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 922:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 923:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 924:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 925:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables the input digital filter for USIC channel input data signal. \n\n
 926:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be digitally filtered.
 927:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 928:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 929:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 930:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 931:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_
 932:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 933:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DFEN_Msk;
 934:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 935:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 936:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 937:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 938:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 939:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 940:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 941:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 942:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 943:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables input synchronization for the USIC channel input data signal. \n\n
 944:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be synchronized with fPERIPH.
 945:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * A noisy signal can be synchronized and filtered by enabling the digital filter.
 946:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 947:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 948:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 949:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 950:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_IN
 951:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 952:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 953:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 954:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 955:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 956:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 957:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 958:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 959:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 960:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 961:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 962:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables input synchronization for the USIC channel input data signal. \n\n
 963:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be synchronized.
 964:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 965:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 966:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_DisableInputDigitalFilter() \n\n\n
 967:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 968:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_I
 969:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 970:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DSEN_Msk;
 971:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 972:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 973:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 974:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 975:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 976:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 977:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  sampling_freq Sampling frequency value of type \a XMC_USIC_CH_INPUT_SAMPLING_FREQ_t.
 978:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
 979:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 980:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 981:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets sampling frequency for USIC channel input data signal. \n\n
 982:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
 983:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 984:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 985:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
 986:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSamplingFreq(XMC_USIC_CH_t *const channel,
 987:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_t input,
 988:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_SAMPLING_FREQ_t sampling_fr
 989:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
 990:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_SFSEL_Msk)) |
 991:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)sampling_freq);
 992:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
 993:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
 994:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
 995:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 996:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 997:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 998:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 999:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Combination mode value of type \a XMC_USIC_CH_INPUT_COMBINATION_MODE_t.
1000:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1001:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1002:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1003:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Selects which edge of the synchronized signal DXnS activates the trigger output DXnT of the inpu
1004:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1005:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1006:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
1007:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1008:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
1009:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_t input,
1010:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_COMBINATION_MODE_
1011:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1012:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
1013:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
1014:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1015:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1016:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1017:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1018:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1019:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  clock_source clock source for the BRG.
1020:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1021:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1022:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1023:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the clock source for the BRG. \n\n
1024:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1025:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1026:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
1027:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1028:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USI
1029:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1030:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
1031:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1032:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1033:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1034:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1035:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1036:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1037:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1038:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1039:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1040:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1041:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit buffer. \n\n
1042:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in TBUF[0U].
1043:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1044:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1045:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1046:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUFTCI() \n\n\n
1047:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1048:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUF(XMC_USIC_CH_t *const channel, const uint16_t data)
1049:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1050:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TBUF[0U] = data;
1051:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1052:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1053:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1054:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1055:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1056:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1057:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param transmit_control_information transmit control information to be configured while transmit
1058:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31.
1059:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1060:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1061:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1062:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit buffer in a control mode. \n\n
1063:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the respective control mode is enabled , this API can be used.
1064:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1065:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1066:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1067:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUF() \n\n\n
1068:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1069:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
1070:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                              const uint16_t data,
1071:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                              const uint32_t transmit_control_information)
1072:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1073:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TBUF[transmit_control_information] = data;
1074:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1075:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1076:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1077:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1078:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1079:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1080:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					   \b Range: minimum= 1, maximum= 16. \n
1081:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					   e.g: For word length of 8, \a word_length should be provided as 8.
1082:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1083:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1084:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1085:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1086:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1087:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1088:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1089:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1090:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1091:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
1092:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1093:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
1094:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                   (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
1095:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1096:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1097:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1098:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1099:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1100:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1101:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *             \b Range: minimum= 1, maximum= 16. \n
1102:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *             e.g: For word length of 8, \a word_length should be provided as 8.
1103:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1104:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1105:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1106:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1107:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1108:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1109:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1110:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1111:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1112:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetShiftDirection(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_
1113:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1114:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_SDIR_Msk)) | (uint32_t)shift_direction;
1115:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1116:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1117:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1118:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1119:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1120:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1121:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Captured counter value 
1122:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1123:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1124:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1125:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The value of the counter is captured if one of the trigger signals DX0T or DX1T are activated by
1126:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1127:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetCaptureTimerValue(const XMC_USIC_CH_t *const channel)
1128:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1129:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return channel->CMTR;
1130:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1131:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1132:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1133:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1134:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1135:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  mode divider mode ::XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t \n
1136:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  step divider \n
1137:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL resulting divider = 1023 - step \n
1138:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL resulting divider = 1023 / step \n
1139:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1140:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1141:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1142:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1143:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The fractional divider generates its output frequency fFD by either dividing the input frequency
1144:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1145:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1146:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFractionalDivider(XMC_USIC_CH_t *const channel, const XMC_USIC_
1147:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1148:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->FDR = mode | step;
1149:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1150:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1151:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1152:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1153:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1154:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  frame_length Number of bits in a frame. \n
1155:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						\b Range: minimum= 1, maximum= 0x3f. The maximum value for fixed frame size is 0x3f. \n
1156:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						e.g: For a frame length of 16, \a frame_length should be provided as 16.
1157:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1158:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1159:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1160:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Define the data frame length.\n\n
1161:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Set the number of bits to be serially transmitted in a frame.
1162:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The frame length should be multiples of word length. If the value is set to 0x40, the frame leng
1163:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * has to be controlled explicitly. 
1164:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1165:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1166:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1167:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1168:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
1169:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1170:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
1171:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                   (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
1172:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1173:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1174:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1175:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1176:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1177:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be enabled. Use @ref XMC_USIC_CH_EVENT_t for the 
1178:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1179:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1180:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1181:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1182:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1183:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enable the channel interrupt events.\n\n
1184:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Common channel events related to serial communication can be configured using this API.
1185:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1186:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1187:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1188:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1189:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1190:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1191:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1192:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1193:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->CCR |= event;
1194:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1195:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1196:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1197:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1198:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1199:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be disabled. Use @ref XMC_USIC_CH_EVENT_t for the
1200:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1201:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1202:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1203:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1204:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1205:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disable the channel interrupt events. \n\n
1206:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1207:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1208:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1209:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1210:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1211:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
1212:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1213:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1214:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->CCR &= (uint32_t)~event;
1215:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1216:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1217:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1218:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1219:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1220:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
1221:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
1222:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
1223:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param service_request Service request number.\n
1224:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1225:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1226:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1227:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1228:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the interrupt node for USIC channel events. \n\n
1229:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
1230:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
1231:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
1232:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1233:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1234:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent() \n\n\n
1235:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1236:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1237:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                          const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
1238:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                          const uint32_t service_request);
1239:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1240:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1241:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1242:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1243:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Stataus @ref XMC_USIC_CH_TBUF_STATUS_IDLE if transmit buffer is free,
1244:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *                 @ref XMC_USIC_CH_TBUF_STATUS_BUSY if transmit buffer is busy.
1245:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1246:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1247:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Gets transmit buffer status. \n\n
1248:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Status indicates whether the transmit buffer is free, or busy transmitting data.
1249:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The status depends on the value of TDV flag in TCSR register.
1250:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * This status can be used while transmitting data. Transmit data when the transmit buffer
1251:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * status is @ref XMC_USIC_CH_TBUF_STATUS_IDLE.
1252:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1253:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1254:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetDataOutputMode() \n\n\n
1255:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1256:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const 
1257:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1258:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 293              	 .loc 3 1258 0 discriminator 1
 294 001a 836B     	 ldr r3,[r0,#56]
 295              	.LBE15:
 296              	.LBE14:
 201:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   {
 202:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) == (uint32_t)XMC_USIC_CH_TBUF_STAT
 297              	 .loc 1 202 0 discriminator 1
 298 001c 13F0800F 	 tst r3,#128
 299 0020 FBD1     	 bne .L23
 300              	.LVL23:
 301              	.LBB16:
 302              	.LBB17:
 303              	 .loc 2 658 0
 304 0022 C36C     	 ldr r3,[r0,#76]
 305 0024 43F40053 	 orr r3,r3,#8192
 306 0028 C364     	 str r3,[r0,#76]
 307              	.LBE17:
 308              	.LBE16:
 203:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     {
 204:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     }
 205:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   
 206:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 207:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   
 208:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     channel->TBUF[mode] = data;
 309              	 .loc 1 208 0
 310 002a 2032     	 adds r2,r2,#32
 311              	.LVL24:
 312 002c 40F82210 	 str r1,[r0,r2,lsl#2]
 313 0030 02E0     	 b .L19
 314              	.LVL25:
 315              	.L20:
 209:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   }
 210:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   else
 211:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   {
 212:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     channel->IN[mode] = data;
 316              	 .loc 1 212 0
 317 0032 6032     	 adds r2,r2,#96
 318              	.LVL26:
 319 0034 40F82210 	 str r1,[r0,r2,lsl#2]
 320              	.L19:
 213:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   }
 214:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** }
 321              	 .loc 1 214 0
 322 0038 5DF8044B 	 ldr r4,[sp],#4
 323              	.LCFI4:
 324              	 .cfi_restore 4
 325              	 .cfi_def_cfa_offset 0
 326 003c 7047     	 bx lr
 327              	 .cfi_endproc
 328              	.LFE277:
 330 003e 00BF     	 .section .text.XMC_SPI_CH_GetReceivedData,"ax",%progbits
 331              	 .align 2
 332              	 .global XMC_SPI_CH_GetReceivedData
 333              	 .thumb
 334              	 .thumb_func
 336              	XMC_SPI_CH_GetReceivedData:
 337              	.LFB278:
 215:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 216:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** /* Reads the data from the buffers based on the FIFO mode selection. */
 217:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
 218:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** {
 338              	 .loc 1 218 0
 339              	 .cfi_startproc
 340              	 
 341              	 
 342              	 
 343              	.LVL27:
 219:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   uint16_t retval;
 220:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 221:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   /* Check FIFO size */
 222:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 344              	 .loc 1 222 0
 345 0000 D0F80C31 	 ldr r3,[r0,#268]
 346 0004 13F0E06F 	 tst r3,#117440512
 223:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   {
 224:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     retval = (uint16_t)channel->RBUF;
 347              	 .loc 1 224 0
 348 0008 0CBF     	 ite eq
 349 000a 406D     	 ldreq r0,[r0,#84]
 350              	.LVL28:
 225:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   }
 226:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   else
 227:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   {
 228:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     retval = (uint16_t)channel->OUTR;
 351              	 .loc 1 228 0
 352 000c D0F81C01 	 ldrne r0,[r0,#284]
 353 0010 80B2     	 uxth r0,r0
 354              	.LVL29:
 229:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   }
 230:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 231:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   return retval;
 232:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** }
 355              	 .loc 1 232 0
 356 0012 7047     	 bx lr
 357              	 .cfi_endproc
 358              	.LFE278:
 360              	 .section .text.XMC_SPI_CH_SetInterwordDelay,"ax",%progbits
 361              	 .align 2
 362              	 .global XMC_SPI_CH_SetInterwordDelay
 363              	 .thumb
 364              	 .thumb_func
 366              	XMC_SPI_CH_SetInterwordDelay:
 367              	.LFB279:
 233:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 234:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** /* Configures the inter word delay by setting PCR.PCTQ1, PCR.DCTQ1 bit fields. */
 235:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** void XMC_SPI_CH_SetInterwordDelay(XMC_USIC_CH_t *const channel,uint32_t tinterword_delay_us)
 236:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** {
 368              	 .loc 1 236 0
 369              	 .cfi_startproc
 370              	 
 371              	 
 372              	.LVL30:
 373 0000 2DE9F843 	 push {r3,r4,r5,r6,r7,r8,r9,lr}
 374              	.LCFI5:
 375              	 .cfi_def_cfa_offset 32
 376              	 .cfi_offset 3,-32
 377              	 .cfi_offset 4,-28
 378              	 .cfi_offset 5,-24
 379              	 .cfi_offset 6,-20
 380              	 .cfi_offset 7,-16
 381              	 .cfi_offset 8,-12
 382              	 .cfi_offset 9,-8
 383              	 .cfi_offset 14,-4
 384 0004 0546     	 mov r5,r0
 385 0006 0C46     	 mov r4,r1
 386              	.LVL31:
 237:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   uint32_t peripheral_clock;
 238:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   uint32_t pdiv;
 239:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   uint32_t step;
 240:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   uint32_t fFD;
 241:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   uint32_t fpdiv;
 242:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   uint32_t divider_factor1 = 0U;
 243:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   uint32_t divider_factor2 = 32U;
 244:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   uint32_t divider_factor1_int = 0U;
 245:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   uint32_t divider_factor1_int_min = 4U;
 246:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   uint32_t divider_factor1_frac_min =100U;
 247:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   uint32_t divider_factor1_frac = 0U;
 248:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   uint32_t divider_factor2_temp = 0U;
 249:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 387              	 .loc 1 249 0
 388 0008 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 389              	.LVL32:
 250:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   pdiv = (uint32_t)(channel->BRG & USIC_CH_BRG_PDIV_Msk) >> USIC_CH_BRG_PDIV_Pos;
 390              	 .loc 1 250 0
 391 000c 6A69     	 ldr r2,[r5,#20]
 392              	.LVL33:
 251:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   step = (uint32_t)(channel->FDR & USIC_CH_FDR_STEP_Msk) >> USIC_CH_FDR_STEP_Pos;
 393              	 .loc 1 251 0
 394 000e 2B69     	 ldr r3,[r5,#16]
 395              	.LVL34:
 252:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   fFD = (uint32_t)((peripheral_clock >> 10U) * step);
 396              	 .loc 1 252 0
 397 0010 800A     	 lsrs r0,r0,#10
 398              	.LVL35:
 251:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   step = (uint32_t)(channel->FDR & USIC_CH_FDR_STEP_Msk) >> USIC_CH_FDR_STEP_Pos;
 399              	 .loc 1 251 0
 400 0012 C3F30903 	 ubfx r3,r3,#0,#10
 401              	.LVL36:
 402              	 .loc 1 252 0
 403 0016 03FB00F3 	 mul r3,r3,r0
 250:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   pdiv = (uint32_t)(channel->BRG & USIC_CH_BRG_PDIV_Msk) >> USIC_CH_BRG_PDIV_Pos;
 404              	 .loc 1 250 0
 405 001a C2F30941 	 ubfx r1,r2,#16,#10
 253:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   fpdiv= fFD/(1U+pdiv);
 406              	 .loc 1 253 0
 407 001e 0131     	 adds r1,r1,#1
 408 0020 B3FBF1F1 	 udiv r1,r3,r1
 409              	.LVL37:
 254:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 255:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   if(tinterword_delay_us < (128000000/fpdiv))
 410              	 .loc 1 255 0
 411 0024 264B     	 ldr r3,.L38
 412 0026 B3FBF1F3 	 udiv r3,r3,r1
 413 002a A342     	 cmp r3,r4
 414 002c 30D9     	 bls .L35
 256:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   {
 257:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     for(divider_factor2_temp = 32U; divider_factor2_temp > 0U; --divider_factor2_temp)
 258:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     {
 259:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 260:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****       divider_factor1 = (tinterword_delay_us*fpdiv)/(divider_factor2_temp*10000);
 415              	 .loc 1 260 0
 416 002e 04FB01F1 	 mul r1,r4,r1
 417              	.LVL38:
 418 0032 2448     	 ldr r0,.L38+4
 419 0034 2024     	 movs r4,#32
 420              	.LVL39:
 421 0036 4FF0640E 	 mov lr,#100
 422 003a 4FF00408 	 mov r8,#4
 423 003e A446     	 mov ip,r4
 261:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****       divider_factor1_frac = divider_factor1%100U;
 424              	 .loc 1 261 0
 425 0040 214E     	 ldr r6,.L38+8
 426 0042 7746     	 mov r7,lr
 427              	.LVL40:
 428              	.L34:
 260:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****       divider_factor1_frac = divider_factor1%100U;
 429              	 .loc 1 260 0
 430 0044 B1FBF0F2 	 udiv r2,r1,r0
 431              	.LVL41:
 432              	 .loc 1 261 0
 433 0048 A6FB0293 	 umull r9,r3,r6,r2
 434 004c 5B09     	 lsrs r3,r3,#5
 435 004e 07FB1323 	 mls r3,r7,r3,r2
 436              	.LVL42:
 262:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 263:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****       if(divider_factor1_frac > 50)
 437              	 .loc 1 263 0
 438 0052 322B     	 cmp r3,#50
 439 0054 09D9     	 bls .L31
 264:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****       {
 265:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****         divider_factor1_int =  (divider_factor1/100U)+1;
 440              	 .loc 1 265 0
 441 0056 A6FB0239 	 umull r3,r9,r6,r2
 442              	.LVL43:
 443 005a 4FEA5919 	 lsr r9,r9,#5
 444              	.LVL44:
 445 005e 09F10109 	 add r9,r9,#1
 446              	.LVL45:
 266:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****         divider_factor1_frac = (divider_factor1_int*100)-divider_factor1;
 447              	 .loc 1 266 0
 448 0062 07FB09F3 	 mul r3,r7,r9
 449 0066 9B1A     	 subs r3,r3,r2
 450              	.LVL46:
 451 0068 03E0     	 b .L32
 452              	.LVL47:
 453              	.L31:
 267:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****       }
 268:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****       else
 269:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****       {
 270:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****         divider_factor1_int =  (divider_factor1/100U);
 454              	 .loc 1 270 0
 455 006a A6FB0292 	 umull r9,r2,r6,r2
 456              	.LVL48:
 457 006e 4FEA5219 	 lsr r9,r2,#5
 458              	.LVL49:
 459              	.L32:
 271:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****       }
 272:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 273:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****       if ((divider_factor1_int < 5U) && (divider_factor1_int > 0) && (divider_factor1_frac < divide
 460              	 .loc 1 273 0
 461 0072 09F1FF32 	 add r2,r9,#-1
 462 0076 032A     	 cmp r2,#3
 463 0078 04D8     	 bhi .L33
 464              	 .loc 1 273 0 is_stmt 0 discriminator 1
 465 007a 7345     	 cmp r3,lr
 466 007c 02D2     	 bcs .L33
 274:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****       {
 275:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****         divider_factor1_frac_min = divider_factor1_frac;
 467              	 .loc 1 275 0 is_stmt 1
 468 007e 9E46     	 mov lr,r3
 469              	.LVL50:
 276:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****         divider_factor1_int_min = divider_factor1_int;
 470              	 .loc 1 276 0
 471 0080 C846     	 mov r8,r9
 273:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****       {
 472              	 .loc 1 273 0
 473 0082 A446     	 mov ip,r4
 474              	.L33:
 475              	.LVL51:
 476 0084 A0F51C50 	 sub r0,r0,#9984
 477              	.LVL52:
 478 0088 1038     	 subs r0,r0,#16
 479              	.LVL53:
 257:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     {
 480              	 .loc 1 257 0 discriminator 2
 481 008a 013C     	 subs r4,r4,#1
 482              	.LVL54:
 483 008c DAD1     	 bne .L34
 484 008e 03E0     	 b .L30
 485              	.LVL55:
 486              	.L35:
 245:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   uint32_t divider_factor1_frac_min =100U;
 487              	 .loc 1 245 0
 488 0090 4FF00408 	 mov r8,#4
 243:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   uint32_t divider_factor1_int = 0U;
 489              	 .loc 1 243 0
 490 0094 4FF0200C 	 mov ip,#32
 491              	.LVL56:
 492              	.L30:
 277:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****         divider_factor2= divider_factor2_temp;
 278:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****       }
 279:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     }
 280:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   }
 281:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 282:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   channel->PCR_SSCMode = (uint32_t)((channel->PCR_SSCMode) & (~(USIC_CH_PCR_SSCMode_DCTQ1_Msk |
 493              	 .loc 1 282 0
 494 0098 E96B     	 ldr r1,[r5,#60]
 283:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****                                                                 USIC_CH_PCR_SSCMode_PCTQ1_Msk |
 284:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****                                                                 USIC_CH_PCR_SSCMode_CTQSEL1_Msk))) 
 285:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****                          (((divider_factor1_int_min - 1) << USIC_CH_PCR_SSCMode_PCTQ1_Pos) & (uint3
 495              	 .loc 1 285 0
 496 009a 08F1FF33 	 add r3,r8,#-1
 497 009e 9B01     	 lsls r3,r3,#6
 498 00a0 DAB2     	 uxtb r2,r3
 286:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****                          (((divider_factor2 - 1 ) << USIC_CH_PCR_SSCMode_DCTQ1_Pos) & (uint32_t)USI
 499              	 .loc 1 286 0
 500 00a2 0CF1FF33 	 add r3,ip,#-1
 501 00a6 1B02     	 lsls r3,r3,#8
 502 00a8 03F4F853 	 and r3,r3,#7936
 503 00ac 1343     	 orrs r3,r3,r2
 282:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****                                                                 USIC_CH_PCR_SSCMode_PCTQ1_Msk |
 504              	 .loc 1 282 0
 505 00ae 21F4FF52 	 bic r2,r1,#8160
 506 00b2 22F01002 	 bic r2,r2,#16
 285:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****                          (((divider_factor2 - 1 ) << USIC_CH_PCR_SSCMode_DCTQ1_Pos) & (uint32_t)USI
 507              	 .loc 1 285 0
 508 00b6 1343     	 orrs r3,r3,r2
 282:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****                                                                 USIC_CH_PCR_SSCMode_PCTQ1_Msk |
 509              	 .loc 1 282 0
 510 00b8 EB63     	 str r3,[r5,#60]
 511 00ba BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 512              	.LVL57:
 513              	.L39:
 514 00be 00BF     	 .align 2
 515              	.L38:
 516 00c0 0020A107 	 .word 128000000
 517 00c4 00E20400 	 .word 320000
 518 00c8 1F85EB51 	 .word 1374389535
 519              	 .cfi_endproc
 520              	.LFE279:
 522              	 .section .text.XMC_SPI_CH_Stop,"ax",%progbits
 523              	 .align 2
 524              	 .global XMC_SPI_CH_Stop
 525              	 .thumb
 526              	 .thumb_func
 528              	XMC_SPI_CH_Stop:
 529              	.LFB280:
 287:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** }
 288:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 289:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_Stop(XMC_USIC_CH_t *const channel)
 290:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** {
 530              	 .loc 1 290 0
 531              	 .cfi_startproc
 532              	 
 533              	 
 534              	 
 535              	.LVL58:
 536              	.LBB18:
 537              	.LBB19:
 538              	 .loc 3 1258 0
 539 0000 836B     	 ldr r3,[r0,#56]
 540              	.LBE19:
 541              	.LBE18:
 291:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   XMC_SPI_CH_STATUS_t status = XMC_SPI_CH_STATUS_OK;
 292:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 293:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   if (((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) & (uint32_t)XMC_USIC_CH_TBUF_STATUS_B
 542              	 .loc 1 293 0
 543 0002 13F0800F 	 tst r3,#128
 544 0006 05D1     	 bne .L42
 545              	.LVL59:
 546              	.LBB20:
 547              	.LBB21:
1259:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1260:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1261:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1262:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @brief API to get receive buffer status
1263:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1264:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1265:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status of data validity check for RBUF0 and RBUF1. \n
1266:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		   Returned value should be masked with RDV0 and RDV1 bits to know the status. \n
1267:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		   \b Range: @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID0, @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID
1268:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1269:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1270:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Checks if RBUF0 and RBUF1 have valid unread data. \n\n
1271:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * It checks the bits RDV0 and RDV1 of the RBUFSR register.
1272:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Returns the value of RBUFSR masked with bitmasks of RDV0 and RDV1.
1273:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * It can be used to decide whether 2bytes has to be read from RBUF or 1 byte. 
1274:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * If both bitmasks XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 and XMC_USIC_CH_RBUF_STATUS_DATA_VALID1
1275:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * are set, then 2 bytes can be read from RBUF. If only either of them is set, then only one byte
1276:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * can be read from RBUF.
1277:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1278:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1279:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1280:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
1281:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1282:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
1283:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1284:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1285:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1286:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1287:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1288:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1289:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  start_transmision_mode Transmission mode to be enabled. \n
1290:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 								\b Range: @ref XMC_USIC_CH_START_TRANSMISION_DISABLED,
1291:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV, @ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2
1292:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1
1293:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *                              
1294:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1295:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1296:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1297:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Configures data transmission. \n\n
1298:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The configuration affects the data shifted on the DOUT0 pin.
1299:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1300:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1301:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetDataOutputMode() \n\n\n
1302:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1303:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetStartTransmisionMode(XMC_USIC_CH_t *const channel,
1304:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                          const XMC_USIC_CH_START_TRANSMISION_MODE_t
1305:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1306:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~USIC_CH_TCSR_TDEN_Msk)) | (uint32_t)start_transmisio
1307:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1308:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1309:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1310:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1311:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1312:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1313:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  data_output_mode  Data output mode. \n
1314:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL, @ref XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTE
1315:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1316:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1317:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1318:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Configures the mode for data output. \n\n
1319:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel can be configured to shift inverted data or direct data based on the input to the A
1320:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1321:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1322:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1323:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1324:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetDataOutputMode(XMC_USIC_CH_t *const channel,
1325:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                    const XMC_USIC_CH_DATA_OUTPUT_MODE_t data_output
1326:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1327:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_DOCFG_Msk)) | (uint32_t)data_output_mod
1328:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1329:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1330:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1331:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1332:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1333:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1334:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1335:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1336:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables automatic update of frame length. \n\n
1337:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the automatic update of frame length is enabled, frame length is configured based on the 
1338:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], frame length is co
1339:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1340:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * IN[x] register.
1341:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1342:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1343:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1344:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1345:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableFrameLengthControl(XMC_USIC_CH_t *const channel)
1346:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1347:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1348:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_SELMD_Msk |
1349:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_WAMD_Msk |
1350:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_HPCMD_Msk))) |
1351:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                          (uint32_t)USIC_CH_TCSR_FLEMD_Msk;
1352:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1353:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1354:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1355:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1356:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1357:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1358:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1359:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1360:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables automatic update of frame length. \n\n
1361:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When automatic update of frame length is disabled, frame length has to configured explicitly.
1362:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Frame length remains fixed until it is changed again.
1363:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1364:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1365:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_SetFrameLength() \n\n\n
1366:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1367:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableFrameLengthControl(XMC_USIC_CH_t *const channel)
1368:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1369:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_FLEMD_Msk;
1370:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1371:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1372:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1373:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1374:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1375:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1376:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1377:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1378:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is set if DX2T becomes active while TDV = 1. \n\n
1379:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables the transfer trigger unit to set bit TCSR.TE if the trigger signal DX2T becomes active
1380:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * for event driven transfer starts.
1381:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1382:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1383:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTBUFDataValidTrigger()\n\n\n
1384:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1385:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1386:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1387:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_TDVTR_Msk;
1388:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1389:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1390:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1391:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1392:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1393:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1394:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1395:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1396:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables the trigger of TDV depending on DX2T signal. \n\n
1397:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is permanently set.
1398:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1399:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1400:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTBUFDataValidTrigger() \n\n\n
1401:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1402:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1403:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1404:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_TDVTR_Msk;
1405:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1406:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1407:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1408:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1409:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1410:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  service_request_line service request number of the event to be triggered. \n
1411:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 0 to 5.
1412:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1413:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1414:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1415:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Trigger a USIC interrupt service request.\n\n
1416:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the USIC service request is triggered, the NVIC interrupt associated with it will be 
1417:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * generated if enabled. 
1418:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1419:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1420:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1421:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1422:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
1423:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1424:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
1425:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1426:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1427:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1428:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1429:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1430:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  transmit_buffer_status clearing or setting the TDV flag. \n
1431:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1432:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1433:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1434:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1435:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1436:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1437:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1438:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1439:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1440:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH_t *const channel,
1441:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 		                                                 const XMC_USIC_CH_TBUF_STATUS_SET_t transmit_buf
1442:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1443:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)transmit_buffer_status;
1444:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1445:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1446:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1447:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1448:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1449:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  passive_level Value of passive level for the channel. \n
1450:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL0, @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL1
1451:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1452:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1453:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1454:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Set the passive data level of the output signal. \n\n
1455:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the USIC channel transmit stage is idle, the output signal level stays at the 
1456:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * configured passive level.
1457:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1458:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1459:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1460:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1461:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetPassiveDataLevel(XMC_USIC_CH_t *const channel,
1462:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                      const XMC_USIC_CH_PASSIVE_DATA_LEVEL_t passive
1463:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1464:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->SCTR &= (~USIC_CH_SCTR_PDL_Msk);
1465:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->SCTR |= (uint32_t)passive_level;
1466:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1467:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1468:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /* TX FIFO APIs */
1469:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1470:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1471:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1472:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1473:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1474:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1475:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1476:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of transmit FIFO filling level to be considered for generating events. \n
1477:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1478:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1479:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1480:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1481:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Initializes the transmit FIFO. \n\n
1482:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO is a subset of a common FIFO sized 64 words. This FIFO is shared between 2 channel
1483:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1484:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * from where transmit data can be put, for the selected USIC channel. \a size represents the size 
1485:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 2. Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A F
1486:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * event is generated when the FIFO filling level falls below the \a limit value.
1487:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1488:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1489:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent(), XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1490:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1491:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
1492:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1493:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1494:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1495:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1496:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1497:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1498:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1499:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1500:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1501:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1502:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1503:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1504:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1505:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1506:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the transmit FIFO. \n\n
1507:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the transmit FIFO. The API shall be used for the 
1508:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * runtime change of transmit FIFO trigger limit. FIFO start position will not be affected on execu
1509:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1510:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1511:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1512:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1513:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1514:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1515:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                             const uint32_t limit);
1516:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1517:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1518:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1519:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1520:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1521:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1522:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1523:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1524:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1525:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1526:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t.
1527:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1528:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation. Events are configured in the TBC
1529:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1530:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1531:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1532:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1533:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1534:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1535:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1536:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1537:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1538:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TBCTR |= event;
1539:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1540:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1541:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1542:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1543:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1544:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1545:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t \n
1546:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1547:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1548:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1549:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables the interrupt events related to transmit FIFO. \n\n
1550:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1551:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_TXFIFO_GetEvent(). 
1552:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t. Fo
1553:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1554:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1555:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1556:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1557:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1558:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1559:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1560:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TBCTR &= (uint32_t)~event;
1561:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1562:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1563:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1564:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1565:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				      \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1566:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the transmit FIFO events. \n
1567:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1568:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1569:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation. \n
1570:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1571:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1572:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1573:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1574:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the transmit FIFO events.\n\n
1575:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1576:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1577:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1578:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * A transmit FIFO event can generate an interrupt only if the interrupt node is configured for the
1579:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1580:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1581:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1582:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1583:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1584:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1585:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1586:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1587:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1588:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                 const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t i
1589:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                 const uint32_t service_request);
1590:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1591:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1592:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1593:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1594:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1595:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1596:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1597:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1598:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1599:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit FIFO. \n\n
1600:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in the transmit FIFO.
1601:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The transmit FIFO should be configured before calling this API.
1602:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1603:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1604:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1605:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1606:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutData(XMC_USIC_CH_t *const channel, const uint16_t data)
1607:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1608:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->IN[0] = data;
1609:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1610:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1611:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1612:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1613:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1614:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1615:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1616:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1617:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1618:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1619:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1620:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in frame length control mode. \n\n
1621:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When frame length control is enabled for dynamic update of frame length, this API can be used.
1622:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1623:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1624:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1625:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1626:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1627:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1628:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataFLEMode(XMC_USIC_CH_t *const channel,
1629:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                        const uint16_t data,
1630:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1631:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1632:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1633:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1634:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1635:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1636:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1637:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1638:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1639:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1640:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1641:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1642:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1643:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1644:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in hardware port control mode. \n\n
1645:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When hardware port control is enabled for dynamic update of frame length, this API can be used.
1646:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1647:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1648:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1649:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1650:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1651:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1652:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
1653:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                        const uint16_t data,
1654:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1655:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1656:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1657:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1658:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1659:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1660:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1661:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1662:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1663:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1664:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1665:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Clears the contents of transmit FIFO. \n\n
1666:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO contents will be cleared and the filling level will be reset to 0.
1667:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1668:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1669:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
1670:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1671:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
1672:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1673:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
1674:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1675:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1676:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1677:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1678:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1679:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is full
1680:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO is not full.
1681:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1682:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1683:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is full. \n\n
1684:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO filling level reaches the configured size, FIFO full flag is set.
1685:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * User should not write to the FIFO when the transmit FIFO is full.
1686:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1687:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1688:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
1689:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1690:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1691:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1692:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1693:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1694:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1695:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1696:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1697:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1698:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is empty
1699:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO has some data.
1700:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1701:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1702:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is empty. \n\n
1703:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO is empty, data can be written to FIFO.
1704:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the last written word to the transmit FIFO is transmitted out of the FIFO, 
1705:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * FIFO empty flag is set.
1706:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1707:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1708:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1709:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1710:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1711:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1712:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
1713:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1714:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1715:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1716:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1717:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1718:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Transmit FIFO filling level. \n 
1719:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= transmit FIFO size.
1720:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1721:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1722:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO filling level. \n\n
1723:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * For every word written to the FIFO, filling level is updated. The API gives the value
1724:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * of this filling level.
1725:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1726:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1727:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1728:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1729:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1730:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1731:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_TBFLVL_Msk) >> USIC_CH_TRBSR_TBFLVL_Pos);
1732:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1733:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1734:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1735:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1736:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1737:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status of standard transmit and transmit buffer error events. @ref XMC_USIC_CH_TXFIFO_EV
1738:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1739:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1740:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO event status. \n\n
1741:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Gives the status of transmit FIFO standard transmit buffer event and transmit buffer error event
1742:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The status bits are located at their bit positions in the TRBSR register in the returned value.
1743:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * User can make use of the @ref XMC_USIC_CH_TXFIFO_EVENT_t enumeration for checking the status of 
1744:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1745:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1746:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1747:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1748:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1749:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_ClearEvent() \n\n\n
1750:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1751:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1752:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1753:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_STBI_Msk |
1754:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                               USIC_CH_TRBSR_TBERI_Msk));
1755:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1756:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1757:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1758:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1759:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1760:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  event Transmit FIFO events to be cleared. \n
1761:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			     \b Range: @ref XMC_USIC_CH_TXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_TXFIFO_EVENT_ERROR.
1762:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1763:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1764:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1765:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Clears the transmit FIFO event flags in the status register. \n\n
1766:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1767:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1768:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EVENT enumeration can be used as input. Multiple events
1769:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1770:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * multiple event enumerations.
1771:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1772:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1773:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent() \n\n\n
1774:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1775:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1776:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                    const uint32_t event)
1777:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1778:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = event;
1779:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1780:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1781:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1782:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1783:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1784:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1785:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1786:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1787:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1788:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of receive FIFO filling level to be considered for generating events. \n
1789:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1790:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1791:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1792:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1793:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Configures the receive FIFO. \n\n
1794:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Receive FIFO is the subset of a common FIFO sized 64 words. This FIFO is shared between 2 channe
1795:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1796:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * from where received data can be put. \a size represents the size of receive FIFO as a multiple o
1797:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A FIFO
1798:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * event or alternative receive buffer event is generated when the FIFO filling level exceeds the \
1799:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1800:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1801:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent(), XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1802:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** */
1803:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
1804:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1805:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1806:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1807:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1808:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1809:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1810:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1811:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1812:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1813:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for receive FIFO filling level to be considered for generating events. \n
1814:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1815:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1816:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1817:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1818:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the receive FIFO. \n\n
1819:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the receive FIFO. The API shall be used for the 
1820:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * runtime change of receive FIFO trigger limit. FIFO start position will not be affected on execut
1821:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1822:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1823:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit()\ n\n\n
1824:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1825:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1826:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1827:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                             const uint32_t limit);
1828:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1829:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1830:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1831:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1832:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1833:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1834:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1835:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1836:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1837:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_t.
1838:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1839:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.<br>
1840:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1841:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1842:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1843:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1844:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1845:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1846:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1847:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1848:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1849:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->RBCTR |= event;
1850:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1851:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1852:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1853:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1854:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1855:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1856:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. \n
1857:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ERR
1858:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			@ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE.
1859:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1860:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1861:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1862:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables the selected interrupt events related to receive FIFO. \n\n
1863:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1864:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_RXFIFO_GetEvent(). 
1865:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration \a XMC_USIC_CH_RXFIFO_EVENT_CONF. For pr
1866:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1867:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1868:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1869:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1870:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1871:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1872:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1873:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->RBCTR &= (uint32_t)~event;
1874:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1875:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1876:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1877:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1878:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1879:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the receive FIFO events. \n
1880:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1881:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					@ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1882:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation.\n
1883:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					\b Range: 0 to 5.
1884:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1885:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1886:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1887:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the receive FIFO events. \n\n
1888:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1889:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1890:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1891:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * A receive FIFO event can generate an interrupt only if the interrupt node is configured for the 
1892:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1893:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1894:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1895:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1896:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1897:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1898:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1899:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1900:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1901:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                 const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t i
1902:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                 const uint32_t service_request);
1903:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1904:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1905:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1906:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1907:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Value read from the receive FIFO. \n
1908:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 16bit data. Length of data depends on the word length configuration.
1909:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1910:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1911:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Gets data from the receive FIFO. \n\n
1912:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Receive FIFO should be read only if data is availble in the FIFO. This can be checked using
1913:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * the API XMC_USIC_CH_RXFIFO_IsEmpty(). Receive FIFO error flag will be set if an attempt is made
1914:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO. To read all the received data, user should keep reading data
1915:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * until receive FIFO is empty.
1916:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1917:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1918:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent() \n\n\n
1919:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1920:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint16_t XMC_USIC_CH_RXFIFO_GetData(XMC_USIC_CH_t *const channel)
1921:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1922:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return (uint16_t)(channel->OUTR);
1923:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1924:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1925:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1926:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1927:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1928:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
1929:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1930:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1931:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Clears the contents of receive FIFO. \n\n
1932:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Receive FIFO contents will be cleared and the filling level will be reset to 0.
1933:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1934:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1935:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
1936:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1937:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
1938:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1939:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
1940:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1941:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1942:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1943:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1944:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1945:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is full
1946:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO is not full.
1947:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1948:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1949:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is full. \n\n
1950:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO filling level reaches the configured size, FIFO full flag is set.
1951:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Any data received when the receive FIFO is full, is lost.
1952:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1953:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1954:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_IsEmpty(), XMC_USIC_CH_RXFIFO_Flush() \n\n\n
1955:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1956:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1957:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1958:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_RFULL_Msk);
1959:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1960:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1961:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1962:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1963:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1964:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is empty,
1965:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO has some data.
1966:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1967:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1968:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is empty. \n\n
1969:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO is empty, received data will be put in receive FIFO.
1970:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * When the last received word in the FIFO is read, FIFO empty flag is set. Any attempt
1971:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO will set the receive FIFO error flag.
1972:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1973:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1974:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1975:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1976:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1977:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1978:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
1979:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
1980:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
1981:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
1982:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1983:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1984:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return uint32_t Receive FIFO filling level. \n
1985:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= receive FIFO size.
1986:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
1987:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1988:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Gets the receive FIFO filling level. \n\n
1989:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * For every word received, the filling level is incremented. The API gives the value
1990:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * of this filling level. The filling level is decremented when the data is read out of the 
1991:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * receive FIFO.
1992:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
1993:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1994:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1995:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
1996:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1997:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
1998:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_RBFLVL_Msk) >> USIC_CH_TRBSR_RBFLVL_Pos);
1999:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
2000:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
2001:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
2002:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2003:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2004:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return Status of standard receive buffer, alternative receive buffer and receive buffer error e
2005:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
2006:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
2007:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
2008:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2009:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Gets the receive FIFO events' status. \n\n
2010:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Gives the status of receive FIFO standard receive buffer event, alternative receive buffer event
2011:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The status bits are located at their bitpositions in the TRBSR register in the returned value.
2012:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * User can make use of the XMC_USIC_CH_RXFIFO_EVENT enumeration for checking the status of return 
2013:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
2014:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
2015:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
2016:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2017:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2018:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent()\n\n\n
2019:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
2020:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
2021:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
2022:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_SRBI_Msk |
2023:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                               USIC_CH_TRBSR_RBERI_Msk |
2024:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                               USIC_CH_TRBSR_ARBI_Msk));
2025:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
2026:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
2027:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
2028:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2029:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2030:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param  event Receive FIFO events to be cleared. \n
2031:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
2032:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
2033:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
2034:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2035:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2036:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Clears the receive FIFO event flags in the status register. \n\n
2037:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
2038:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
2039:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EVENT enumeration can be used as input. Multiple events
2040:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
2041:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * multiple event enumerations.
2042:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2043:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2044:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent() \n\n\n
2045:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
2046:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
2047:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                    const uint32_t event)
2048:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
2049:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = event;
2050:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
2051:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
2052:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
2053:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2054:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2055:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
2056:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2057:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2058:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Enables time measurement using the capture mode timer. \n\n
2059:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Time measurement is enabled by setting the timer enable flag in BRG register.
2060:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2061:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2062:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTimeMeasurement() \n\n\n
2063:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
2064:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTimeMeasurement(XMC_USIC_CH_t *const channel)
2065:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
2066:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->BRG |= (uint32_t)USIC_CH_BRG_TMEN_Msk;
2067:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
2068:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
2069:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
2070:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2071:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2072:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
2073:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2074:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2075:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Disables time measurement using the capture mode timer. \n\n
2076:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Time measurement is disabled by clearing the timer enable flag in BRG register.
2077:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2078:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2079:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTimeMeasurement() \n\n\n
2080:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
2081:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTimeMeasurement(XMC_USIC_CH_t *const channel)
2082:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
2083:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->BRG &= (uint32_t)~USIC_CH_BRG_TMEN_Msk;
2084:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
2085:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
2086:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
2087:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2088:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2089:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param passive_level Passive level for the master clock output. \n
2090:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0, @ref XMC_USIC_CH_BRG_MASTER_CL
2091:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
2092:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2093:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2094:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the idle mode pin level for the master clock output. \n
2095:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
2096:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMclkOutputPassiveLevel(XMC_USIC_CH_t *const channel,
2097:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_MASTER_CLOCK_PASSI
2098:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
2099:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_MCLKCFG_Msk)) | (uint32_t)passive_level;
2100:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
2101:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
2102:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2103:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2104:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param passive_level Passive level for the clock output. \n
2105:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
2106:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED,
2107:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
2108:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED,
2109:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param clock_output Shift clock source selection. \n
2110:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 					\b Range: Use @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK,
2111:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 								  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1
2112:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
2113:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2114:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2115:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the idle mode shift clock output level and selects the shift clock source. \n\n
2116:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Shift clock idle mode output level can be set to logic high or low. Shift clock output can be co
2117:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * delay of half shift clock period. Both the configurations are available as enumeration values de
2118:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t.
2119:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * This value should be configured based on the slave device requirement.
2120:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Shift clock source can be selected between internal clock(master) and external input(slave).
2121:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 
2122:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
2123:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
2124:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIV
2125:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
2126:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
2127:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
2128:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                                              USIC_CH_BRG_SCLKOSEL_Msk))) |
2129:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                  (uint32_t)passive_level |
2130:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****                  (uint32_t)clock_output;
2131:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** }
2132:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** 
2133:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** /**
2134:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2135:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2136:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @param mode USIC channel operation mode. \n
2137:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_OPERATING_MODE_IDLE, @ref XMC_USIC_CH_OPERATING_MODE_SPI,
2138:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_UART, @ref XMC_USIC_CH_OPERATING_MODE_I2S,
2139:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_I2C.
2140:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * @return None
2141:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2142:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2143:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * Sets the USIC channel operation mode.\n\n
2144:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * A USIC channel can support multiple serial communication protocols like UART, SPI, I2C and I2S.
2145:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * The API sets the input operation mode to the USIC channel.
2146:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  *
2147:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2148:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
2149:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****  */
2150:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_
2151:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h **** {
2152:C:/Files/Projects/Git/XMCLib/inc\xmc_usic.h ****   channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 548              	 .loc 3 2152 0
 549 0008 036C     	 ldr r3,[r0,#64]
 550 000a 23F00F03 	 bic r3,r3,#15
 551 000e 0364     	 str r3,[r0,#64]
 552              	.LBE21:
 553              	.LBE20:
 291:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   XMC_SPI_CH_STATUS_t status = XMC_SPI_CH_STATUS_OK;
 554              	 .loc 1 291 0
 555 0010 0020     	 movs r0,#0
 556              	.LVL60:
 557 0012 7047     	 bx lr
 558              	.LVL61:
 559              	.L42:
 294:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   {
 295:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     status = XMC_SPI_CH_STATUS_BUSY;
 560              	 .loc 1 295 0
 561 0014 0220     	 movs r0,#2
 562              	.LVL62:
 296:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   }
 297:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   else
 298:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   {
 299:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 300:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     /* USIC channel in IDLE mode */
 301:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****     XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_IDLE);
 302:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   }
 303:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 304:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   return status;
 305:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** }
 563              	 .loc 1 305 0
 564 0016 7047     	 bx lr
 565              	 .cfi_endproc
 566              	.LFE280:
 568              	 .section .text.XMC_SPI_CH_EnableEvent,"ax",%progbits
 569              	 .align 2
 570              	 .global XMC_SPI_CH_EnableEvent
 571              	 .thumb
 572              	 .thumb_func
 574              	XMC_SPI_CH_EnableEvent:
 575              	.LFB281:
 306:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 307:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
 308:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** {
 576              	 .loc 1 308 0
 577              	 .cfi_startproc
 578              	 
 579              	 
 580              	 
 581              	.LVL63:
 309:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   channel->CCR |= (event&0x1fc00U);
 582              	 .loc 1 309 0
 583 0000 036C     	 ldr r3,[r0,#64]
 584 0002 01F4FE32 	 and r2,r1,#130048
 585 0006 1343     	 orrs r3,r3,r2
 586 0008 0364     	 str r3,[r0,#64]
 310:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   channel->PCR_SSCMode |= ((event << 13U) & 0xe000U);
 587              	 .loc 1 310 0
 588 000a C36B     	 ldr r3,[r0,#60]
 589 000c 4903     	 lsls r1,r1,#13
 590              	.LVL64:
 591 000e 89B2     	 uxth r1,r1
 592 0010 1943     	 orrs r1,r1,r3
 593 0012 C163     	 str r1,[r0,#60]
 594 0014 7047     	 bx lr
 595              	 .cfi_endproc
 596              	.LFE281:
 598 0016 00BF     	 .section .text.XMC_SPI_CH_DisableEvent,"ax",%progbits
 599              	 .align 2
 600              	 .global XMC_SPI_CH_DisableEvent
 601              	 .thumb
 602              	 .thumb_func
 604              	XMC_SPI_CH_DisableEvent:
 605              	.LFB282:
 311:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** }
 312:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** 
 313:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
 314:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c **** {
 606              	 .loc 1 314 0
 607              	 .cfi_startproc
 608              	 
 609              	 
 610              	 
 611              	.LVL65:
 315:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   channel->CCR &= (uint32_t)~(event&0x1fc00U);
 612              	 .loc 1 315 0
 613 0000 036C     	 ldr r3,[r0,#64]
 614 0002 01F4FE32 	 and r2,r1,#130048
 615 0006 23EA0203 	 bic r3,r3,r2
 616 000a 0364     	 str r3,[r0,#64]
 316:C:/Files/Projects/Git/XMCLib/src\xmc_spi.c ****   channel->PCR_SSCMode &= (uint32_t)~((event << 13U) & 0xe000U);
 617              	 .loc 1 316 0
 618 000c C36B     	 ldr r3,[r0,#60]
 619 000e 4903     	 lsls r1,r1,#13
 620              	.LVL66:
 621 0010 89B2     	 uxth r1,r1
 622 0012 23EA0101 	 bic r1,r3,r1
 623 0016 C163     	 str r1,[r0,#60]
 624 0018 7047     	 bx lr
 625              	 .cfi_endproc
 626              	.LFE282:
 628 001a 00BF     	 .text
 629              	.Letext0:
 630              	 .file 4 "c:\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 631              	 .file 5 "c:\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 632              	 .file 6 "C:/Files/Projects/Git/CMSIS/Include/cmsis_gcc.h"
 633              	 .file 7 "C:/Files/Projects/Git/CMSIS/Include/core_cm4.h"
 634              	 .file 8 "C:/Files/Projects/Git/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 635              	 .file 9 "C:/Files/Projects/Git/XMCLib/inc/xmc_scu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_spi.c
    {standard input}:20     .text.XMC_SPI_CH_Init:00000000 $t
    {standard input}:25     .text.XMC_SPI_CH_Init:00000000 XMC_SPI_CH_Init
    {standard input}:91     .text.XMC_SPI_CH_Init:0000004c $d
    {standard input}:96     .text.XMC_SPI_CH_SetBaudrate:00000000 $t
    {standard input}:101    .text.XMC_SPI_CH_SetBaudrate:00000000 XMC_SPI_CH_SetBaudrate
    {standard input}:144    .text.XMC_SPI_CH_SetBaudrateEx:00000000 $t
    {standard input}:149    .text.XMC_SPI_CH_SetBaudrateEx:00000000 XMC_SPI_CH_SetBaudrateEx
    {standard input}:200    .text.XMC_SPI_CH_EnableSlaveSelect:00000000 $t
    {standard input}:205    .text.XMC_SPI_CH_EnableSlaveSelect:00000000 XMC_SPI_CH_EnableSlaveSelect
    {standard input}:227    .text.XMC_SPI_CH_DisableSlaveSelect:00000000 $t
    {standard input}:232    .text.XMC_SPI_CH_DisableSlaveSelect:00000000 XMC_SPI_CH_DisableSlaveSelect
    {standard input}:258    .text.XMC_SPI_CH_Transmit:00000000 $t
    {standard input}:263    .text.XMC_SPI_CH_Transmit:00000000 XMC_SPI_CH_Transmit
    {standard input}:331    .text.XMC_SPI_CH_GetReceivedData:00000000 $t
    {standard input}:336    .text.XMC_SPI_CH_GetReceivedData:00000000 XMC_SPI_CH_GetReceivedData
    {standard input}:361    .text.XMC_SPI_CH_SetInterwordDelay:00000000 $t
    {standard input}:366    .text.XMC_SPI_CH_SetInterwordDelay:00000000 XMC_SPI_CH_SetInterwordDelay
    {standard input}:516    .text.XMC_SPI_CH_SetInterwordDelay:000000c0 $d
    {standard input}:523    .text.XMC_SPI_CH_Stop:00000000 $t
    {standard input}:528    .text.XMC_SPI_CH_Stop:00000000 XMC_SPI_CH_Stop
    {standard input}:569    .text.XMC_SPI_CH_EnableEvent:00000000 $t
    {standard input}:574    .text.XMC_SPI_CH_EnableEvent:00000000 XMC_SPI_CH_EnableEvent
    {standard input}:599    .text.XMC_SPI_CH_DisableEvent:00000000 $t
    {standard input}:604    .text.XMC_SPI_CH_DisableEvent:00000000 XMC_SPI_CH_DisableEvent
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_USIC_CH_Enable
XMC_USIC_CH_SetBaudrateEx
XMC_USIC_CH_SetBaudrate
XMC_SCU_CLOCK_GetPeripheralClockFrequency
