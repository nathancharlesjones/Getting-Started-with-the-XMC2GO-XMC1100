   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,1
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_fce.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_FCE_Init,"ax",%progbits
  20              	 .align 2
  21              	 .global XMC_FCE_Init
  22              	 .thumb
  23              	 .thumb_func
  25              	XMC_FCE_Init:
  26              	.LFB191:
  27              	 .file 1 "C:/Files/Projects/Git/XMCLib/src/xmc_fce.c"
   1:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** /**
   2:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * @file xmc_fce.c
   3:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * @date 2019-03-30
   4:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  *
   5:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * @cond
   6:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  **************************************************************************************************
   7:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  *
   9:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * All rights reserved.                        
  11:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  *                                             
  12:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * following conditions are met:   
  14:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  *                                                                              
  15:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * disclaimer.                        
  17:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * 
  18:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * 
  21:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * products derived from this software without specific prior written permission.                  
  23:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  *                                                                              
  24:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  *                                                                              
  32:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  **************************************************************************************************
  35:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  *
  36:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * Change History
  37:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * --------------
  38:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  *
  39:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * 2015-02-20:
  40:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  *     - Initial <br>
  41:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  *      
  42:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * 2015-06-20:
  43:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  *     - Removed GetDriverVersion API
  44:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  *
  45:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * 2017-12-14:
  46:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  *     - XMC_FCE_CalculateCRC8()
  47:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  *       Ensure 32bit access to IR register
  48:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  *     - XMC_FCE_CalculateCRC16()
  49:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  *       Ensure 32bit access to IR register
  50:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  *       Remove restriction on data source allignment
  51:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  *     - XMC_FCE_CalculateCRC32()
  52:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  *       Ensure 32bit access to IR register
  53:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  *       Remove restriction on data source allignment
  54:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  *
  55:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * 2019-03-30:
  56:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  *     - Added XMC_FCE_CalculateCRC16Ex() and XMC_FCE_CalculateCRC32Ex()
  57:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * 
  58:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * @endcond 
  59:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  *
  60:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  */
  61:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
  62:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** /**************************************************************************************************
  63:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * HEADER FILES
  64:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  **************************************************************************************************
  65:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** #include <xmc_fce.h>
  66:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
  67:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** #if defined (FCE)
  68:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** #include <xmc_scu.h>
  69:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
  70:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** /*******************************************************************************
  71:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * API IMPLEMENTATION
  72:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  **************************************************************************************************
  73:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
  74:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** /*
  75:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * Initialize the FCE peripheral:
  76:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  * Update FCE configuration and initialize seed value
  77:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  */
  78:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** XMC_FCE_STATUS_t XMC_FCE_Init(const XMC_FCE_t *const engine)
  79:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** {
  28              	 .loc 1 79 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33              	.LVL0:
  80:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   engine->kernel_ptr->CFG = engine->fce_cfg_update.regval;
  34              	 .loc 1 80 0
  35 0000 0368     	 ldr r3,[r0]
  36 0002 4268     	 ldr r2,[r0,#4]
  37 0004 9A60     	 str r2,[r3,#8]
  81:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   engine->kernel_ptr->CRC = engine->seedvalue;
  38              	 .loc 1 81 0
  39 0006 0368     	 ldr r3,[r0]
  40 0008 8268     	 ldr r2,[r0,#8]
  41 000a 9A61     	 str r2,[r3,#24]
  82:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   
  83:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   return XMC_FCE_STATUS_OK;
  84:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** }
  42              	 .loc 1 84 0
  43 000c 0020     	 movs r0,#0
  44              	.LVL1:
  45 000e 7047     	 bx lr
  46              	 .cfi_endproc
  47              	.LFE191:
  49              	 .section .text.XMC_FCE_Disable,"ax",%progbits
  50              	 .align 2
  51              	 .global XMC_FCE_Disable
  52              	 .thumb
  53              	 .thumb_func
  55              	XMC_FCE_Disable:
  56              	.LFB192:
  85:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
  86:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** /* Disable FCE */
  87:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** void XMC_FCE_Disable(void)
  88:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** {
  57              	 .loc 1 88 0
  58              	 .cfi_startproc
  59              	 
  60              	 
  61 0000 08B5     	 push {r3,lr}
  62              	.LCFI0:
  63              	 .cfi_def_cfa_offset 8
  64              	 .cfi_offset 3,-8
  65              	 .cfi_offset 14,-4
  89:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   FCE->CLC |= (uint32_t)FCE_CLC_DISR_Msk;
  66              	 .loc 1 89 0
  67 0002 044A     	 ldr r2,.L4
  68 0004 1368     	 ldr r3,[r2]
  69 0006 43F00103 	 orr r3,r3,#1
  70 000a 1360     	 str r3,[r2]
  90:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   
  91:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_FCE);
  71              	 .loc 1 91 0
  72 000c 0248     	 ldr r0,.L4+4
  73 000e FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
  74              	.LVL2:
  75 0012 08BD     	 pop {r3,pc}
  76              	.L5:
  77              	 .align 2
  78              	.L4:
  79 0014 00000250 	 .word 1342308352
  80 0018 40000020 	 .word 536870976
  81              	 .cfi_endproc
  82              	.LFE192:
  84              	 .section .text.XMC_FCE_Enable,"ax",%progbits
  85              	 .align 2
  86              	 .global XMC_FCE_Enable
  87              	 .thumb
  88              	 .thumb_func
  90              	XMC_FCE_Enable:
  91              	.LFB193:
  92:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
  93:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** #if defined(CLOCK_GATING_SUPPORTED)
  94:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_FCE);
  95:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** #endif
  96:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
  97:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** }
  98:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
  99:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** /* Enable FCE */
 100:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** void XMC_FCE_Enable(void)
 101:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** {
  92              	 .loc 1 101 0
  93              	 .cfi_startproc
  94              	 
  95              	 
  96 0000 08B5     	 push {r3,lr}
  97              	.LCFI1:
  98              	 .cfi_def_cfa_offset 8
  99              	 .cfi_offset 3,-8
 100              	 .cfi_offset 14,-4
 102:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** #if defined(CLOCK_GATING_SUPPORTED)
 103:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_FCE);
 104:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** #endif
 105:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 106:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_FCE);
 101              	 .loc 1 106 0
 102 0002 0448     	 ldr r0,.L8
 103 0004 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 104              	.LVL3:
 107:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 108:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   FCE->CLC &= (uint32_t)~FCE_CLC_DISR_Msk;
 105              	 .loc 1 108 0
 106 0008 034A     	 ldr r2,.L8+4
 107 000a 1368     	 ldr r3,[r2]
 108 000c 23F00103 	 bic r3,r3,#1
 109 0010 1360     	 str r3,[r2]
 110 0012 08BD     	 pop {r3,pc}
 111              	.L9:
 112              	 .align 2
 113              	.L8:
 114 0014 40000020 	 .word 536870976
 115 0018 00000250 	 .word 1342308352
 116              	 .cfi_endproc
 117              	.LFE193:
 119              	 .section .text.XMC_FCE_CalculateCRC8,"ax",%progbits
 120              	 .align 2
 121              	 .global XMC_FCE_CalculateCRC8
 122              	 .thumb
 123              	 .thumb_func
 125              	XMC_FCE_CalculateCRC8:
 126              	.LFB194:
 109:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** }
 110:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 111:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** /* Calculate and return the SAE J1850 CRC8 checksum */
 112:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** XMC_FCE_STATUS_t XMC_FCE_CalculateCRC8(const XMC_FCE_t *const engine,
 113:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****                                        const uint8_t *data,
 114:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 									   uint32_t length,
 115:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 									   uint8_t *result)
 116:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** {
 127              	 .loc 1 116 0
 128              	 .cfi_startproc
 129              	 
 130              	 
 131              	 
 132              	.LVL4:
 117:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_FCE_STATUS_t status = XMC_FCE_STATUS_OK;
 118:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 	
 119:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_ASSERT("XMC_FCE_CalculateCRC8: Wrong FCE kernel used", (engine -> kernel_ptr == XMC_FCE_CRC8)
 120:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 121:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   if (length == 0UL)
 133              	 .loc 1 121 0
 134 0000 62B1     	 cbz r2,.L13
 116:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_FCE_STATUS_t status = XMC_FCE_STATUS_OK;
 135              	 .loc 1 116 0
 136 0002 30B4     	 push {r4,r5}
 137              	.LCFI2:
 138              	 .cfi_def_cfa_offset 8
 139              	 .cfi_offset 4,-8
 140              	 .cfi_offset 5,-4
 141 0004 8A18     	 adds r2,r1,r2
 142              	.LVL5:
 143              	.L12:
 122:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   {
 123:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     status = XMC_FCE_STATUS_ERROR;
 124:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   }
 125:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   else
 126:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   {
 127:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     while (0UL != length)
 128:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     {
 129:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       engine->kernel_ptr->IR = (uint32_t)*data;
 144              	 .loc 1 129 0
 145 0006 0468     	 ldr r4,[r0]
 146 0008 11F8015B 	 ldrb r5,[r1],#1
 147              	.LVL6:
 148 000c 2560     	 str r5,[r4]
 149              	.LVL7:
 127:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     {
 150              	 .loc 1 127 0
 151 000e 9142     	 cmp r1,r2
 152 0010 F9D1     	 bne .L12
 130:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       data++;
 131:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       length -= 1U;
 132:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     }
 133:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 134:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     *result = (uint8_t)engine->kernel_ptr->CRC;
 153              	 .loc 1 134 0
 154 0012 0268     	 ldr r2,[r0]
 155 0014 9269     	 ldr r2,[r2,#24]
 156 0016 1A70     	 strb r2,[r3]
 117:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 	
 157              	 .loc 1 117 0
 158 0018 0020     	 movs r0,#0
 159              	.LVL8:
 160 001a 01E0     	 b .L11
 161              	.LVL9:
 162              	.L13:
 163              	.LCFI3:
 164              	 .cfi_def_cfa_offset 0
 165              	 .cfi_restore 4
 166              	 .cfi_restore 5
 123:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   }
 167              	 .loc 1 123 0
 168 001c 0220     	 movs r0,#2
 169              	.LVL10:
 170 001e 7047     	 bx lr
 171              	.LVL11:
 172              	.L11:
 173              	.LCFI4:
 174              	 .cfi_def_cfa_offset 8
 175              	 .cfi_offset 4,-8
 176              	 .cfi_offset 5,-4
 135:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   }
 136:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 137:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   return status;
 138:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** }
 177              	 .loc 1 138 0
 178 0020 30BC     	 pop {r4,r5}
 179              	.LCFI5:
 180              	 .cfi_restore 5
 181              	 .cfi_restore 4
 182              	 .cfi_def_cfa_offset 0
 183 0022 7047     	 bx lr
 184              	 .cfi_endproc
 185              	.LFE194:
 187              	 .section .text.XMC_FCE_CalculateCRC16,"ax",%progbits
 188              	 .align 2
 189              	 .global XMC_FCE_CalculateCRC16
 190              	 .thumb
 191              	 .thumb_func
 193              	XMC_FCE_CalculateCRC16:
 194              	.LFB195:
 139:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 140:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** /* Calculate and return calculated CCITT CRC16 checksum */
 141:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** XMC_FCE_STATUS_t XMC_FCE_CalculateCRC16(const XMC_FCE_t *const engine,
 142:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****                                         const uint16_t *data,
 143:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 										uint32_t length,
 144:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 										uint16_t *result)
 145:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** {
 195              	 .loc 1 145 0
 196              	 .cfi_startproc
 197              	 
 198              	 
 199              	 
 200              	.LVL12:
 146:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_FCE_STATUS_t status = XMC_FCE_STATUS_OK;
 147:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 	
 148:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_ASSERT("XMC_FCE_CalculateCRC16: Wrong FCE kernel used", (engine -> kernel_ptr == XMC_FCE_CRC1
 149:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_ASSERT("XMC_FCE_CalculateCRC16: Length field is empty", (length != 0));
 150:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_ASSERT("XMC_FCE_CalculateCRC16: Length is not aligned", ((length & 0x1U) == 0));
 151:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 152:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   /* Check length is a multiple of 2 */
 153:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   if ((length == 0) || ((length & 0x1U) != 0U))
 201              	 .loc 1 153 0
 202 0000 7AB1     	 cbz r2,.L20
 145:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_FCE_STATUS_t status = XMC_FCE_STATUS_OK;
 203              	 .loc 1 145 0 discriminator 1
 204 0002 30B4     	 push {r4,r5}
 205              	.LCFI6:
 206              	 .cfi_def_cfa_offset 8
 207              	 .cfi_offset 4,-8
 208              	 .cfi_offset 5,-4
 209 0004 1446     	 mov r4,r2
 210              	 .loc 1 153 0 discriminator 1
 211 0006 12F0010F 	 tst r2,#1
 212 000a 0CD1     	 bne .L21
 213              	.LVL13:
 214              	.L22:
 154:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   {
 155:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     status = XMC_FCE_STATUS_ERROR;
 156:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   }
 157:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   else
 158:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   {
 159:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     while (0UL != length)
 160:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     {
 161:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       engine->kernel_ptr->IR = (uint32_t)*data;
 215              	 .loc 1 161 0
 216 000c 0268     	 ldr r2,[r0]
 217 000e 31F8025B 	 ldrh r5,[r1],#2
 218              	.LVL14:
 219 0012 1560     	 str r5,[r2]
 220              	.LVL15:
 159:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     {
 221              	 .loc 1 159 0
 222 0014 023C     	 subs r4,r4,#2
 223              	.LVL16:
 224 0016 F9D1     	 bne .L22
 162:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       data++;
 163:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       length -= 2U;
 164:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     }
 165:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 	
 166:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     *result = (uint16_t)engine->kernel_ptr->CRC;
 225              	 .loc 1 166 0
 226 0018 0268     	 ldr r2,[r0]
 227 001a 9269     	 ldr r2,[r2,#24]
 228 001c 1A80     	 strh r2,[r3]
 146:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 	
 229              	 .loc 1 146 0
 230 001e 0020     	 movs r0,#0
 231              	.LVL17:
 232 0020 02E0     	 b .L18
 233              	.LVL18:
 234              	.L20:
 235              	.LCFI7:
 236              	 .cfi_def_cfa_offset 0
 237              	 .cfi_restore 4
 238              	 .cfi_restore 5
 155:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   }
 239              	 .loc 1 155 0
 240 0022 0220     	 movs r0,#2
 241              	.LVL19:
 167:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   }
 168:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 169:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   return status;
 170:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** }
 242              	 .loc 1 170 0
 243 0024 7047     	 bx lr
 244              	.LVL20:
 245              	.L21:
 246              	.LCFI8:
 247              	 .cfi_def_cfa_offset 8
 248              	 .cfi_offset 4,-8
 249              	 .cfi_offset 5,-4
 155:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   }
 250              	 .loc 1 155 0
 251 0026 0220     	 movs r0,#2
 252              	.LVL21:
 253              	.L18:
 254              	 .loc 1 170 0
 255 0028 30BC     	 pop {r4,r5}
 256              	.LCFI9:
 257              	 .cfi_restore 5
 258              	 .cfi_restore 4
 259              	 .cfi_def_cfa_offset 0
 260              	.LVL22:
 261 002a 7047     	 bx lr
 262              	 .cfi_endproc
 263              	.LFE195:
 265              	 .section .text.XMC_FCE_CalculateCRC16Ex,"ax",%progbits
 266              	 .align 2
 267              	 .global XMC_FCE_CalculateCRC16Ex
 268              	 .thumb
 269              	 .thumb_func
 271              	XMC_FCE_CalculateCRC16Ex:
 272              	.LFB196:
 171:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 172:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** XMC_FCE_STATUS_t XMC_FCE_CalculateCRC16Ex(const XMC_FCE_t *const engine,
 173:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****                                           const uint8_t *data,
 174:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 										                      uint32_t length,
 175:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 										                      uint16_t *const result)
 176:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** {
 273              	 .loc 1 176 0
 274              	 .cfi_startproc
 275              	 
 276              	 
 277              	 
 278              	.LVL23:
 177:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_FCE_STATUS_t status = XMC_FCE_STATUS_OK;
 178:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 	
 179:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_ASSERT("XMC_FCE_CalculateCRC16: Wrong FCE kernel used", (engine -> kernel_ptr == XMC_FCE_CRC1
 180:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_ASSERT("XMC_FCE_CalculateCRC16: Length field is empty", (length != 0));
 181:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_ASSERT("XMC_FCE_CalculateCRC16: Length is not aligned", ((length & 0x1U) == 0));
 182:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 183:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   /* Check length is a multiple of 2 */
 184:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   if ((length == 0) || ((length & 0x1U) != 0U))
 279              	 .loc 1 184 0
 280 0000 82B1     	 cbz r2,.L28
 176:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_FCE_STATUS_t status = XMC_FCE_STATUS_OK;
 281              	 .loc 1 176 0 discriminator 1
 282 0002 30B4     	 push {r4,r5}
 283              	.LCFI10:
 284              	 .cfi_def_cfa_offset 8
 285              	 .cfi_offset 4,-8
 286              	 .cfi_offset 5,-4
 287 0004 1446     	 mov r4,r2
 288              	 .loc 1 184 0 discriminator 1
 289 0006 12F0010F 	 tst r2,#1
 290 000a 0DD1     	 bne .L29
 291              	.LVL24:
 292              	.L30:
 293              	.LBB8:
 185:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   {
 186:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     status = XMC_FCE_STATUS_ERROR;
 187:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   }
 188:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   else
 189:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   {
 190:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     const uint16_t *p = (const uint16_t *)data;
 191:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     while (0UL != length)
 192:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     {
 193:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       engine->kernel_ptr->IR = __REV16(*p);
 294              	 .loc 1 193 0
 295 000c 0568     	 ldr r5,[r0]
 296              	.LVL25:
 297 000e 31F8022B 	 ldrh r2,[r1],#2
 298              	.LVL26:
 299              	.LBB9:
 300              	.LBB10:
 301              	 .file 2 "C:/Files/Projects/Git/CMSIS/Include/cmsis_gcc.h"
   1:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**************************************************************************//**
   2:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  * @version  V5.2.0
   5:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  * @date     08. May 2019
   6:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  ******************************************************************************/
   7:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /*
   8:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  *
  10:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  *
  12:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  *
  16:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  *
  18:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  * limitations under the License.
  23:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
  24:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
  25:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
  28:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /* ignore some GCC warnings */
  29:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic push
  30:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
  34:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef __has_builtin
  36:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
  38:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
  39:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef   __ASM
  41:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #define __ASM                                  __asm
  42:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
  43:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef   __INLINE
  44:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #define __INLINE                               inline
  45:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
  46:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
  49:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif                                           
  52:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
  55:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef   __USED
  56:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
  58:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef   __WEAK
  59:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
  61:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED
  62:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
  64:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
  67:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
  70:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
  78:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
  86:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
  94:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 102:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 110:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef   __ALIGNED
 111:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 113:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef   __RESTRICT
 114:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 116:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 119:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 120:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 122:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 124:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 125:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****            in the used linker script.
 129:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   
 130:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 131:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 133:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   
 135:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   typedef struct {
 136:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****     uint32_t const* src;
 137:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****     uint32_t* dest;
 138:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****     uint32_t  wlen;
 139:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   } __copy_table_t;
 140:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   
 141:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   typedef struct {
 142:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****     uint32_t* dest;
 143:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****     uint32_t  wlen;
 144:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   } __zero_table_t;
 145:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   
 146:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 151:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****     }
 155:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   }
 156:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  
 157:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****     }
 161:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   }
 162:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  
 163:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   _start();
 164:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 165:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   
 166:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 168:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 169:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 172:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 173:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 176:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 177:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 180:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 181:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 184:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 185:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   @{
 189:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 190:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 191:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 192:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 196:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 198:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 200:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 201:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 202:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 203:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 207:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 209:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 211:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 212:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 213:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 214:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Control Register
 215:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \return               Control Register value
 217:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 218:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 220:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 221:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 222:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return(result);
 224:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 225:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 226:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 227:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 229:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \return               non-secure Control Register value
 232:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 233:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 235:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 236:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 237:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return(result);
 239:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 240:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 241:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 242:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 243:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 244:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Control Register
 245:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 248:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 250:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 252:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 253:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 254:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 256:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 260:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 262:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 264:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 265:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 266:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 267:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 268:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Get IPSR Register
 269:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \return               IPSR Register value
 271:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 272:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 274:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 275:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 276:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return(result);
 278:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 279:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 280:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 281:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 282:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Get APSR Register
 283:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \return               APSR Register value
 285:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 286:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 288:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 289:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 290:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return(result);
 292:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 293:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 294:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 295:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 296:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Get xPSR Register
 297:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \return               xPSR Register value
 299:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 300:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 302:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 303:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 304:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return(result);
 306:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 307:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 308:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 309:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 310:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \return               PSP Register value
 313:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 314:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 316:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 317:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 318:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return(result);
 320:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 321:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 322:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 323:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 325:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \return               PSP Register value
 328:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 329:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 331:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 332:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 333:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return(result);
 335:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 336:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 337:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 338:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 339:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 340:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 344:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 346:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 348:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 349:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 350:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 352:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 356:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 358:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 360:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 361:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 362:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 363:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 364:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \return               MSP Register value
 367:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 368:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 370:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 371:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 372:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return(result);
 374:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 375:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 376:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 377:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 379:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \return               MSP Register value
 382:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 383:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 385:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 386:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 387:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return(result);
 389:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 390:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 391:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 392:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 393:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 394:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 398:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 400:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 402:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 403:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 404:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 406:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 410:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 412:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 414:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 415:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 416:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 417:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 419:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \return               SP Register value
 422:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 423:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 425:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 426:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 427:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return(result);
 429:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 430:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 431:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 432:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 433:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 437:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 439:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 441:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 442:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 443:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 444:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 445:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Priority Mask
 446:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \return               Priority Mask value
 448:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 449:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 451:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 452:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 453:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return(result);
 455:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 456:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 457:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 458:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 460:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \return               Priority Mask value
 463:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 464:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 466:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 467:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 468:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return(result);
 470:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 471:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 472:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 473:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 474:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 475:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Priority Mask
 476:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 479:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 481:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 483:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 484:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 485:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 487:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 491:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 493:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 495:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 496:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 497:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 498:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 502:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Enable FIQ
 503:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 506:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 508:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 510:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 511:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 512:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 513:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Disable FIQ
 514:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 517:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 519:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 521:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 522:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 523:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 524:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Base Priority
 525:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \return               Base Priority register value
 527:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 528:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 530:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 531:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 532:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return(result);
 534:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 535:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 536:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 537:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 539:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \return               Base Priority register value
 542:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 543:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 545:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 546:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 547:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return(result);
 549:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 550:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 551:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 552:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 553:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 554:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Base Priority
 555:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 558:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 560:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 562:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 563:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 564:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 566:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 570:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 572:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 574:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 575:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 576:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 577:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 578:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 583:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 585:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 587:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 588:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 589:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 590:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Fault Mask
 591:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \return               Fault Mask register value
 593:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 594:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 596:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 597:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 598:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return(result);
 600:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 601:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 602:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 603:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 605:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \return               Fault Mask register value
 608:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 609:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 611:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 612:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 613:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return(result);
 615:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 616:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 617:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 618:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 619:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 620:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Fault Mask
 621:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 624:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 626:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 628:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 629:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 630:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 632:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 636:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 638:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 640:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 641:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 642:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 646:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 647:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 650:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 651:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   mode.
 655:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   
 656:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \return               PSPLIM Register value
 658:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 659:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 661:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return 0U;
 665:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #else
 666:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 667:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return result;
 669:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 670:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 671:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 672:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 674:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 678:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \return               PSPLIM Register value
 680:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 681:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 683:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return 0U;
 686:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #else
 687:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 688:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return result;
 690:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 691:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 692:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 693:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 694:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 695:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 696:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   mode.
 700:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   
 701:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 704:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 706:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #else
 711:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 713:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 714:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 715:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 716:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 718:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 722:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 725:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 727:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #else
 731:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 733:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 734:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 735:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 736:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 737:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 738:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   mode.
 742:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 743:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \return               MSPLIM Register value
 745:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 746:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 748:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return 0U;
 752:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #else
 753:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 754:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return result;
 756:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 757:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 758:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 759:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 760:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 762:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 766:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \return               MSPLIM Register value
 768:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 769:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 771:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return 0U;
 774:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #else
 775:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 776:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return result;
 778:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 779:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 780:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 781:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 782:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 783:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 784:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   mode.
 788:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 789:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 792:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 794:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #else
 799:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 801:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 802:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 803:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 804:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 806:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 810:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 813:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 815:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #else
 819:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 821:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 822:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 823:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 824:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 827:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 828:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 829:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Get FPSCR
 830:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 833:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 835:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #else
 843:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 844:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 845:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return(result);
 847:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 848:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #else
 849:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return(0U);
 850:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 851:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 852:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 853:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 854:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 855:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Set FPSCR
 856:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 859:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 861:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #else
 869:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 871:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #else
 872:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   (void)fpscr;
 873:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 874:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 875:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 876:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 877:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 879:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 880:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   Access to dedicated instructions
 883:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   @{
 884:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** */
 885:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 886:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #else
 894:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 898:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 899:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 900:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   No Operation
 901:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 903:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 905:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 906:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 909:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 911:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 912:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 913:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Wait For Event
 914:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 917:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 919:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 920:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 921:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Send Event
 922:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 924:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 926:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 927:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 928:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****            after the instruction has been completed.
 932:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 933:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 935:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 937:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 938:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 939:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 940:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 944:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 945:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 946:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 947:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 948:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 949:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 950:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 951:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 955:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 956:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 957:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 959:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 960:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 961:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 962:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 964:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \return               Reversed value
 966:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 967:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 968:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 969:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 970:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #else
 972:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 973:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 974:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   return result;
 976:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #endif
 977:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** }
 978:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 979:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 980:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** /**
 981:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   \return               Reversed value
 985:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****  */
 986:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** {
 988:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 989:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** 
 990:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 302              	 .loc 2 990 0
 303              	
 304 0012 52BA     	 rev16 r2,r2
 305              	
 306              	.LVL27:
 307              	 .thumb
 308              	.LBE10:
 309              	.LBE9:
 310              	 .loc 1 193 0
 311 0014 2A60     	 str r2,[r5]
 312              	.LVL28:
 191:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     {
 313              	 .loc 1 191 0
 314 0016 023C     	 subs r4,r4,#2
 315              	.LVL29:
 316 0018 F8D1     	 bne .L30
 194:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       ++p;
 195:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       length -= 2U;
 196:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     }
 197:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 	
 198:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     *result = (uint16_t)engine->kernel_ptr->CRC;
 317              	 .loc 1 198 0
 318 001a 0268     	 ldr r2,[r0]
 319              	.LVL30:
 320 001c 9269     	 ldr r2,[r2,#24]
 321 001e 1A80     	 strh r2,[r3]
 322              	.LVL31:
 323              	.LBE8:
 177:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 	
 324              	 .loc 1 177 0
 325 0020 0020     	 movs r0,#0
 326              	.LVL32:
 327 0022 02E0     	 b .L26
 328              	.LVL33:
 329              	.L28:
 330              	.LCFI11:
 331              	 .cfi_def_cfa_offset 0
 332              	 .cfi_restore 4
 333              	 .cfi_restore 5
 186:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   }
 334              	 .loc 1 186 0
 335 0024 0220     	 movs r0,#2
 336              	.LVL34:
 199:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   }
 200:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 201:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   return status;
 202:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** }
 337              	 .loc 1 202 0
 338 0026 7047     	 bx lr
 339              	.LVL35:
 340              	.L29:
 341              	.LCFI12:
 342              	 .cfi_def_cfa_offset 8
 343              	 .cfi_offset 4,-8
 344              	 .cfi_offset 5,-4
 186:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   }
 345              	 .loc 1 186 0
 346 0028 0220     	 movs r0,#2
 347              	.LVL36:
 348              	.L26:
 349              	 .loc 1 202 0
 350 002a 30BC     	 pop {r4,r5}
 351              	.LCFI13:
 352              	 .cfi_restore 5
 353              	 .cfi_restore 4
 354              	 .cfi_def_cfa_offset 0
 355              	.LVL37:
 356 002c 7047     	 bx lr
 357              	 .cfi_endproc
 358              	.LFE196:
 360 002e 00BF     	 .section .text.XMC_FCE_CalculateCRC32,"ax",%progbits
 361              	 .align 2
 362              	 .global XMC_FCE_CalculateCRC32
 363              	 .thumb
 364              	 .thumb_func
 366              	XMC_FCE_CalculateCRC32:
 367              	.LFB197:
 203:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 204:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** /* Calculate and return the IEEE 802.3 Ethernet CRC32 checksum */
 205:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** XMC_FCE_STATUS_t XMC_FCE_CalculateCRC32(const XMC_FCE_t *const engine,
 206:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****                                         const uint32_t *data,
 207:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 										uint32_t length,
 208:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 										uint32_t *result)
 209:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** {
 368              	 .loc 1 209 0
 369              	 .cfi_startproc
 370              	 
 371              	 
 372              	 
 373              	.LVL38:
 210:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_FCE_STATUS_t status = XMC_FCE_STATUS_OK;
 211:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 	
 212:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_ASSERT("XMC_FCE_CalculateCRC32: Wrong FCE kernel used", ((engine->kernel_ptr == XMC_FCE_CRC32
 213:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****                                                                (engine->kernel_ptr == XMC_FCE_CRC32
 214:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_ASSERT("XMC_FCE_CalculateCRC32: Length field is empty", (length != 0));
 215:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_ASSERT("XMC_FCE_CalculateCRC32: Length is not aligned", ((length & 0x3U) == 0));
 216:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 217:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   /* Check length is a multiple of 4 */
 218:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   if ((length == 0) || ((length & 0x3U) != 0U))
 374              	 .loc 1 218 0
 375 0000 7AB1     	 cbz r2,.L36
 209:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_FCE_STATUS_t status = XMC_FCE_STATUS_OK;
 376              	 .loc 1 209 0 discriminator 1
 377 0002 30B4     	 push {r4,r5}
 378              	.LCFI14:
 379              	 .cfi_def_cfa_offset 8
 380              	 .cfi_offset 4,-8
 381              	 .cfi_offset 5,-4
 382 0004 1446     	 mov r4,r2
 383              	 .loc 1 218 0 discriminator 1
 384 0006 12F0030F 	 tst r2,#3
 385 000a 0CD1     	 bne .L37
 386              	.LVL39:
 387              	.L38:
 219:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   {
 220:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     status = XMC_FCE_STATUS_ERROR;
 221:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   }
 222:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   else
 223:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   {
 224:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     while (0UL != length)
 225:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     {
 226:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       engine->kernel_ptr->IR = *data;
 388              	 .loc 1 226 0
 389 000c 0268     	 ldr r2,[r0]
 390 000e 51F8045B 	 ldr r5,[r1],#4
 391              	.LVL40:
 392 0012 1560     	 str r5,[r2]
 393              	.LVL41:
 224:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     {
 394              	 .loc 1 224 0
 395 0014 043C     	 subs r4,r4,#4
 396              	.LVL42:
 397 0016 F9D1     	 bne .L38
 227:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       data++;
 228:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       length -= 4U;
 229:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     }
 230:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 231:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     *result = engine->kernel_ptr->CRC;
 398              	 .loc 1 231 0
 399 0018 0268     	 ldr r2,[r0]
 400 001a 9269     	 ldr r2,[r2,#24]
 401 001c 1A60     	 str r2,[r3]
 210:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 	
 402              	 .loc 1 210 0
 403 001e 0020     	 movs r0,#0
 404              	.LVL43:
 405 0020 02E0     	 b .L34
 406              	.LVL44:
 407              	.L36:
 408              	.LCFI15:
 409              	 .cfi_def_cfa_offset 0
 410              	 .cfi_restore 4
 411              	 .cfi_restore 5
 220:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   }
 412              	 .loc 1 220 0
 413 0022 0220     	 movs r0,#2
 414              	.LVL45:
 232:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   }
 233:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   
 234:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   return status;
 235:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** }
 415              	 .loc 1 235 0
 416 0024 7047     	 bx lr
 417              	.LVL46:
 418              	.L37:
 419              	.LCFI16:
 420              	 .cfi_def_cfa_offset 8
 421              	 .cfi_offset 4,-8
 422              	 .cfi_offset 5,-4
 220:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   }
 423              	 .loc 1 220 0
 424 0026 0220     	 movs r0,#2
 425              	.LVL47:
 426              	.L34:
 427              	 .loc 1 235 0
 428 0028 30BC     	 pop {r4,r5}
 429              	.LCFI17:
 430              	 .cfi_restore 5
 431              	 .cfi_restore 4
 432              	 .cfi_def_cfa_offset 0
 433              	.LVL48:
 434 002a 7047     	 bx lr
 435              	 .cfi_endproc
 436              	.LFE197:
 438              	 .section .text.XMC_FCE_CalculateCRC32Ex,"ax",%progbits
 439              	 .align 2
 440              	 .global XMC_FCE_CalculateCRC32Ex
 441              	 .thumb
 442              	 .thumb_func
 444              	XMC_FCE_CalculateCRC32Ex:
 445              	.LFB198:
 236:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 237:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** /* Calculate and return the IEEE 802.3 Ethernet CRC32 checksum */
 238:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** XMC_FCE_STATUS_t XMC_FCE_CalculateCRC32Ex(const XMC_FCE_t *const engine,
 239:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****                                           const uint8_t *data,
 240:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 										                      uint32_t length,
 241:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 										                      uint32_t *const result)
 242:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** {
 446              	 .loc 1 242 0
 447              	 .cfi_startproc
 448              	 
 449              	 
 450              	 
 451              	.LVL49:
 243:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_FCE_STATUS_t status = XMC_FCE_STATUS_OK;
 244:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 	
 245:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_ASSERT("XMC_FCE_CalculateCRC32: Wrong FCE kernel used", ((engine->kernel_ptr == XMC_FCE_CRC32
 246:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****                                                                (engine->kernel_ptr == XMC_FCE_CRC32
 247:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_ASSERT("XMC_FCE_CalculateCRC32: Length field is empty", (length != 0));
 248:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_ASSERT("XMC_FCE_CalculateCRC32: Length is not aligned", ((length & 0x3U) == 0));
 249:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 250:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   /* Check length is a multiple of 4 */
 251:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   if ((length == 0) || ((length & 0x3U) != 0U))
 452              	 .loc 1 251 0
 453 0000 82B1     	 cbz r2,.L44
 242:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   XMC_FCE_STATUS_t status = XMC_FCE_STATUS_OK;
 454              	 .loc 1 242 0 discriminator 1
 455 0002 30B4     	 push {r4,r5}
 456              	.LCFI18:
 457              	 .cfi_def_cfa_offset 8
 458              	 .cfi_offset 4,-8
 459              	 .cfi_offset 5,-4
 460 0004 1446     	 mov r4,r2
 461              	 .loc 1 251 0 discriminator 1
 462 0006 12F0030F 	 tst r2,#3
 463 000a 0DD1     	 bne .L45
 464              	.LVL50:
 465              	.L46:
 466              	.LBB11:
 252:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   {
 253:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     status = XMC_FCE_STATUS_ERROR;
 254:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   }
 255:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   else
 256:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   {
 257:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     const uint32_t *p = (const uint32_t *)data;
 258:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     while (0UL != length)
 259:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     {
 260:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       engine->kernel_ptr->IR = __REV(*p);
 467              	 .loc 1 260 0
 468 000c 0568     	 ldr r5,[r0]
 469              	.LVL51:
 470              	.LBB12:
 471              	.LBB13:
 970:C:/Files/Projects/Git/CMSIS/Include\cmsis_gcc.h **** #else
 472              	 .loc 2 970 0
 473 000e 51F8042B 	 ldr r2,[r1],#4
 474              	.LVL52:
 475 0012 12BA     	 rev r2,r2
 476              	.LBE13:
 477              	.LBE12:
 478              	 .loc 1 260 0
 479 0014 2A60     	 str r2,[r5]
 480              	.LVL53:
 258:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     {
 481              	 .loc 1 258 0
 482 0016 043C     	 subs r4,r4,#4
 483              	.LVL54:
 484 0018 F8D1     	 bne .L46
 261:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       ++p;
 262:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       length -= 4U;
 263:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     }
 264:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 265:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     *result = engine->kernel_ptr->CRC;
 485              	 .loc 1 265 0
 486 001a 0268     	 ldr r2,[r0]
 487 001c 9269     	 ldr r2,[r2,#24]
 488 001e 1A60     	 str r2,[r3]
 489              	.LBE11:
 243:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 	
 490              	 .loc 1 243 0
 491 0020 0020     	 movs r0,#0
 492              	.LVL55:
 493 0022 02E0     	 b .L42
 494              	.LVL56:
 495              	.L44:
 496              	.LCFI19:
 497              	 .cfi_def_cfa_offset 0
 498              	 .cfi_restore 4
 499              	 .cfi_restore 5
 253:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   }
 500              	 .loc 1 253 0
 501 0024 0220     	 movs r0,#2
 502              	.LVL57:
 266:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   }
 267:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   
 268:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   return status;
 269:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** }
 503              	 .loc 1 269 0
 504 0026 7047     	 bx lr
 505              	.LVL58:
 506              	.L45:
 507              	.LCFI20:
 508              	 .cfi_def_cfa_offset 8
 509              	 .cfi_offset 4,-8
 510              	 .cfi_offset 5,-4
 253:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   }
 511              	 .loc 1 253 0
 512 0028 0220     	 movs r0,#2
 513              	.LVL59:
 514              	.L42:
 515              	 .loc 1 269 0
 516 002a 30BC     	 pop {r4,r5}
 517              	.LCFI21:
 518              	 .cfi_restore 5
 519              	 .cfi_restore 4
 520              	 .cfi_def_cfa_offset 0
 521              	.LVL60:
 522 002c 7047     	 bx lr
 523              	 .cfi_endproc
 524              	.LFE198:
 526 002e 00BF     	 .section .text.XMC_FCE_TriggerMismatch,"ax",%progbits
 527              	 .align 2
 528              	 .global XMC_FCE_TriggerMismatch
 529              	 .thumb
 530              	 .thumb_func
 532              	XMC_FCE_TriggerMismatch:
 533              	.LFB199:
 270:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 271:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** /* Trigger mismatch in the CRC registers */
 272:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** void XMC_FCE_TriggerMismatch(const XMC_FCE_t *const engine, XMC_FCE_CTR_TEST_t test)
 273:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** {
 534              	 .loc 1 273 0
 535              	 .cfi_startproc
 536              	 
 537              	 
 538              	 
 539              	.LVL61:
 540 0000 10B4     	 push {r4}
 541              	.LCFI22:
 542              	 .cfi_def_cfa_offset 4
 543              	 .cfi_offset 4,-4
 274:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   /* Create a 0 to 1 transition and clear to 0 once it is done */
 275:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   engine->kernel_ptr->CTR &= ~((uint32_t)test);
 544              	 .loc 1 275 0
 545 0002 0368     	 ldr r3,[r0]
 546 0004 DA69     	 ldr r2,[r3,#28]
 547 0006 CC43     	 mvns r4,r1
 548 0008 2240     	 ands r2,r2,r4
 549 000a DA61     	 str r2,[r3,#28]
 276:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   engine->kernel_ptr->CTR |= (uint32_t)test;
 550              	 .loc 1 276 0
 551 000c 0368     	 ldr r3,[r0]
 552 000e DA69     	 ldr r2,[r3,#28]
 553 0010 1143     	 orrs r1,r1,r2
 554              	.LVL62:
 555 0012 D961     	 str r1,[r3,#28]
 277:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   engine->kernel_ptr->CTR &= ~((uint32_t)test);
 556              	 .loc 1 277 0
 557 0014 0268     	 ldr r2,[r0]
 558 0016 D369     	 ldr r3,[r2,#28]
 559 0018 2340     	 ands r3,r3,r4
 560 001a D361     	 str r3,[r2,#28]
 278:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** }
 561              	 .loc 1 278 0
 562 001c 5DF8044B 	 ldr r4,[sp],#4
 563              	.LCFI23:
 564              	 .cfi_restore 4
 565              	 .cfi_def_cfa_offset 0
 566 0020 7047     	 bx lr
 567              	 .cfi_endproc
 568              	.LFE199:
 570 0022 00BF     	 .section .text.XMC_FCE_LittleEndian16bit,"ax",%progbits
 571              	 .align 2
 572              	 .global XMC_FCE_LittleEndian16bit
 573              	 .thumb
 574              	 .thumb_func
 576              	XMC_FCE_LittleEndian16bit:
 577              	.LFB200:
 279:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 280:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** /* Change endianness of 16-bit input buffer */
 281:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** void XMC_FCE_LittleEndian16bit(uint8_t* inbuffer, uint16_t* outbuffer, uint16_t length)
 282:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** {
 578              	 .loc 1 282 0
 579              	 .cfi_startproc
 580              	 
 581              	 
 582              	 
 583              	.LVL63:
 283:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   uint16_t counter = 0U;
 284:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   uint16_t bytecounter = 0U;
 285:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 286:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   if ((length & 0x01U)  == 0)
 584              	 .loc 1 286 0
 585 0000 12F0010F 	 tst r2,#1
 586 0004 21D1     	 bne .L60
 282:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   uint16_t counter = 0U;
 587              	 .loc 1 282 0 discriminator 1
 588 0006 70B4     	 push {r4,r5,r6}
 589              	.LCFI24:
 590              	 .cfi_def_cfa_offset 12
 591              	 .cfi_offset 4,-12
 592              	 .cfi_offset 5,-8
 593              	 .cfi_offset 6,-4
 287:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   {
 288:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     for (counter = 0U; counter < (length >> 1); counter++)
 594              	 .loc 1 288 0 discriminator 1
 595 0008 5608     	 lsrs r6,r2,#1
 596 000a 09D0     	 beq .L53
 597 000c 8B1E     	 subs r3,r1,#2
 598 000e 741E     	 subs r4,r6,#1
 599 0010 A4B2     	 uxth r4,r4
 600 0012 01EB4404 	 add r4,r1,r4,lsl#1
 289:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     {
 290:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       outbuffer[counter] = 0U;
 601              	 .loc 1 290 0
 602 0016 0025     	 movs r5,#0
 603              	.LVL64:
 604              	.L54:
 605              	 .loc 1 290 0 is_stmt 0 discriminator 3
 606 0018 23F8025F 	 strh r5,[r3,#2]!
 288:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     {
 607              	 .loc 1 288 0 is_stmt 1 discriminator 3
 608 001c A342     	 cmp r3,r4
 609 001e FBD1     	 bne .L54
 610              	.L53:
 291:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     }
 292:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 293:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     outbuffer[counter] = 0U;
 611              	 .loc 1 293 0
 612 0020 0023     	 movs r3,#0
 613 0022 21F81630 	 strh r3,[r1,r6,lsl#1]
 614              	.LVL65:
 294:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     counter = 0U;
 295:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 296:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     while (length)
 615              	 .loc 1 296 0
 616 0026 7AB1     	 cbz r2,.L51
 617 0028 1C46     	 mov r4,r3
 618              	.LVL66:
 619              	.L55:
 620 002a 6300     	 lsls r3,r4,#1
 297:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     {
 298:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       outbuffer[counter] = ((uint16_t)((uint16_t)inbuffer[bytecounter] << 8U) |
 621              	 .loc 1 298 0
 622 002c 9BB2     	 uxth r3,r3
 623 002e A6B2     	 uxth r6,r4
 299:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****                             (inbuffer[bytecounter + 1U]));
 624              	 .loc 1 299 0
 625 0030 C518     	 adds r5,r0,r3
 298:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****                             (inbuffer[bytecounter + 1U]));
 626              	 .loc 1 298 0
 627 0032 6D78     	 ldrb r5,[r5,#1]
 628 0034 C35C     	 ldrb r3,[r0,r3]
 629 0036 45EA0323 	 orr r3,r5,r3,lsl#8
 630 003a 21F81630 	 strh r3,[r1,r6,lsl#1]
 631              	.LVL67:
 300:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       counter += 1U;
 301:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       bytecounter += 2U;
 302:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       length -= 2U;
 632              	 .loc 1 302 0
 633 003e 023A     	 subs r2,r2,#2
 634              	.LVL68:
 635 0040 92B2     	 uxth r2,r2
 636              	.LVL69:
 637 0042 0134     	 adds r4,r4,#1
 638              	.LVL70:
 296:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     {
 639              	 .loc 1 296 0
 640 0044 002A     	 cmp r2,#0
 641 0046 F0D1     	 bne .L55
 642              	.LVL71:
 643              	.L51:
 303:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     }
 304:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   }
 305:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** }
 644              	 .loc 1 305 0
 645 0048 70BC     	 pop {r4,r5,r6}
 646              	.LCFI25:
 647              	 .cfi_restore 6
 648              	 .cfi_restore 5
 649              	 .cfi_restore 4
 650              	 .cfi_def_cfa_offset 0
 651              	.L60:
 652 004a 7047     	 bx lr
 653              	 .cfi_endproc
 654              	.LFE200:
 656              	 .section .text.XMC_FCE_LittleEndian32bit,"ax",%progbits
 657              	 .align 2
 658              	 .global XMC_FCE_LittleEndian32bit
 659              	 .thumb
 660              	 .thumb_func
 662              	XMC_FCE_LittleEndian32bit:
 663              	.LFB201:
 306:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 307:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** /* Change endianness of 32-bit input buffer */
 308:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** void XMC_FCE_LittleEndian32bit(uint8_t* inbuffer, uint32_t* outbuffer, uint16_t length)
 309:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** {
 664              	 .loc 1 309 0
 665              	 .cfi_startproc
 666              	 
 667              	 
 668              	 
 669              	.LVL72:
 310:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   uint16_t counter = 0U;
 311:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   uint16_t bytecounter = 0U;
 312:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****  
 313:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   if ((length & 0x03U) == 0)
 670              	 .loc 1 313 0
 671 0000 12F0030F 	 tst r2,#3
 672 0004 27D1     	 bne .L70
 309:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   uint16_t counter = 0U;
 673              	 .loc 1 309 0 discriminator 1
 674 0006 F0B4     	 push {r4,r5,r6,r7}
 675              	.LCFI26:
 676              	 .cfi_def_cfa_offset 16
 677              	 .cfi_offset 4,-16
 678              	 .cfi_offset 5,-12
 679              	 .cfi_offset 6,-8
 680              	 .cfi_offset 7,-4
 314:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   {
 315:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     for (counter = 0U; counter < (length >> 2U); counter++)
 681              	 .loc 1 315 0 discriminator 1
 682 0008 9608     	 lsrs r6,r2,#2
 683 000a 09D0     	 beq .L63
 684 000c 0B1F     	 subs r3,r1,#4
 685 000e 741E     	 subs r4,r6,#1
 686 0010 A4B2     	 uxth r4,r4
 687 0012 01EB8404 	 add r4,r1,r4,lsl#2
 316:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     {
 317:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       outbuffer[counter] = 0U;
 688              	 .loc 1 317 0
 689 0016 0025     	 movs r5,#0
 690              	.LVL73:
 691              	.L64:
 692              	 .loc 1 317 0 is_stmt 0 discriminator 3
 693 0018 43F8045F 	 str r5,[r3,#4]!
 315:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     {
 694              	 .loc 1 315 0 is_stmt 1 discriminator 3
 695 001c A342     	 cmp r3,r4
 696 001e FBD1     	 bne .L64
 697              	.L63:
 318:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     }
 319:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 320:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     outbuffer[counter] = 0U;
 698              	 .loc 1 320 0
 699 0020 0023     	 movs r3,#0
 700 0022 41F82630 	 str r3,[r1,r6,lsl#2]
 701              	.LVL74:
 321:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     counter = 0U;
 322:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** 
 323:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     while (length)
 702              	 .loc 1 323 0
 703 0026 AAB1     	 cbz r2,.L61
 704 0028 1D46     	 mov r5,r3
 705              	.LVL75:
 706              	.L65:
 707 002a AC00     	 lsls r4,r5,#2
 324:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     {
 325:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       outbuffer[counter] = ((uint32_t)inbuffer[bytecounter]      << 24U) |
 708              	 .loc 1 325 0
 709 002c A4B2     	 uxth r4,r4
 710 002e AFB2     	 uxth r7,r5
 326:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****                            ((uint32_t)inbuffer[bytecounter + 1U] << 16U) |
 327:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****                            ((uint32_t)inbuffer[bytecounter + 2U] <<  8U) |
 328:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****                            (inbuffer[bytecounter + 3U]);
 711              	 .loc 1 328 0
 712 0030 0619     	 adds r6,r0,r4
 327:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****                            (inbuffer[bytecounter + 3U]);
 713              	 .loc 1 327 0
 714 0032 F378     	 ldrb r3,[r6,#3]
 325:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****                            ((uint32_t)inbuffer[bytecounter + 1U] << 16U) |
 715              	 .loc 1 325 0
 716 0034 045D     	 ldrb r4,[r0,r4]
 717 0036 43EA0463 	 orr r3,r3,r4,lsl#24
 326:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****                            ((uint32_t)inbuffer[bytecounter + 1U] << 16U) |
 718              	 .loc 1 326 0
 719 003a 7478     	 ldrb r4,[r6,#1]
 720 003c 43EA0443 	 orr r3,r3,r4,lsl#16
 327:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****                            (inbuffer[bytecounter + 3U]);
 721              	 .loc 1 327 0
 722 0040 B478     	 ldrb r4,[r6,#2]
 723 0042 43EA0423 	 orr r3,r3,r4,lsl#8
 325:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****                            ((uint32_t)inbuffer[bytecounter + 1U] << 16U) |
 724              	 .loc 1 325 0
 725 0046 41F82730 	 str r3,[r1,r7,lsl#2]
 726              	.LVL76:
 329:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       counter += 1U;
 330:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       bytecounter += 4U;
 331:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****       length -= 4U;
 727              	 .loc 1 331 0
 728 004a 043A     	 subs r2,r2,#4
 729              	.LVL77:
 730 004c 92B2     	 uxth r2,r2
 731              	.LVL78:
 732 004e 0135     	 adds r5,r5,#1
 733              	.LVL79:
 323:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     {
 734              	 .loc 1 323 0
 735 0050 002A     	 cmp r2,#0
 736 0052 EAD1     	 bne .L65
 737              	.LVL80:
 738              	.L61:
 332:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****     }
 333:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c ****   }
 334:C:/Files/Projects/Git/XMCLib/src\xmc_fce.c **** }
 739              	 .loc 1 334 0
 740 0054 F0BC     	 pop {r4,r5,r6,r7}
 741              	.LCFI27:
 742              	 .cfi_restore 7
 743              	 .cfi_restore 6
 744              	 .cfi_restore 5
 745              	 .cfi_restore 4
 746              	 .cfi_def_cfa_offset 0
 747              	.L70:
 748 0056 7047     	 bx lr
 749              	 .cfi_endproc
 750              	.LFE201:
 752              	 .text
 753              	.Letext0:
 754              	 .file 3 "c:\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 755              	 .file 4 "c:\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 756              	 .file 5 "C:/Files/Projects/Git/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 757              	 .file 6 "C:/Files/Projects/Git/XMCLib/inc/xmc_fce.h"
 758              	 .file 7 "C:/Files/Projects/Git/XMCLib/inc/xmc4_scu.h"
 759              	 .file 8 "C:/Files/Projects/Git/CMSIS/Include/core_cm4.h"
 760              	 .file 9 "C:/Files/Projects/Git/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_fce.c
    {standard input}:20     .text.XMC_FCE_Init:00000000 $t
    {standard input}:25     .text.XMC_FCE_Init:00000000 XMC_FCE_Init
    {standard input}:50     .text.XMC_FCE_Disable:00000000 $t
    {standard input}:55     .text.XMC_FCE_Disable:00000000 XMC_FCE_Disable
    {standard input}:79     .text.XMC_FCE_Disable:00000014 $d
    {standard input}:85     .text.XMC_FCE_Enable:00000000 $t
    {standard input}:90     .text.XMC_FCE_Enable:00000000 XMC_FCE_Enable
    {standard input}:114    .text.XMC_FCE_Enable:00000014 $d
    {standard input}:120    .text.XMC_FCE_CalculateCRC8:00000000 $t
    {standard input}:125    .text.XMC_FCE_CalculateCRC8:00000000 XMC_FCE_CalculateCRC8
    {standard input}:188    .text.XMC_FCE_CalculateCRC16:00000000 $t
    {standard input}:193    .text.XMC_FCE_CalculateCRC16:00000000 XMC_FCE_CalculateCRC16
    {standard input}:266    .text.XMC_FCE_CalculateCRC16Ex:00000000 $t
    {standard input}:271    .text.XMC_FCE_CalculateCRC16Ex:00000000 XMC_FCE_CalculateCRC16Ex
    {standard input}:361    .text.XMC_FCE_CalculateCRC32:00000000 $t
    {standard input}:366    .text.XMC_FCE_CalculateCRC32:00000000 XMC_FCE_CalculateCRC32
    {standard input}:439    .text.XMC_FCE_CalculateCRC32Ex:00000000 $t
    {standard input}:444    .text.XMC_FCE_CalculateCRC32Ex:00000000 XMC_FCE_CalculateCRC32Ex
    {standard input}:527    .text.XMC_FCE_TriggerMismatch:00000000 $t
    {standard input}:532    .text.XMC_FCE_TriggerMismatch:00000000 XMC_FCE_TriggerMismatch
    {standard input}:571    .text.XMC_FCE_LittleEndian16bit:00000000 $t
    {standard input}:576    .text.XMC_FCE_LittleEndian16bit:00000000 XMC_FCE_LittleEndian16bit
    {standard input}:657    .text.XMC_FCE_LittleEndian32bit:00000000 $t
    {standard input}:662    .text.XMC_FCE_LittleEndian32bit:00000000 XMC_FCE_LittleEndian32bit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_RESET_DeassertPeripheralReset
